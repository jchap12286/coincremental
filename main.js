var bankAccount = 0
var collectionFace = 0
var collectionWorth = 0
const mintageBoundaries = [0, 545191612829, 614383049625, 726990180823, 824693733321, 829994280344, 836264234708]
var totalMintage = mintageBoundaries[1]
const cumulMintage = [0,1250,17451250,42051250,78451250,99017250,109117250,137192250,187032250,240005964,275435250,
      285261750,295082750,305349250,311769250,317044250,320973750,325015750,336692250,350879750,364407750,
      372351750,373204250,379001750,395229750,434190750,473398750,511976750,557568250,580826050,592587644,
      610237644,655461167,692950999,741817024,798997138,846067138,883714225,930354225,947103725,985445299,
      1024500730,1074965122,1124786406,1178384406,1245215908,1324825066,1412199770,1497292473,1558618671,1639335682,
      1735356212,1843493355,1875819722,1876934722,1891303192,1891612192,1964314810,1966139810,1994134810,1994618810,
      2141420028,2147465028,2248642815,2261314815,2265340815,2333493875,2343904875,2348335875,2424868227,2440672227,
      2446773227,2522011659,2523204659,2527341659,2556433779,2578483779,2583316779,2715150456,2751106456,2773616456,
      2970046241,3025166241,3057786241,3345890875,3393720875,3428400875,3820421875,3877575875,4017335875,4327500875,
      4376780875,4423000875,4462157875,4477431875,4484591875,4559314875,4568014875,4643192875,4645712875,4657408875,
      4797357875,4819937875,4846317875,5003405875,5031425875,5035975875,5180415875,5207585875,5221861875,5355977875,
      5387147875,5404413875,5589675875,5631405875,5681553875,5838968875,5879068875,5903354875,5922750875,5927230875,
      5928096875,5937158875,5947658875,5962018875,5968218875,6187298875,6215744875,6461132875,6508132875,6546834875,
      6856466875,6897086875,6926216875,7235386875,7285816875,7320316875,7476998875,7497008875,7512188875,7828654875,
      7843814875,7895884875,8482694875,8564084875,8677024875,9564042875,9692742875,9785102875,10442898875,10649596875,
      10735186875,11419815545,11637475545,11829025545,13264425545,13695003545,13977763545,15018278545,15284546545,15466316545,
      16457971545,16773661545,16971761545,17162316545,17357066545,17456066545,17773636545,17946274045,18028009045,18245784045,
      18398916545,18463206545,18735841545,19070791545,19189296545,19473872545,20099227545,20235237545,20422012545,21168142545,
      21305942549,21562697549,22263212549,22445047549,22516687599,22768240099,22864430099,23195388299,23758645799,23803255799,
      24224000799,25322201899,25604741899,26656083899,26908608899,27709562199,28319277199,29599037199,30185442199,31766326199,
      32519671199,34272937899,34878982899,36672131039,37426241039,39200261439,41848836439,45647907939,47145132839,49333280622,
      52381947722,54089828692,56976098292,57234368293,58371278293,62374110493,62918485493,64816800493,67708239393,68398799397,
      70318289397,73229334997,73754468456,76687723456,79352794856,79729733964,83457978964,87007555552,87324732847,91556873370,
      95791971370,96201398030,101652874172,106158149472,110832441898,115054034353,119523964353,123718026653,129276631653,133556865053,
      139575380053,143714737307,151129442307,156269540967,163761290967,169134526644,179847051644,185860031012,193612386012,200079585440,
      208230664440,213799903346,219448393233,224735733159,229227128652,233669995350,238352462281,243231851795,249324661795,254578402238,
      261839937238,267185404349,274037169349,278960063882,284126003882,288284449958,292933354958,297382028258,303066733258,309493383829,
      315994233829,323125998829,329537438829,336665998829,343278463829,349789258829,354412058829,358988613829,364020768829,369246122329,
      374483722329,380843787329,386346987329,395121207329,400080807329,405455797329,408716597329,412744652329,416044652329,419592652329,
      422972252329,426428652329,430382252329,434146702829,438436702829,442380702829,446143102829,449781902829,452340702829,455190302829,
      456296302829,457544302829,459507932829,461555132829,463957532829,466493672829,469625672829,472508872829,476259272829,479578872829,
      483569672829,487725272829,492416572829,497090572829,501788572829,506208972829,510570192829,514842992829,518909792829,522646192829,
      526188992829,529686592829,533612412829,537595212829,541156012829,545191612829,545206355329,545235245829,545264062829,545280457829,
      545285263829,545285824829,545291860829,545295974779,545299512779,545301609779,545304139779,545304165679,545304181679,545304250479,
      545315723379,545317174879,545333201079,545344471079,545345943779,545349269779,545364530471,545374698372,545390576397,545406832929,
      545423664929,545435361826,545448729826,545454140326,545464118148,545472959206,545493386003,545505916295,545531943295,545559197028,
      545585675256,545617162817,545645167752,545666570919,545696396043,545735008043,545774221368,545796905925,545808491688,545838658636,
      545878216275,545904450844,545912924844,545913162844,545944154844,545949491844,545951596844,545981454030,545985610030,545986819030,
      546007483493,546011395493,546014865493,546035851713,546043420713,546044925713,546108423179,546121756179,546133616179,546185040198,
      546194950198,546199143198,546231229512,546239591512,546244473512,546305341512,546313347512,546320868512,546383961512,546393379512,
      546403068512,546413731512,546415288512,546451003512,546457145512,546478765512,546484023512,546485460512,546521025612,546525475612,
      546531731612,546576424612,546582062612,546583032612,546621013612,546626743612,546630173612,546653584612,546660020612,546666956612,
      546703402612,546711772612,546719526612,546742375612,546747810612,546749010612,546769223615,546776703615,546834967615,546847059615,
      546857359615,546976356615,547001170615,547016100615,547095580615,547113406615,547113416615,547119051615,547126071615,547145567615,
      547150943615,547155048615,547275663615,547279177615,547285807615,547462292615,547505832615,547545522615,547748787615,547802219615,
      547845664615,547895453615,547909391615,547967264615,548000164615,548271329615,548286623615,548390683615,548509833615,548542142615,
      548563782615,548683190715,548720348715,548779287715,548940403715,548985695915,548999255915,549094255915,549132077915,549156797915,
      549246145915,549290879915,549302179915,549362831915,549399329915,549409045915,549418841915,549421471945,549450023945,549470483945,
      549478259945,549542247945,549572885945,549593457945,549640101945,549699980545,549719191445,549766875495,549884058555,549913442555,
      549921330555,549995794655,550031010655,550098233595,550136641595,550273470495,550290558495,550458807615,550486055615,550646793855,
      550702209855,550894792035,550968432135,551197774895,551295158895,551575354615,551751130615,552027960075,553052632075,554839929235,
      554976060615,555132268898,555239594698,555330822578,555431218582,555634026082,555754191082,556269676462,556508508466,556615392466,
      556931537266,557133573266,557485267866,557869663866,558131068866,558732820866,559010193866,559191965866,559593841166,559960965166,
      560524929313,561110305313,561407618735,561798926735,562112019515,562575207515,562901075187,563494079187,563996402635,564653906635,
      565018708478,565311063478,565684790022,566246405022,566783131298,567529900298,568047575444,568694690406,569154437852,569691321335,
      570053140475,570424639956,570835230560,571606590560,572270362212,573169174212,573740016686,574401652686,575065591189,575679695189,
      576116191867,576515743867,576966308980,577378384980,577784469115,578506629115,579222391225,579996547225,580884659225,581713991225,
      582531727225,583002699225,583469339225,584157611225,584792971225,586004971225,587071691225,587917931225,589427451225,590103155225,
      590730835225,591270115225,591961315225,592403155225,592786195225,593147635225,593519635225,593886355225,594231235225,594679555225,
      595167235225,595561315225,595972435225,596665555225,597474835225,598046515225,598672675225,598952515225,599298115225,599337955225,
      599384755225,599645395225,599875315225,600325315225,600865555225,601330195225,601889155225,602496595225,603112195225,603747715225,
      604318435225,605071315225,605918035225,606704995225,607464595225,608174755225,608837875225,609467395225,610094275225,610662129625,
      611189169625,611961949625,612759949625,613545449625,614383049625,614383732125,614385724625,614386130659,614387183774,614388471774,
      614389453274,614390628274,614391005774,614392628274,614394635774,614396523274,614398543274,614399913274,614400063274,614400135774,
      614401890774,614402120774,614402152074,614402397074,614402848574,614403687574,614403987574,614405919074,614406429074,614407455574,
      614407855574,614409391074,614409821074,614409916074,614422089074,614423189074,614427659074,614429429074,614431504074,614437284074,
      614438464074,614438534074,614444114074,614445654074,614447194074,614447394074,614447454074,614447883274,614448363274,614448423274,
      614449029274,614449069274,614449209274,614451092274,614451264774,614452111774,614452292524,614452306524,614452464024,614452475024,
      614452705024,614452715024,614452890024,614452898024,614453033024,614453039024,614453179024,614453643024,614453903024,614454159024,
      614454609024,614455079524,614455129524,614456036274,614456056374,614456376374,614458771874,614458807354,614458997354,614462842454,
      614462861245,614463316245,614466256245,614466267062,614466507062,614476857062,614481502062,614490572062,614502032062,614510302062,
      614520722062,614528032062,614535732062,614538072062,614539749262,614539949262,614539963262,614539999262,614540023262,614543933262,
      614551607935,614554973440,614555538409,614558070906,614558114596,614564491280,614564697804,614575981033,614580435483,614585931138,
      614587651138,614595031138,614596003816,614605914767,614607337843,614622647843,614627187843,614630383959,614642503959,614646345659,
      614647336369,614650676309,614652436309,614654927710,614656257710,614656977710,614657667710,614658107710,614659227710,614661227710,
      614661837710,614662412766,614673281299,614673947299,614675290143,614691610143,614693740143,614695442650,614715022650,614717672650,
      614719540143,614737140143,614739150143,614744318413,614763178078,614768798078,614769391100,614790771100,614795271100,614797341100,
      614816841100,614825021100,614825634400,614840234757,614841034757,614855586380,614858986380,614865841579,614885799310,614889859310,
      614892469310,614895605950,614917825950,614921905950,614926963950,614930142420,614940742420,614948232420,614950021420,614953241420,
      614963481420,614964435420,614966722420,614967722420,614979242420,614982732420,614983972420,615002842420,615014051420,615017571420,
      615036920720,615048680720,615052100720,615071860720,615072370720,615089730720,615101638720,615103738720,615109358720,615110318720,
      615128808720,615134628720,615156808720,615157072720,615167522720,615222752720,615232154720,615259484720,615286164720,615308839520,
      615328139520,615363879520,615373818520,615382668520,615441698520,615460869520,615474689520,615475919520,615476999520,615527129520,
      615533569520,615557579520,615564389520,615571509520,615597119520,615602236520,615608086520,615640246520,615647074520,615648594520,
      615676674520,615681486520,615686256520,615705736520,615709897520,615717297520,615743267520,615748301520,615753031520,615759801520,
      615761644520,615764794520,615766054520,615767854520,615791934520,615798706520,615857536520,615868013520,615883853520,615971353520,
      615987485520,615996695520,616053555520,616067701520,616077441520,616099631520,616105168520,616113258520,616180998520,616205392520,
      616215932520,616281282520,616302480520,616324040520,616499130520,616544764520,616587854520,616793264520,616854004520,616903304520,
      617095014520,617166963520,617227363520,617458773520,617520997520,617570487520,617729617520,617769862520,617811782520,618067032520,
      618128076020,618155976020,618277496020,618324331020,618359171020,618434121020,618486962020,618522482020,618553422020,618579456020,
      618592966020,618643096134,618689899134,618710339134,618814219236,618870748236,618902378236,619001418329,619123518329,619167937829,
      619221427949,619357860949,619397040949,619511051152,619617448152,619640308152,619652758333,619666717333,619685227333,619793867333,
      619901882433,620062042433,620175396763,620207306763,620343871363,620429651363,620594571153,620664961153,620865121553,620958851553,
      621167998103,621240448103,621575396483,621699046483,622120523013,623049883013,624407400193,626059540763,627442275303,629686282623,
      630110753023,630591501303,630737291303,631300615173,631646185173,632401127273,632563817273,632941731513,633373271513,633703561513,
      634019231513,634474263939,634944511939,635515594939,636101268839,636414974139,636983734139,637678956913,638475886913,638852494141,
      639516474141,639799321681,640114761681,640505682865,641240852865,641960207186,642636857186,643349141329,643868616329,644411329913,
      645058354913,645788484137,646645153137,647349957113,648055158075,648643138045,649325787738,649799114708,650561824189,651215027591,
      652245577591,653207963080,654506363080,655402898677,656437238677,657277234501,658204454501,658805695615,659399195615,660015469547,
      660781649547,661531759713,662720759713,664024027823,665149527823,666424417823,667845580823,669245880823,670237520823,671217330823,
      672380330823,673552580823,675716580823,677114330823,678956830823,680775530823,682145120823,683557920823,684745420823,686124920823,
      687210420823,688196920823,689524920823,690684420823,692096420823,693519920823,694900920823,696347920823,697395420823,698437420823,
      698828420823,699452920823,699549420823,699598920823,700155920823,700717920823,701465920823,702219920823,703027920823,703895920823,
      704982420823,706007920823,707133420823,708310420823,709807930823,711351430823,712868430823,714305430823,715742930823,717033430823,
      718226430823,719232430823,720379930823,721381430823,722730680823,724211680823,725545180823,726990180823,726990646823,726991137969,
      726991520169,726991708296,726991751296,726991871296,726992323296,726992411296,726993180296,726993825896,726994793896,726995215096,
      726995955096,726996877096,726997387096,726998121096,726998489096,726998635096,726998975096,726999165896,726999577896,726999737896,
      726999825896,727000002956,727000098956,727000143156,727015353176,727016685176,727029065176,727030549176,727033406176,727033582176,
      727033978576,727041242576,727042210576,727042496576,727052140576,727053320576,727053402576,727060770576,727061290576,727061411576,
      727062754776,727063014776,727063094776,727063899176,727064287176,727064343176,727069196776,727069292776,727070224776,727070291776,
      727070483376,727070576976,727070596976,727070655776,727070696776,727070713576,727070741576,727070761576,727070809576,727070838976,
      727070934976,727070950976,727071026976,727071113376,727071121716,727071239916,727071250806,727071281706,727071463706,727071486556,
      727071569556,727071609556,727071781556,727073052756,727073065218,727073221218,727073692418,727074084418,727078377218,727078517218,
      727079197218,727097013218,727101957218,727110553218,727121464418,727125656418,727134652418,727136912418,727137908418,727138048418,
      727138062018,727138075618,727138087618,727138102818,727138117218,727138125218,727138138818,727138143818,727138153818,727138163819,
      727139379819,727139391819,727139471819,727143391819,727143459819,727145675819,727153911819,727156371819,727157335898,727162779921,
      727166175921,727167630456,727171062456,727173914456,727176563277,727181003277,727183819277,727185583958,727189457958,727190941958,
      727191129997,727199269997,727200684797,727201227026,727212327026,727214195026,727215215618,727227839618,727230483618,727231191618,
      727241207618,727244623618,727246482203,727255374203,727256986203,727257058867,727269255834,727274003834,727275528446,727285287755,
      727288787755,727289823755,727299411898,727301867898,727306835421,727308065421,727309949421,727313605181,727316885181,727318941181,
      727326073181,727328557181,727333117181,727334477181,727338709181,727344497181,727350741181,727351525181,727360793181,727365907181,
      727366619181,727367967181,727370211181,727371711181,727375431181,727376364781,727377352781,727381752781,727382460781,727382944781,
      727384395581,727384435581,727390679811,727393725811,727393989811,727397469811,727401163811,727401867811,727403655811,727410196611,
      727410248611,727418988611,727420497811,727422449811,727436329811,727442554211,727448106211,727462346211,727469726211,727480798211,
      727492122211,727494066211,727495902211,727523762211,727527348611,727533728611,727535644611,727545360611,727546720611,727557640611,
      727560752611,727563612611,727575892611,727587208611,727588924611,727591624611,727603536611,727604512611,727604908611,727611244611,
      727612872211,727615516211,727626656211,727628014211,727629778211,727635410211,727636966211,727642370211,727642807011,727643215011,
      727675127063,727678654263,727711138263,727716918263,727722578263,727763878263,727769252263,727773080263,727792776263,727799965863,
      727801617863,727811089863,727813921863,727847461863,727854553863,727857181863,727892885863,727895683463,727903927463,727982959463,
      727999674263,728015754263,728117850263,728135337463,728154721463,728254421463,728270517063,728292217063,728397173063,728411773863,
      728424333863,728498705863,728511047463,728528051464,728581487464,728590560264,728594764264,728617320264,728632658664,728638190664,
      728673386664,728690153464,728706113464,728715425464,728725493864,728750413990,728771489590,728781773594,728825221696,728860576496,
      728869624496,728908404589,728958199789,728971907589,728990443709,729046556109,729060572109,729114984312,729157289812,729169124534,
      729187304715,729190487115,729234631115,729266965615,729313497615,729391421775,729397781775,729475906675,729500290675,729562344907,
      729591508907,729654509231,729691545231,729775202159,729811358159,729938912915,730013228915,730148517099,730708907684,731413043212,
      733232760752,734053862252,735577894100,735798625600,735900159600,736076371600,736190743600,736327163600,736744504964,736853788964,
      737112423392,737327471392,737638539124,737985463124,738218440524,739019896524,739373056824,740182840840,741042959679,741053959679,
      741522515679,741779040657,742300492657,742587865809,743103573809,743593363589,744229195589,744747523076,745349239076,745924961909,
      746425892909,746905935697,747579470697,748197277143,748873822143,749420305207,750196124169,750716087057,751267286390,751771585050,
      752354084531,753009679227,753571731227,754168541915,754681409915,755577945512,756191737512,757119375693,757690343693,758321310386,
      758706074386,759095851493,759735127493,760380603621,761206203621,762086237731,763090573731,764193789731,765118829731,766025697731,
      766621437731,767221117731,768117385731,768938385731,769311785731,769713209731,770062209731,770420541731,770783741731,771082769731,
      771533957731,772022701731,772711445731,773369325731,773997925731,774533109731,775211309731,775767841731,776510417731,777076625731,
      777749665731,778245641731,779188641731,779840257731,780495657731,781115297731,781742897731,782170773731,782593773731,783040873731,
      783464273731,783923677731,784276677731,784647241731,785008841731,785295309731,785512509731,785927341731,786289341731,786691545731,
      787054145731,787381345731,787671345731,787960945731,788186745731,788424145731,788649145731,788881545731,789098945731,789330345731,
      789555345731,789783545731,790011545731,790241345731,790475145731,790700945731,790941145731,791182745731,791461545731,791724545731,
      791938345731,792189745731,792416145731,792642945731,792900145731,793163345731,793402945731,793651345731,793967545731,794371545731,
      794634945731,794934945731,795300345731,795656545731,795933545731,796246345731,796564345731,796837345731,797112145731,797406345731,
      797712145731,798071145731,798316145731,798581945731,798838945731,799095185731,799360385731,799640385731,799934985731,800221785731,
      800465385731,800786185731,801041185731,801294385731,801516385731,801710985731,801955185731,802199585731,802444185731,802709185731,
      802960985731,803214985731,803468985731,803732585731,803816185731,803904985731,803958185731,804044185731,804089185731,804131785731,
      804174385731,804213985731,804254985731,804295985731,804331185731,804368785731,804404385731,804438385731,804471985731,804506785731,
      804541985731,804576785731,804611585731,804646985731,804681385731,804715785731,804746585731,804776985731,804807385731,804838585731,
      804868985731,804899585731,804930385731,804963785731,805037585731,805106985731,805132785731,805157785731,805159465871,805181465871,
      805203465871,805204854891,805229654891,805261260891,805262670011,805308870011,805387470011,805388879131,805524279131,805690879131,
      805692288351,805761088351,805868688351,805870295251,805978095251,806109695251,806111121111,806233521111,806374921111,806376237611,
      806496237611,806647637611,806648951291,806880751291,807153151291,807154524551,807227724551,807327124551,807328485331,807441285331,
      807639085331,807640352051,807854552051,808105952051,808107187991,808266787991,808438587991,808439764751,808597365951,808739765951,
      808740946851,808955346851,809203946851,809205100691,809602300691,809981900691,809983000071,810308616071,810813816071,810814912691,
      811089912691,811296312691,811297326611,811520326611,811736126611,811737172111,811892772111,812044572111,812045654025,812261054025,
      812484254025,812485290118,812919920118,813343920118,813344970303,813576570303,813799770303,813800843395,813955243395,814097443395,
      814098422961,814369622961,814580422961,814581368814,814766168814,814951968814,814952919317,815155919317,815355919317,815356841064,
      815590841064,815844841064,815845814211,816037414211,816218214211,816219147361,816405861361,816588461361,816589392581,816812592581,
      817029192581,817030081661,817267481661,817465281661,817466149061,817604149061,817755749061,817756630001,817916230001,818075830001,
      818076684941,818242484941,818424684941,818425594021,818427594021,818570394021,818752994021,818753898901,818755898901,818872498901,
      818986898901,818987823281,818989823281,819132623281,819262023281,819262954861,819264954861,819488354861,819739954861,819740856781,
      819742856781,820028856781,820241056781,820241996541,820243996541,820369596541,820524596541,820525542361,820527542361,821107742361,
      821622742361,821623673321,821625673321,821930273321,822276073321,822277002261,822279002261,822380202261,822522602261,822523533321,
      822525533321,822685933321,822989933321,823828333321,824693733321,824695705721,824697140729,824697995829,824698305829,824698706829,
      824700719593,824701473593,824705317593,824707585593,824709351593,824711356593,824711945593,824714039593,824716249593,824718553593,
      824719709593,824722293593,824722873593,824726053593,824727305593,824729615593,824729842593,824732298593,824732499343,824732901343,
      824732978473,824733122473,824736655181,824737983181,824740965181,824746205181,824746964681,824750652681,824750782631,824751720631,
      824754378631,824754589631,824756577631,824757395631,824757553631,824761779331,824769073331,824769549331,824770296531,824773130531,
      824773696531,824773999231,824775289231,824775761231,824778648631,824781181264,824782120764,824782373764,824783725764,824784228964,
      824785144964,824785524064,824786182064,824786693464,824787368464,824788113364,824789107364,824789167364,824789616664,824790812664,
      824791230264,824792390264,824793185564,824793841564,824794475464,824794530081,824795534081,824796737681,824796891631,824799069631,
      824799950231,824800207231,824800787231,824801374231,824801588431,824801710931,824803526131,824803740691,824803968691,824806328291,
      824806387291,824806781291,824812808091,824813816091,824817016091,824825434091,824827390091,824831918091,824840222091,824841642091,
      824846998091,824848375691,824848437691,824848449691,824848454491,824848462891,824848472891,824848477291,824848485291,824848489691,
      824848494891,824848499891,824848504891,824848516892,824848528892,824848540892,824848740892,824849674892,824850064892,824851093920,
      824852919920,824854308920,824855048920,824856196920,824858334920,824862383610,824864217948,824865983948,824867092034,824868042034,
      824868966034,824870106982,824872586982,824873218982,824874152882,824877108882,824877982882,824880341432,824885879432,824887603432,
      824889289843,824894051843,824896795843,824899356165,824903624165,824904748165,824905595209,824910517209,824913043209,824914503879,
      824916781879,824918881879,824920802651,824923794651,824924912251,824925465289,824926127289,824926632289,824929126289,824931764289,
      824935792289,824938238289,824939978443,824942576443,824946432443,824950379043,824951629043,824952983043,824956263043,824961623043,
      824963267871,824965635871,824966561271,824968325271,824968806271,824970754271,824972160271,824972855351,824974127351,824975677351,
      824977978151,824979348151,824979536151,824980070151,824980674151,824980798381,824981790381,824981928381,824983098781,824984702781,
      824985310781,824986325181,824986833181,824999125181,824999890581,825001830581,825002782581,825008336581,825014970581,825018823621,
      825029105621,825030067621,825031232621,825032784621,825039156621,825040707621,825045331621,825045577621,825045785621,825046333621,
      825048511621,825050903621,825052843621,825053844821,825055746821,825057532821,825064496821,825066857821,825070509821,825079671821,
      825082675621,825086529621,825099143621,825103396021,825107280021,825116802021,825118478021,825120568021,825124678021,825125169621,
      825131981621,825136249421,825138801421,825147957421,825152507421,825176699421,825187947821,825196045821,825243863821,825254837621,
      825267545621,825320735621,825332081621,825345531621,825373737621,825383506621,825392410621,825423912621,825433879421,825444035421,
      825456153421,825458304421,825462028421,825466122421,825470023021,825473029835,825477058435,825482672435,825486793035,825490537035,
      825498279158,825506310758,825523112860,825532588060,825546284060,825567476153,825592871753,825598397753,825601065873,825621966273,
      825626114273,825639302475,825664748055,825669741455,825672239636,825676271636,825681385636,825701352486,825705394486,825729356898,
      825735556898,825748610648,825754634648,825772850460,825781140460,825801416902,825811130902,825846604183,825868768183,825935837475,
      826209141479,826365346925,826431226291,826540211223,826835258201,827082210131,827212091931,827214241931,827369405931,827671503355,
      827824683355,827966573355,828031537355,828114708755,828316304755,828395371055,828629679055,828917244303,828928244303,828971842303,
      829003291409,829017641409,829031407208,829099719208,829115534630,829159668630,829193125079,829222669079,829250508612,829261327612,
      829274467714,829308606714,829341078958,829367107958,829393370116,829412077078,829431891112,829444998745,829460334890,829473960890,
      829485960986,829510502986,829533503202,829555781202,829575877444,829590751444,829605806122,829623434122,829640434228,829655944228,
      829670944234,829694662234,829718490344,829744986344,829771274344,829795716344,829820460344,829841342344,829861218344,829876864344,
      829891928344,829900828344,829911510344,829934110344,829953576344,829974776344,829994280344,829994341349,829994514349,829994698967,
      829994864067,829994884067,829994908567,829995019167,829995078167,829995218917,829995233917,829995296517,829995304017,829995344017,
      829995345317,829995346417,829995392527,829995425667,829995451667,829995515167,829995609167,829995864867,829996224867,829996244867,
      829996462467,829996977467,829997054967,829997066507,829997093707,829997124407,829997170907,829997219807,829997266707,829997428807,
      829997852507,829998267507,829998279265,829999353065,829999354441,830000459941,830000463091,830000472091,830000765091,830000767391,
      830001164291,830001288791,830001991791,830002978891,830004352091,830006901091,830007119291,830008692991,830013179991,830013634991,
      830014143991,830019370991,830022410191,830022944191,830032463191,830032560191,830036722191,830037471691,830047230991,830049442991,
      830059216991,830074022991,830074778991,830077665991,830086775991,830099375991,830099966991,830105271991,830114171991,830123334991,
      830123630991,830129338991,830142098991,830153198991,830154331991,830160421991,830169671991,830181961991,830183165991,830191890991,
      830198140991,830212210991,830213346991,830223076991,830226276991,830244063991,830244291991,830253476991,830254973991,830274936991,
      830285646991,830286396991,830306686991,830318236991,830320007991,830339190991,830351340991,830351997991,830373723991,830374073991,
      830385948991,830386648991,830403450991,830405760032,830416461032,830424691405,830433384961,830435002961,830442957490,830448253490,
      830449289490,830450641490,830453385490,830454585490,830454963490,830455640490,830455940490,830456040490,830456150490,830457873490,
      830459133490,830459583490,830459983490,830469959490,830474859490,830479859490,830482681490,830486685490,830492510490,830498394490,
      830502834490,830506936490,830507266490,830519556490,830522118490,830530948490,830543538490,830547078490,830554040490,830567360490,
      830569644490,830577638490,830586274490,830587804490,830592456490,830596906490,830598147490,830600935490,830604655490,830606959490,
      830651649490,830671994490,830693689490,830694695963,830746432963,830761495963,830778970963,830809770963,830816581963,830835601963,
      830847412963,830849140963,830859338963,830860948963,830862887963,830865236663,830872216663,830873064663,830874333563,830875199563,
      830875560212,830877192212,830878146269,830879715769,830880726769,830882302769,830884266769,830932065769,831000653193,831007521723,
      831083411723,831175960234,831178153290,831180036430,831207402430,831252919430,831254819586,831258838586,831372156586,831393205296,
      831475384860,831487980860,831520963866,831546665866,831579678756,831939900756,832227916500,832337492500,832365102500,832406731208,
      832427153208,832456745208,832468521208,833235661208,833754577208,833817045208,833887984708,834064664708,834228344708,834340764708,
      834452904708,834553704708,834656514708,834741074708,834828854708,834893114708,834953344708,835010884708,835068604708,835129784708,
      835190854708,835242374708,835293334708,835336594708,835391754708,835435294708,835478834708,835525454708,835567174708,835608754708,
      835645434708,835682954708,835719914708,835758134708,835796494708,835833314708,835869854708,835918854708,835966874708,836002434708,
      836039534708,836077614708,836115554708,836153214708,836190034708,836227134708,836264234708]
var quantity = Array(2298).fill(0)
var face = Array(2298).fill(0)
var worth = Array(2298).fill(0)
var rarityWord = Array(2298).fill("")
var rarityWordMod = Array(2298).fill("")
var coloredRarity = Array(2298).fill("")
var coinType = Array(2298).fill("")
var coinTypePlural = Array(2298).fill("")
var binaryCoinSide = Array(2298).fill(0)
var xC = Array(2298).fill(0)
var yC = Array(2298).fill(0)
for (let i = 1; i <= 2297; i++) {
  var string = document.getElementById("qty"+i).nextElementSibling.innerHTML
  var cleanString = string.replace("$","").replace(",","")
  worth[i] = parseFloat(cleanString)
  if (i < 327) {
    face[i] = 0.01
    coinType[i] = "penny"
    coinTypePlural[i] = "Pennies"
    yC[i] = 1
  }
  else if (i < 626) {
    face[i] = 0.05
    coinType[i] = "nickel"
    coinTypePlural[i] = "Nickels"
    yC[i] = 2
  }
  else if (i < 1049) {
    face[i] = 0.10
    coinType[i] = "dime"
    coinTypePlural[i] = "Dimes"
    yC[i] = 3
  }
  else if (i < 1696) {
    face[i] = 0.25
    coinType[i] = "quarter"
    coinTypePlural[i] = "Quarters"
    yC[i] = 4
  }
  else if (i < 2048) {
    face[i] = 0.50
    coinType[i] = "half dollar"
    coinTypePlural[i] = "HalfDollars"
    yC[i] = 5
  }
  else {
    face[i] = 1.00
    coinType[i] = "dollar coin"
    coinTypePlural[i] = "Dollars"
    yC[i] = 6
  }

  if (cumulMintage[i]-cumulMintage[i-1] < 100000) {
    rarityWord[i] = "ULTRA RARE"
    rarityWordMod[i] = "ultraRare"
    coloredRarity[i] = "<span style='color:purple'>" + rarityWord[i] + "</span>"
    xC[i] = 4
  }
  else if (cumulMintage[i]-cumulMintage[i-1] < 5000000) {
    rarityWord[i] = "RARE"
    rarityWordMod[i] = "rare"
    coloredRarity[i] = "<span style='color:red'>" + rarityWord[i] + "</span>"
    xC[i] = 3
  }
  else if (cumulMintage[i]-cumulMintage[i-1] < 200000000) {
    rarityWord[i] = "UNCOMMON"
    rarityWordMod[i] = "uncommon"
    coloredRarity[i] = "<span style='color:blue'>" + rarityWord[i] + "</span>"
    xC[i] = 2
  }
  else {
    rarityWord[i] = "COMMON"
    rarityWordMod[i] = "common"
    coloredRarity[i] = "<span style='color:green'>" + rarityWord[i] + "</span>"
    xC[i] = 1
  }
}

const coinWord = ["","Penny","Nickel","Dime","Quarter","Half Dollar","Dollar"]
const coinWordPlural = ["","pennies","nickels","dimes","quarters","half dollars","dollar coins"]
const uncommonColor = "rgb(160, 160, 255)"
const rareColor = "rgb(255, 95, 95)"
const ultraRareColor = "rgb(255, 85, 255)"

var uncommonPlusNumber = 0
var uncommonPlusMintage = Array(2298).fill(0)
var uncommonPlusCumulMintage = Array(2298).fill(0)
var uncommonPlusEnum = Array(2298).fill(0)
var rarePlusNumber = 0
var rarePlusMintage = Array(2298).fill(0)
var rarePlusCumulMintage = Array(2298).fill(0)
var rarePlusEnum = Array(2298).fill(0)
var ultraRareNumber = 0
var ultraRareMintage = Array(2298).fill(0)
var ultraRareCumulMintage = Array(2298).fill(0)
var ultraRareEnum = Array(2298).fill(0)
for (let i = 1; i <= 2297; i++) {
  if (rarityWordMod[i] != "common") {
    uncommonPlusNumber++
    uncommonPlusMintage[uncommonPlusNumber] = cumulMintage[i] - cumulMintage[i-1]
    uncommonPlusCumulMintage[uncommonPlusNumber] = uncommonPlusCumulMintage[uncommonPlusNumber-1] + uncommonPlusMintage[uncommonPlusNumber]
    uncommonPlusEnum[uncommonPlusNumber] = i
  }
  if (rarityWordMod[i] == "rare" || rarityWordMod[i] == "ultraRare") {
    rarePlusNumber++
    rarePlusMintage[rarePlusNumber] = cumulMintage[i] - cumulMintage[i-1]
    rarePlusCumulMintage[rarePlusNumber] = rarePlusCumulMintage[rarePlusNumber-1] + rarePlusMintage[rarePlusNumber]
    rarePlusEnum[rarePlusNumber] = i
  }
  if (rarityWordMod[i] == "ultraRare") {
    ultraRareNumber++
    ultraRareMintage[ultraRareNumber] = cumulMintage[i] - cumulMintage[i-1]
    ultraRareCumulMintage[ultraRareNumber] = ultraRareCumulMintage[ultraRareNumber-1] + ultraRareMintage[ultraRareNumber]
    ultraRareEnum[ultraRareNumber] = i
  }
}

var searchPower = 1
var seekerPower = 0.5
var vendingMachinePower = 250
var fountainPower = 10000 //~360 coins per click, want it to scale up some every level
var chestPower = 10000 //~175 coins per click
var vacuumPower = 8000
const coinCutoffVector = [0,326,625,1048,1695,2047,2297]
var coinCutoff = coinCutoffVector[1]

var uncommonPlusNumberType = [0,0,0,0,0,0,0]
var uncommonPlusMintageType = Array(7).fill(Array(2298).fill(0))
var uncommonPlusCumulMintageType = Array(7).fill(Array(2298).fill(0))
var uncommonPlusEnumType = Array(7).fill(Array(2298).fill(0))
var rarePlusNumberType = [0,0,0,0,0,0,0]
var rarePlusMintageType = Array(7).fill(Array(2298).fill(0))
var rarePlusCumulMintageType = Array(7).fill(Array(2298).fill(0))
var rarePlusEnumType = Array(7).fill(Array(2298).fill(0))
var ultraRareNumberType = [0,0,0,0,0,0,0]
var ultraRareMintageType = Array(7).fill(Array(2298).fill(0))
var ultraRareCumulMintageType = Array(7).fill(Array(2298).fill(0))
var ultraRareEnumType = Array(7).fill(Array(2298).fill(0))
for (let k = 1; k <= 6; k++) { //For each coin denomination...
  for (let i = coinCutoffVector[k-1] + 1; i <= coinCutoffVector[k]; i++) { //And for each coin of that denomination...
    if (rarityWordMod[i] != "common") {
      uncommonPlusNumberType[k]++
      uncommonPlusMintageType[k][uncommonPlusNumberType[k]] = cumulMintage[i] - cumulMintage[i-1]
      uncommonPlusCumulMintageType[k][uncommonPlusNumberType[k]]
        = uncommonPlusCumulMintageType[k][uncommonPlusNumberType[k]-1] + uncommonPlusMintageType[k][uncommonPlusNumberType[k]]
      uncommonPlusEnumType[k][uncommonPlusNumberType[k]] = i
    }
    if (rarityWordMod[i] == "rare" || rarityWordMod[i] == "ultraRare") {
      rarePlusNumberType[k]++
      rarePlusMintageType[k][rarePlusNumberType[k]] = cumulMintage[i] - cumulMintage[i-1]
      rarePlusCumulMintageType[k][rarePlusNumberType[k]]
        = rarePlusCumulMintageType[k][rarePlusNumberType[k]-1] + rarePlusMintageType[k][rarePlusNumberType[k]]
      rarePlusEnumType[k][rarePlusNumberType[k]] = i
    }
    if (rarityWordMod[i] == "ultraRare") {
      ultraRareNumberType[k]++
      ultraRareMintageType[k][ultraRareNumberType[k]] = cumulMintage[i] - cumulMintage[i-1]
      ultraRareCumulMintageType[k][ultraRareNumberType[k]]
        = ultraRareCumulMintageType[k][ultraRareNumberType[k]-1] + ultraRareMintageType[k][ultraRareNumberType[k]]
      ultraRareEnumType[k][ultraRareNumberType[k]] = i
    }
  }
}

var a = Array(2298).fill(0) //Upper bound on uniform distibution U[0,a] for your searches
var b = Array(2298).fill(0) //Upper bound on uniform distibution U[0,b] for seeker searches
var v = Array(2298).fill(0) //Upper bound on uniform distibution U[0,v] for vending machine collection
var f = Array(2298).fill(0) //Upper bound on uniform distibution U[0,f] for fountain collection
var c = Array(2298).fill(0) //Upper bound on uniform distibution U[0,c] for chest opening
var vac = Array(2298).fill(0) //Upper bound on uniform distibution U[0,vac] for coin vacuum collection
var cp = Array(2298).fill(0) //Upper bound on uniform distibution U[0,cp] for coin pusher collection
const probability = Array(2298).fill(0)
var getNoneA = 1
var getNoneB = 1
var getNoneV = 1
var getSomethingA = 1
var getSomethingB = 1
var getSomethingV = 1
const fudgeFactor = 0.01542
const fudgeFactorFixed = 0.06263
for (let i = 1; i < 2298; i++) {
  probability[i] = (cumulMintage[i]-cumulMintage[i-1]) / cumulMintage[2297]
}
for (let i = 1; i <= coinCutoff; i++) {
  a[i] = 1 + searchPower * probability[i] * fudgeFactor
  getNoneA /= a[i]
  getSomethingA = 1 - getNoneA
}
for (let i = 1; i <= coinCutoff; i++) {
  b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed //fixed fudge factor for seekers
  getNoneB /= b[i]
  getSomethingB = 1 - getNoneB
}
var q = Array(2298).fill(0) //Random number taken from uniform distribution U[0,a] and rounded down
var qsum = 0
var qNewSum = 0
var qOldSum = 0

var bankAccountIncrease = 0
var collectionFaceDecrease = 0
var collectionWorthDecrease = 0

//typeCount[rarity][denomination] counts how many unique coins one has of that rarity and denomination
var typeCount = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
                                    //common        uncommon          rare          ultra rare
var sumOverX = [0,0,0,0,0,0,0] //How many unique pennies, nickels, dimes, etc. you have
var sumOverY = [0,0,0,0,0] //How many unique commons, uncommons, rares, ultra rares you have
var grandTotalCount = 0
var grandTotalPct = 0
const sumOverXTotal = [0,326,299,423,647,352,250]
const sumOverYTotal = [0,607,900,671,119]
const typeCountTotal = [[0,0,0,0,0,0,0],[0,169,112,116,199,7,4],[0,140,156,156,208,119,121],[0,16,27,130,194,208,96],[0,1,4,21,46,18,29]]
var typePct = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
var rarityTotal = [0,0,0,0,0]
var denomTotal = [0,0,0,0,0,0,0]
var myLevel = 1 //This will get automatically determined even though it's in the save file
var expRatio = 0
var expPct = 0
var countCurrentLvl = 0

var seekerUnlocked = [0,0,0,0,0,0,0,0,0]
var seekerHired = [0,0,0,0,0,0,0,0,0]

const feedArea = document.getElementById("feedArea")
const feedCount = 100
var toggleDuplicate = 1 //This never changes. Delete occurrences?
var findChance = 1 //Percentage points out of 100
var seekerChance = 1
var typesUnlocked = [0,1,0,0,0,0,0]
var goldenBuffaloCount = 0
var highestSeekerLevel = 1
var buffaloUB = 1
var startTime = [0,0,0,0,0,0,0,0,0,0]
startTime[9] = Date.now()
var elapsedTime = [0,0,0,0,0,0,0,0,0,0]
var remainingTime = [0,0,0,0,0,0,0,0,0,0]
var hh = [0,0,0,0,0,0,0,0,0,0]
var mm = [0,0,0,0,0,0,0,0,0,0]
var ss = [0,0,0,0,0,0,0,0,0,0]
var hhMod = [0,0,0,0,0,0,0,0,0,0]
var mmMod = [0,0,0,0,0,0,0,0,0,0]
var ssMod = [0,0,0,0,0,0,0,0,0,0]
var specialsCooldown = [0,1800,1800,3600,300,0,7200,43200,10800,10]
          //Official = [0,1800,1800,3600,300,0,7200,43200,10800,10]
var pillFactor = 1                                                  //Can remove this one
var seekerPillStartTime = 0
var seekerPillDuration = 30  //Default: 30 seconds
var seekerPillActive = 0
var shovelNumber = 0
var myRef = function(){}
var salesmanPresent = false
//var boughtMetalDetector1 = false //This isn't used. Delete?
var boughtShovel = false
const shovelCost = 2500
var shopIsOpen = false
var specialIsUnlocked = [0,false,false,false,false,false,false,false,false,false,false]
var salesmanLevel = 1
var salesmanCoinCost = [0,0,0,0]
var timeSalesmanPresent = 600 //600 for 10 min
var timeSalesmanGone = 3000 //3000 for 50 min
const transactionComment = ["","This is a good coin.","Good choice.","This coin is very special.","I have fond memories of this one.",
  "I almost didn't want to sell this one.","Good riddance.","This one's your problem now.","Remember, no refunds.",
  "This one is worth more than you think.","Hmm, what am I going to eat tonight? Oh, thanks for trading.","Enjoy, my friend.",
  "Don't resell this one.","Don't put this one in that vending machine of yours.","This one has quite a story.",
  "This coin has been through a lot.","Be gentle with it.","Professional cleaning only or you'll destroy the value.",
  "I found this one on the side of the road.","This one is in pretty good condition.","Hope it suits you well."]
var inventoryIndex = [1,1,1,1]
var bankIsOpen = false
var coinRollPrepTime = [0,1800,2400,2100,1800,7200,9000]
                     //[0,1800,2400,2100,1800,7200,9000] for Bank Exchange I
var coinRollLimit = [0,3,3,3,3,1,1]
var coinRollAvail = [0,0,0,0,0,0,0]
const coinRollCost = [0,0.5,2,5,10,10,25]
const coinsPerRoll = [0,50,40,50,40,20,25]
var elapsedTimeRoll = [0,0,0,0,0,0,0]
var remainingTimeRoll = [0,0,0,0,0,0,0]
var startTimeRoll = [0,0,0,0,0,0,0]
var hhRoll = [0,0,0,0,0,0,0]
var mmRoll = [0,0,0,0,0,0,0]
var ssRoll = [0,0,0,0,0,0,0]
var hhModRoll = [0,0,0,0,0,0,0]
var mmModRoll = [0,0,0,0,0,0,0]
var ssModRoll = [0,0,0,0,0,0,0]
var L = -15
var T = 20
const vacDiv = document.getElementById("vacuumDiv")
var vacuumSearching = false
var vacuumReady = false
var vacuumCollected = false
var vacuumSpeed = 5 //Default: 5
var vacuumRotateSpeed = 50 //Default: 50
var degree = 0
var totalVacuumTime = 0
var totalVacuumRetreatTime = 0
var time1 = 105 / vacuumSpeed //going right
var time2 = time1 + 90 / vacuumRotateSpeed //rotating down
var time3 = time2 + 10 / vacuumSpeed //going down
var time4 = time3 + 90 / vacuumRotateSpeed //rotating left
var time5 = time4 + 90 / vacuumSpeed //going left
var time6 = time5 + 90 / vacuumRotateSpeed //rotating down
var time7 = time6 + 10 / vacuumSpeed //going down
var time8 = time7 + 90 / vacuumRotateSpeed //rotating right
var time9 = time8 + 90 / vacuumSpeed //going right
var time10 = time9 + 90 / vacuumRotateSpeed //rotating down
var time11 = time10 + 10 / vacuumSpeed //going down
var time12 = time11 + 90 / vacuumRotateSpeed //rotating left
var time13 = time12 + 90 / vacuumSpeed //going left
var time14 = time13 + 90 / vacuumRotateSpeed //rotating down
var time15 = time14 + 10 / vacuumSpeed //going down
var time16 = time15 + 90 / vacuumRotateSpeed //rotating right
var time17 = time16 + 90 / vacuumSpeed //going right
var time18 = time17 + 90 / vacuumRotateSpeed //rotating down
var time19 = time18 + 10 / vacuumSpeed //going down
var time20 = time19 + 90 / vacuumRotateSpeed //rotating left
var time21 = time20 + 90 / vacuumSpeed //going left
var time22 = time21 + 90 / vacuumRotateSpeed //rotating up
var time23 = time22 + 25 / vacuumSpeed //going up halfway
var time24 = time23 + 90 / vacuumRotateSpeed //rotating right
var time25 = time24 + 47 / vacuumSpeed //going right halfway
var retreatTime1 = 180 / (2 * vacuumRotateSpeed) //rotating 180 to the left at twice the rotation speed
var retreatTime2 = retreatTime1 + 62 / vacuumSpeed //going left and disappearing
var coinPusherIsOn = true //no longer need this one
var coinPusherOffTime = 10 //no longer need this one

//Feed
for (let i = 1; i <= feedCount; i++) {
  var newDiv = document.createElement("div")
  newDiv.setAttribute('id','feedDiv'+i)
  newDiv.innerHTML = ""
  feedArea.appendChild(newDiv)
}

const lvlUpgradeCost = [0,0,0.10,0.15,0.20,0.25,0.30,0.40,0.50,0.60,0.70,
                          0.80,0.90,1.00,1.50,2.00,2.50,3.00,3.50,4.00,5.00,
                          6,7,8,9,10,11,12,13,14,15,
                          16,18,20,22,24,26,28,30,33,36,
                          40,45,50,55,60,65,70,75,85,100,
                          120,140,160,180,200,220,240,260,280,300,
                          320,340,360,380,400,420,440,460,480,500,
                          550,600,650,700,750,800,850,900,950,1000,
                          1500,2000,3000,4000,5000,6000,7000,8000,9000,10000,
                          20000,40000,60000,80000,100000,200000,500000,2000000,10000000,50000000]

const coinsNeeded = [0,5,8,12,14,16,18,20,21,22,22,
                       22,22,22,22,22,22,22,22,22,22,
                       22,22,22,22,22,23,23,23,23,23,
                       23,23,23,23,23,23,23,23,23,23,
                       23,24,24,24,24,24,24,24,24,24,
                       25,25,25,25,25,25,25,25,25,25,
                       25,25,25,25,25,25,25,25,25,25,
                       25,25,25,25,25,25,25,25,25,25,
                       25,25,25,25,25,25,25,25,25,25,
                       25,25,25,25,25,25,25,25,25,0]

var coinsNeededCumul = [0,0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0,
                          0,0,0,0,0,0,0,0,0,0]
//
for (let i = 1; i <= 99; i++) {
  for (let j = 1; j <= i; j++) {
    coinsNeededCumul[i] += coinsNeeded[j]
  }
}
//coinsNeeded and coinsNeededCumul are how many you need to complete level i.

const myTitle = ["","Beginner","Initiate","Apprentice","Journeyman","Enthusiast","Professional","Expert","Elite","Master","Coinmaster"]
const seekerNames = ["","John","Tess","Michael","Debbie","Cameron","Traci","Peter","Linda","Terrence","Faith",
  "Mark","Julie","Garrett","Mary","Spencer","Bonnie","Mike","Wanda","Waldo","Vicki",
  "Ben","Minnie","Timothy","Yvonne","Josh","Karli","Jakus","Tammy","Klump","Chick",
  "Jebeker","Gibekn","Flick","Flora","Umar","Murka","Bokor","Trista","Brent","Marnie",
  "David","Ronda","Bilbo","Hrumph","Tasty","Cindi","Jorp","Barbara","Mitch","Pandra",
  "Mario","Peach","Luigi","Toad","Eric","Ariel","Charles","Aurora","Trent","Charis",
  "Rick","Lori","Carl","Negan","Pat","Megan","James","Shirley","Hank","Marie",
  "Walter","Skyler","Junior","Fran","Frank","Baby","Scott","Sherbet","Tate","Marb",
  "Gus","Gertis","Bortis","Charlie","Willie","Millie","Thud","Todd","Atta","Dorothy",
  "Anne","Sam","Don","Robert","Chelsea","Sarah","Samson","Rachel","Truett","Cathy"]
var seekerName = ["You","","","","","","","",""]

//Could add logic to insert commas into large numbers here.
for (let i = 2; i < 101; i++) {
  document.getElementById("lvl"+i+"Upgrade").querySelector("#lvl"+i+"Upgrade :nth-child(3)").innerHTML = "$" + numberWithCommas(lvlUpgradeCost[i].toFixed(2))
}

var seekerLevel = [0,1,1,1,1,1,1,1,1]
var seekerFuelTimeUpgrade = 1
var seekerCooldownUpgrade = 1
const seekerCooldown = [0,5,4.5,4,3.5,3,2.5,2,1.5,1]
const seekerCooldownUnits = ["","5 s","4.5 s","4 s","3.5 s","3 s","2.5 s","2 s","1.5 s","1 s"]
var seekerFuelLeft = [0,0,0,0,0,0,0,0,0]
const seekerFuelTime = [0,120,300,600,900,1200,1500,1800,2700,3600,5400,7200,10800]
const seekerFuelTimeUnits = ["","2 min","5 min","10 min","15 min","20 min","25 min","30 min","45 min","1 hr","1.5 hr","2 hr","3 hr"]
var seekerProgress = [0,0,0,0,0,0,0,0,0]
const seekerSearchesToLevelVector = [0,40,80,160,320,640,1280,2560,5120,10240,20480] //this is not cumulative: amt to next level doubles
var seekerSearchesToLevel = [0,40,40,40,40,40,40,40,40]
var seekerSearches = [0,0,0,0,0,0,0,0,0]
var seekerReadyToLevel = [0,0,0,0,0,0,0,0,0]
var boughtUpgrade = Array(101).fill(0)

var wTotal = [0,0,0,0,0,0,0,0,0]
var fTotal = [0,0,0,0,0,0,0,0,0]

var metalDetectorStarted = 0 //Might not need
var metalDetectorXFound = 0 //Might not need
var metalDetectorChestFound = 0 //Might not need
var coinRollProgress = [0,0,0,0,0,0,0]
var vacuumCost = 25
var coinPusherCost = 10
var goldenBuffaloSpawnTime = 360000 //in milliseconds

var toggleGarbage = false
var specialReady = [0,0,0,0,0,0,0,0,0,0]
var numberSpecialsReady = 0
var numberPills = 10
var pillCost = 100
var extraSeekerFactor = 1
var itemBought = [0,0,0,0]
var toggleCommon = false
var saveTime = 0
var loadTime = 0
var pusherReady = 1
var pusherCollected = Date.now()
var pusherMaxTime = 3600
var toggleUncommon = false
var toggleRare = false
var toggleUltraRare = false

var vendingGetNone = 1
var vendingGetSomething = 1
var vendingChance = 1
var fountainGetNone = 1
var fountainGetSomething = 1
var fountainChance = 1
var chestGetNone = 1
var chestGetSomething = 1
var chestChance = 1
var vacuumGetNone = 1
var vacuumGetSomething = 1
var vacuumChance = 1
var coinPusherGetNone = 1
var coinPusherGetSomething = 1
var coinPusherChance = 1
var searchProbNoNew = 1
var seekerProbNoNew = 1
var vendingProbNoNew = 1
var fountainProbNoNew = 1
var chestProbNoNew = 1
var vacuumProbNoNew = 1
var coinPusherProbNoNew = 1
var searchProbNew = 1
var seekerProbNew = 1
var vendingProbNew = 1
var fountainProbNew = 1
var chestProbNew = 1
var vacuumProbNew = 1
var coinPusherProbNew = 1
var searchExpectedForNew = 1
var seekerExpectedForNew = 1
var vendingExpectedForNew = 1
var fountainExpectedForNew = 1
var chestExpectedForNew = 1
var vacuumExpectedForNew = 1
var coinPusherExpectedForNew = 1
var searchExpectedCoins = 0
var seekerExpectedCoins = 0
var vendingExpectedCoins = 0
var fountainExpectedCoins = 0
var chestExpectedCoins = 0
var vacuumExpectedCoins = 0
var coinPusherExpectedCoins = 0
var searchNumSearches = 0
var seekerNumSearches = 0
var vending1NumSearches = 0
var vending2NumSearches = 0
var fountainNumSearches = 0
var chestNumSearches = 0
var vacuumNumSearches = 0
var coinPusherNumSearches = 0
var searchNumCoins = 0
var seekerNumCoins = 0
var vending1NumCoins = 0
var vending2NumCoins = 0
var fountainNumCoins = 0
var chestNumCoins = 0
var vacuumNumCoins = 0
var coinPusherNumCoins = 0
var searchNumNew = 0
var seekerNumNew = 0
var vending1NumNew = 0
var vending2NumNew = 0
var fountainNumNew = 0
var chestNumNew = 0
var vacuumNumNew = 0
var coinPusherNumNew = 0
var searchNumSearchesThis = 0
var seekerNumSearchesThis = 0
var vending1NumSearchesThis = 0
var vending2NumSearchesThis = 0
var fountainNumSearchesThis = 0
var chestNumSearchesThis = 0
var vacuumNumSearchesThis = 0
var coinPusherNumSearchesThis = 0
var searchNumCoinsThis = 0
var seekerNumCoinsThis = 0
var vending1NumCoinsThis = 0
var vending2NumCoinsThis = 0
var fountainNumCoinsThis = 0
var chestNumCoinsThis = 0
var vacuumNumCoinsThis = 0
var coinPusherNumCoinsThis = 0
var searchNumNewThis = 0
var seekerNumNewThis = 0
var vending1NumNewThis = 0
var vending2NumNewThis = 0
var fountainNumNewThis = 0
var chestNumNewThis = 0
var vacuumNumNewThis = 0
var coinPusherNumNewThis = 0

const garbageWord = ["","nothing","nothing","nothing","nothing","nothing","nothing","nothing","nothing","nothing","nothing",
                    "a gum wrapper","a straw paper","a used tissue","a piece of popcorn","a scrap of paper",
                    "a piece of lint","a piece of fuzz","a potato chip","a dust bunny","a paper clip"]
const seekerClueColor = ["","rgb(255,50,50)","rgb(255,255,0)","rgb(0,255,255)","rgb(255,0,255)","rgb(0,255,0)","rgb(100,100,255)","rgb(255,154,0)"]
const seekerClue = ["","With the Mighty Seven actively hunting","In Psychedelic bliss,","Going Home, heed this:",
                    "Turn seventy-seven Face down,","On your screen count Drops three,","When one Roll each comes 'round,",
                    "Tap the bubble of Certainty."]
var dropCount = 0
var numberCoinsFlipped = 0
var seekerPrizeClaimed = 0
var prestigeIsOpen = false
var toggleReady = ["",true,true,true,true,true,true,true,true,true]
var numberMessagesUnlocked = 1
var messageNumber = 1
var numberOfMessages = 22
const messageLevel = ["","Lvl 2","Lvl 7","Lvl 19","Lvl 25","Lvl 40","Lvl 45","Lvl 50","Lvl 55","Lvl 60","Lvl 65","Lvl 68","Lvl 70",
                      "Lvl 75","Lvl 80","Lvl 95","Lvl 100","Asc 1","Asc 2","Asc 10","Asc 50","Asc 92","Asc 100"]
var goldenBuffalosFound = 0
var duplicatesWorth = 0
const roman = ["","I","II","III","IV","V","VI","VII","VIII","IX","X",
                  "XI","XII","XIII","XIV","XV","XVI","XVII","XVIII","XIX","XX",
                  "XXI","XXII","XXIII","XXIV","XXV","XXVI","XXVII","XXVIII","XXIX","XXX",
                  "XXXI","XXXII","XXXIII","XXXIV","XXXV","XXXVI","XXXVII","XXXVIII","XXXIX","XL",
                  "XLI","XLII","XLIII","XLIV","XLV","XLVI","XLVII","XLVIII","XLIX","L",
                  "LI","LII","LIII","LIV","LV","LVI","LVII","LVIII","LIX","LX",
                  "LXI","LXII","LXIII","LXIV","LXV","LXVI","LXVII","LXVIII","LXIX","LXX",
                  "LXXI","LXXII","LXXIII","LXXIV","LXXV","LXXVI","LXXVII","LXXVIII","LXXIX","LXXX",
                  "LXXXI","LXXXII","LXXXIII","LXXXIV","LXXXV","LXXXVI","LXXXVII","LXXXVIII","LXXXIX","XC",
                  "XCI","XCII","XCIII","XCIV","XCV","XCVI","XCVII","XCVIII","XCIX","C"]

var prestigeComplete = false
var ascensionLevel = 0
var typeUnlocked = [0,0,0,0,0,0,0,0,0,0]
var currentDescensionType = 0
var numberDescensionsComplete = [0,-1,-1,-1,-1,-1,-1,-1,-1,-1]
var whichEnabled = [0,1,1,1,1,1,1,1,1,1]
const specName = ["","Vending","Pill","Wishing","Metal Detector","Banking","Coin Vacuum","Coin Pusher","Seeker","Clicking"]
const fourthRule = [["","","","","","","","","","",""],
  ["","Both vending machines are disabled.","Salesman is disabled, and choose 8 extra abilities.",
    "Salesman is disabled, and choose 7 extra abilities.","Salesman is disabled, and choose 6 extra abilities.",
    "Salesman is disabled, and choose 5 extra abilities.","Salesman is disabled, and choose 4 extra abilities.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.",
    "Salesman is disabled, and choose 1 extra ability. This extra ability will be disabled until Lvl 50."],
  ["","Salesman is disabled, and 6-pill limit.","Salesman is disabled, and 3-pill limit.",
    "Salesman and pills are disabled.","Only pills, seekers, and 3 extra abilities are allowed.",
    "Only pills, seekers, and 2 extra abilities are allowed.","Only pills, seekers, and 1 extra ability are allowed.",
    "Only pills and seekers are allowed.","Only pills and 5 seekers are allowed.",
    "Only pills and 3 seekers are allowed.","Only pills and 1 seeker are allowed."],
  ["","Wishing Fountain is disabled.","Salesman is disabled, and choose 8 extra abilities.",
    "Salesman is disabled, and choose 7 extra abilities.","Salesman is disabled, and choose 6 extra abilities.",
    "Salesman is disabled, and choose 5 extra abilities.","Salesman is disabled, and choose 4 extra abilities.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.","Wishing Fountain only."],
  ["","Metal Detector is disabled.","Salesman is disabled, and choose 8 extra abilities.",
    "Salesman is disabled, and choose 7 extra abilities.","Salesman is disabled, and choose 6 extra abilities.",
    "Salesman is disabled, and choose 5 extra abilities.","Salesman is disabled, and choose 4 extra abilities.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.","Metal Detector only."],
  ["","Bank does not sell penny rolls.","Bank does not sell penny or nickel rolls.",
    "Bank does not sell penny, nickel, or dime rolls.","Bank sells only half dollar and dollar rolls.",
    "Bank sells only dollar rolls.","Bank is disabled.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.",
    "Salesman is disabled, and choose 1 extra ability. This extra ability will get temporarily disabled at Lvls 35, 45, 55, and 65."],
  ["","Coin Vacuum is disabled.","Salesman is disabled, and choose 8 extra abilities.",
    "Salesman is disabled, and choose 7 extra abilities.","Salesman is disabled, and choose 6 extra abilities.",
    "Salesman is disabled, and choose 5 extra abilities.","Salesman is disabled, and choose 4 extra abilities.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.","Coin Vacuum only."],
  ["","Coin Pusher is disabled.","Salesman is disabled, and choose 8 extra abilities.",
    "Salesman is disabled, and choose 7 extra abilities.","Salesman is disabled, and choose 6 extra abilities.",
    "Salesman is disabled, and choose 5 extra abilities.","Salesman is disabled, and choose 4 extra abilities.",
    "Salesman is disabled, and choose 3 extra abilities.","Salesman is disabled, and choose 2 extra abilities.",
    "Salesman is disabled, and choose 1 extra ability.","Coin Pusher only."],
  ["","Seekers are disabled.","Salesman is disabled, and choose 5 extra abilities.",
    "Salesman is disabled, and choose 4 extra abilities.","Salesman is disabled, and choose 3 extra abilities.",
    "Salesman is disabled, and choose 2 extra abilities.","Salesman is disabled, and choose 1 extra ability.",
    "Seekers only.","5 Seekers only.","3 Seekers only.","1 Seeker only."],
  ["","Clicking is disabled.","Level upgrades locked until Lvl 20.","Level upgrades locked until Lvl 30.",
    "Level upgrades locked until Lvl 40.","Level upgrades locked until Lvl 50.","Level upgrades locked until Lvl 60.",
    "Level upgrades locked until Lvl 70.","Level upgrades locked until Lvl 80.","Level upgrades locked until Lvl 90.",
    "Level Upgrades 51+ unavailable for purchase until Lvl 100."]]
const secondReward = [["","","","","","","","","","",""],
  ["","Vending Machine cooldowns reduced by 25%","Vending Machine cooldowns reduced by 25%",
    "Vending Machine cooldowns reduced by 25%","Vending Machine cooldowns reduced by 25%",
    "Vending Machine cooldowns reduced by 25%","Vending Machine cooldowns reduced by 25%",
    "Vending Machine cooldowns reduced by 25%","Vending Machine cooldowns reduced by 25%",
    "Vending Machine cooldowns reduced by 25%","Search Vending Machines automatically every 90 seconds while in game."],
  ["","Seeker pills now only cost $20.","Seeker pills last 1 min.",
    "Start each ascension with 15 pills.","Seeker pills last 2 min.",
    "Start each ascension with 20 pills.","Seeker pills last 5 min.","Seeker pills last 10 min.",
    "Seeker pills last 15 min.","Seeker pills last 30 min.","Seeker pill effect is permanent and need not be initiated."],
  ["","Wishing Fountain cooldown reduced to 10 hrs.","Wishing Fountain cooldown reduced to 8 hrs.",
    "Wishing Fountain cooldown reduced to 6 hrs.","Wishing Fountain cooldown reduced to 4 hrs.",
    "Wishing Fountain cooldown reduced to 3 hrs.","Wishing Fountain cooldown reduced to 2 hrs.",
    "Wishing Fountain cooldown reduced to 1 hr.","Wishing Fountain cooldown reduced to 30 min.",
    "Wishing Fountain cooldown reduced to 15 min.","Search Wishing Fountain automatically every 10 minutes while in the game."],
  ["","Metal Detector cooldown reduced to 2 hrs.","Metal Detector cooldown reduced to 1 hr.",
    "Metal Detector cooldown reduced to 45 min.","Metal Detector detection radius is doubled.",
    "Metal Detector cooldown reduced to 30 min.","Dig up chest with one click.",
    "Metal Detector cooldown reduced to 15 min.","Metal Detector detection radius is doubled again.",
    "No detection necessary. Chest spawns every 10 minutes while in game.",
    "Chest automatically collected every 10 minutes while in game."],
  ["","Start with $1,000 and 10 Golden Buffalos.","Start with $5,000 and 20 Golden Buffalos.",
    "Start with $10,000 and 30 Golden Buffalos.",
    "Rolls will have a 10% chance to have no common coins.",
    "Rolls will have an additional 1% chance to have only rare or ultra rare coins.",
    "Rolls will have an additional 0.1% chance to have only ultra rare coins.",
    "Bank now unlocks at Lvl 55, bank upgrades shift sooner accordingly, and a new Bank Exchange V will be purchasable at Lvl 90, which reduces all roll cooldowns by 25%.",
    "Bank now unlocks at Lvl 45, bank upgrades shift sooner accordingly, and a new Bank Exchange VI will be purchasable at Lvl 90, which reduces all roll cooldowns by another 25%.",
    "Bank now unlocks at Lvl 35, bank upgrades shift sooner accordingly, and a new Bank Exchange VII will be purchasable at Lvl 90, which reduces all roll cooldowns by a further 25%.",
    "Unlock the Executive who buys the bank and will autobuy all coin rolls for you as they come in."],
  ["","Coin Vacuum cooldown reduced to 2 hrs.","Coin Vacuum movement speed is doubled.",
    "Coin Vacuum cooldown reduced to 1 hr.","Coin Vacuum movement speed is doubled again.",
    "Coin Vacuum cooldown reduced to 45 min.","Coin Vacuum movement speed is doubled yet again.",
    "Coin Vacuum cooldown reduced to 30 min.","Coin Vacuum movement speed is doubled one last time.",
    "Coin Vacuum cooldown reduced to 15 min.","Coin Vacuum automatically starts and collects when finished if in game."],
  ["","Coin Pusher max time increased to 2 hrs, and each click adds 24 sec.",
    "Coin Pusher max time increased to 3 hrs, and each click adds 40 sec.",
    "Coin Pusher max time increased to 4 hrs, and each click adds 60 sec.",
    "Coin Pusher max time increased to 5 hrs, and each click adds 1 min, 30 sec.",
    "Coin Pusher max time increased to 6 hrs, and each click adds 2 min, 30 sec.",
    "Coin Pusher max time increased to 7 hrs, and each click adds 4 min.",
    "Coin Pusher max time increased to 8 hrs, and each click adds 6 min.",
    "Coin Pusher max time increased to 10 hrs, and each click adds 12 min.",
    "Coin Pusher max time increased to 12 hrs, and each click adds 36 min.",
    "Coin Pusher works permanently without needing to load it."],
  ["","Seekers recognize your leadership. They will no longer quit.","Seeker 1 will start at Lvl 10.",
    "Seeker 2 will start at Lvl 10.","Seeker 3 will start at Lvl 10.","Seeker 4 will start at Lvl 10.",
    "Seeker 5 will start at Lvl 10.","Seeker 6 will start at Lvl 10.","Seeker 7 will start at Lvl 10.",
    "Seeker prize will already be claimed at the start of an ascension.","Seekers will no longer need refueling."],
  ["","Duplicates are auto-sold every 5 seconds.",
    "Level upgrades thru Lvl 20 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 30 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 40 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 50 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 60 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 70 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 80 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 90 are auto-purchased if you can afford them.",
    "Level upgrades thru Lvl 100 are auto-purchased if you can afford them."]]
const chooseSpecialsHeading = [["","","","","","","","","","",""],
  ["","","Choose 8 Extra Abilities:",
    "Choose 7 Extra Abilities:","Choose 6 Extra Abilities:",
    "Choose 5 Extra Abilities:","Choose 4 Extra Abilities:",
    "Choose 3 Extra Abilities:","Choose 2 Extra Abilities:",
    "Choose 1 Extra Ability:","Choose 1 Extra Ability:"],
  ["","","","","Choose 3 Extra Abilities:","Choose 2 Extra Abilities:","Choose 1 Extra Ability:","This is all you get:","","",""],
  ["","","Choose 8 Extra Abilities:",
    "Choose 7 Extra Abilities:","Choose 6 Extra Abilities:",
    "Choose 5 Extra Abilities:","Choose 4 Extra Abilities:",
    "Choose 3 Extra Abilities:","Choose 2 Extra Abilities:",
    "Choose 1 Extra Ability:","This is all you get:"],
  ["","","Choose 8 Extra Abilities:",
    "Choose 7 Extra Abilities:","Choose 6 Extra Abilities:",
    "Choose 5 Extra Abilities:","Choose 4 Extra Abilities:",
    "Choose 3 Extra Abilities:","Choose 2 Extra Abilities:",
    "Choose 1 Extra Ability:","This is all you get:"],
  ["","","","","","","","Choose 3 Extra Abilities:","Choose 2 Extra Abilities:","Choose 1 Extra Ability:","Choose 1 Extra Ability:"],
  ["","","Choose 8 Extra Abilities:",
    "Choose 7 Extra Abilities:","Choose 6 Extra Abilities:",
    "Choose 5 Extra Abilities:","Choose 4 Extra Abilities:",
    "Choose 3 Extra Abilities:","Choose 2 Extra Abilities:",
    "Choose 1 Extra Ability:","This is all you get:"],
  ["","","Choose 8 Extra Abilities:",
    "Choose 7 Extra Abilities:","Choose 6 Extra Abilities:",
    "Choose 5 Extra Abilities:","Choose 4 Extra Abilities:",
    "Choose 3 Extra Abilities:","Choose 2 Extra Abilities:",
    "Choose 1 Extra Ability:","This is all you get:"],
  ["","","Choose 5 Extra Abilities:",
    "Choose 4 Extra Abilities:","Choose 3 Extra Abilities:",
    "Choose 2 Extra Abilities:","Choose 1 Extra Abilities:","","","",""],
  []]

var pennyRollsOpened1 = 0
var nickelRollsOpened1 = 0
var dimeRollsOpened1 = 0
var quarterRollsOpened1 = 0
var halfDollarRollsOpened1 = 0
var dollarRollsOpened1 = 0
var pennyRollsOpened2 = 0
var nickelRollsOpened2 = 0
var dimeRollsOpened2 = 0
var quarterRollsOpened2 = 0
var halfDollarRollsOpened2 = 0
var dollarRollsOpened2 = 0
var pennyRollsOpened3 = 0
var nickelRollsOpened3 = 0
var dimeRollsOpened3 = 0
var quarterRollsOpened3 = 0
var halfDollarRollsOpened3 = 0
var dollarRollsOpened3 = 0
var pennyRollsOpened4 = 0
var nickelRollsOpened4 = 0
var dimeRollsOpened4 = 0
var quarterRollsOpened4 = 0
var halfDollarRollsOpened4 = 0
var dollarRollsOpened4 = 0
var pennyRollsOpened = 0
var nickelRollsOpened = 0
var dimeRollsOpened = 0
var quarterRollsOpened = 0
var halfDollarRollsOpened = 0
var dollarRollsOpened = 0
var comRollsOpened = 0
var uncRollsOpened = 0
var rarRollsOpened = 0
var ultRollsOpened = 0
var rollsOpened = 0

var whichSpecial = 0
var coinLoadSec = 10
var openingDone = false

const numAch = 232
var achHave = Array(numAch+1).fill(0)
const achName = ["","Baby's First Coin","Hey, This Is Fun","Let's Go!","Centennial","Quarter K",
  "D","Tree Quarter K","The Big Thou","Over the Hump","How Many More?",
  "Roman Doctor","Gettin' There","M&M","That's a Wrap","The Training Begins",
  "Getting Stronger","The Age of Vending","The Age of Wishing","Things Are Getting Wild","You've Done It!",
  "Common Cents","100 Commons","250 Commons","500 Commons","All Commons",
  "Uncommon Cents","100 Uncommons","250 Uncommons","500 Uncommons","750 Uncommons",
  "All Uncommons","Medium Rare","100 Rares","250 Rares","500 Rares",
  "All Rares","Holy Crap","10 Ultra Rares","50 Ultra Rares","All Ultra Rares",
  "Honest Abe","50 Pennies","100 Pennies","250 Pennies","All Pennies",
  "Jeffersonickel","50 Nickels","100 Nickels","250 Nickels","All Nickels",
  "Roosedime","50 Dimes","100 Dimes","250 Dimes","All Dimes",
  "Ton Of Washing","50 Quarters","100 Quarters","250 Quarters","500 Quarters",
  "All Quarters","Half Measure","50 Half Dollars","100 Half Dollars","250 Half Dollars",
  "All Half Dollars","Full Measure","50 Dollar Coins","100 Dollar Coins","All Dollar Coins",
  "Decaclick","Hectoclick","Kiloclick","10 Kiloclicks","100 Kiloclicks",
  "Megaclick","Hectocoin","Kilocoin","10 Kilocoins","100 Kilocoins",
  "Megacoin","10 Megacoins","100 Megacoins","Gigacoin","10 Gigacoins",
  "100 Gigacoins","Teracoin","10 Teracoins","Found One!","I Want More",
  "I Need More","Please Send Help","I Can't Stop","I Really Can't Stop","I Actually Can't Stop",
  "I For Real Can't Stop","Hoarder","A Dozen Golden Eggs","A Little Automation","More Automation",
  "Decent Automation","Scary Automation","Drink Up","Was It Something I Said?","Supervisor",
  "Boss","Manager","Executive","Taskmaster","Tyrant",
  "Aww, It's Growing Up","Can These Become Self-Aware?","Keep It on a Short Extension Cord","There's No Stopping Them Now","The Age of Man Is Over",
  "Stop Wasting!","Flip Side","Hot Dang!","That's a Lot of Coins","That's Really a Lot of Coins",
  "Hope They Forgot Their Change","Does Probability Ever Double?","Worth a Shot","One Day I'll Get Lucky","Keep Trying, You Never Know",
  "Okay, Maybe Find a Hobby","Do You Know the Vending Man?","Vendmaster","A Small One Won't Hurt Us","Whoops",
  "Just One More","Restocking","For a Rainy Day","Stockpiling","Preparing for Armageddon",
  "When You Wish Upon a Star","Did Anyone See Me?","How Does This Fill Up So Fast?","Full-Time Job","Diligent Checker",
  "Obsessive Checker","Felix","So Overpriced","So Worth It","Early Bird",
  "Greed Before Need","So Greedy","Let's Head to the Beach","It Costs How Much???","Buried Treasure",
  "What Happened Here?","Seriously, What Happened Here?","Why Was So Much Buried Here?","How Is There Still More?","Take It to the Bank",
  "They Recognize Me","They Trust Me","They Respect Me","They Praise Me","They Fear Me","They Worship Me","Guaranteed Pennies","That's a Thousand Pennies",
  "That's Five Thousand Pennies","That's Twenty-Five Thousand Pennies","Guaranteed Nickels","That's Eight Hundred Nickels","That's Four Thousand Nickels",
  "That's Twenty Thousand Nickels","Guaranteed Dimes","That's a Thousand Dimes","That's Five Thousand Dimes","That's Twenty-Five Thousand Dimes",
  "Guaranteed Quarters","That's Eight Hundred Quarters","That's Four Thousand Quarters","That's Twenty Thousand Quarters","Guaranteed Half Dollars",
  "That's Four Hundred Half Dollars","That's Two Thousand Half Dollars","That's Four Thousand Half Dollars","Guaranteed Dollar Coins","That's Five Hundred Dollar Coins",
  "That's Twenty-Five Hundred Dollar Coins","That's Five Thousand Dollar Coins","Now You Don't See It, Now You Do","One of Each Roll","Descending Rolls",
  "This Is Going to Suck","This Sucks","This Sucked 10 Times","This Sucked 50 Times","This Sucked 100 Times",
  "This Sucked 200 Times","Stalker","Time to Gamble","I Don't Think That's How These Work","They All Came Tumbling Down",
  "Who Supplies The Coins Inside?","Oh, I do","But Why Am I Finding New Coins?","It's a Mystery","Charity",
  "Who Did I Just Sell This To?","How Can You Sell Money?","Coin Collectors Do It All the Time","Banks Do It Too","Ever Asked For Change for a 20?",
  "This Isn't Unheard Of","Quit Fact-Checking Me","I'll Sell You a Dollar Right Here and Now","Buy More of My Money","I'll Make You a Deal on Some Money",
  "I Just Sold a Billi","I Just Sold a Trilli","Fine-Tuned Doubling","Free Handout",
  "That's Not Possible!","So Long","Farewell","Auf Wedersehen","Good Night",
  "Grand Coinmaster","I Can Vend","I Can Blend","I Can Pretend","I Can Extend",
  "I Can Lend","I Can Send","I Can Spend","I Can Tend","I Can Overextend"]
const achTip = ["","Find your first coin.","Find 10 unique coins.","Find 50 unique coins.","Find 100 unique coins.","Find 250 unique coins.",
  "Find 500 unique coins.","Find 750 unique coins.","Find 1000 unique coins.","Find 1149 unique coins.","Find 1250 unique coins.",
  "Find 1500 unique coins.","Find 1750 unique coins.","Find 2000 unique coins.","Find all 2297 unique coins.","Reach Level 2.",
  "Reach Level 10.","Reach Level 25.","Reach Level 50.","Reach Level 75.","Reach Level 100.",
  "Find a common coin.","Find 100 unique common coins.","Find 250 unique common coins.","Find 500 unique common coins.","Find all unique common coins.",
  "Find an uncommon coin.","Find 100 unique uncommon coins.","Find 250 unique uncommon coins.","Find 500 unique uncommon coins.","Find 750 unique uncommon coins.",
  "Find all unique uncommon coins.","Find a rare coin.","Find 100 unique rare coins.","Find 250 unique rare coins.","Find 500 unique rare coins.",
  "Find all unique rare coins.","Find an ultra rare coin.","Find 10 unique ultra rare coins.","Find 50 unique ultra rare coins.","Find all unique ultra rare coins.",
  "Find a penny.","Find 50 unique pennies.","Find 100 unique pennies.","Find 250 unique pennies.","Find all unique pennies.",
  "Find a nickel.","Find 50 unique nickels.","Find 100 unique nickels.","Find 250 unique nickels.","Find all unique nickels.",
  "Find a dime.","Find 50 unique dimes.","Find 100 unique dimes.","Find 250 unique dimes.","Find all unique dimes.",
  "Find a quarter.","Find 50 unique quarters.","Find 100 unique quarters.","Find 250 unique quarters.","Find 500 unique quarters.",
  "Find all unique quarters.","Find a half dollar.","Find 50 unique half dollars.","Find 100 unique half dollars.","Find 250 unique half dollars.",
  "Find all unique half dollars.","Find a dollar coin.","Find 50 unique dollar coins.","Find 100 unique dollar coins.","Find all unique dollar coins.",
  "Perform 10 searches.","Perform 100 searches.","Perform 1,000 searches.","Perform 10,000 searches.","Perform 100,000 searches.",
  "Perform 1,000,000 searches.","Find 100 coins.","Find 1,000 coins.","Find 10,000 coins.","Find 100,000 coins.",
  "Find 1,000,000 coins.","Find 10,000,000 coins.","Find 100,000,000 coins.","Find 1,000,000,000 coins.","Find 10,000,000,000 coins.",
  "Find 100,000,000,000 coins.","Find 1,000,000,000,000 coins.","Find 10,000,000,000,000 coins.","Find a Golden Buffalo.","Find 10 Golden Buffalos.",
  "Find 100 Golden Buffalos.","Find 500 Golden Buffalos.","Find 1,000 Golden Buffalos.","Find 5,000 Golden Buffalos.","Find 10,000 Golden Buffalos.",
  "Find 25,000 Golden Buffalos.","Have 300 Golden Buffalos at one time.","Find 12 Golden Buffalos from one click.","Hire a seeker.","Have three seekers at one time.",
  "Have five seekers at one time.","Have seven seekers at one time.","Refuel a seeker.","Witness a seeker quit.","Perform 100 seeker searches.",
  "Perform 1,000 seeker searches.","Perform 10,000 seeker searches.","Perform 100,000 seeker searches.","Perform 1,000,000 seeker searches.","Perform 10,000,000 seeker searches.",
  "Level up a seeker.","Have a seeker reach Level 5.","Have a seeker reach Level 10.","Have seven Level 10 seekers.","Solve the seeker riddle.",
  "Have ten fuel drops on screen at one time.","Have 100 coins turned to the reverse side at one time.","Find a coin worth at least 10,000 times its face value.","Obtain at least twice as many coins as clicks.","Obtain at least 1000 times as many coins as clicks.",
  "Unlock a Vending Machine.","Unlock both Vending Machines.","Perform a Vending Machine search.","Perform 10 Vending Machine searches.","Perform 50 Vending Machine searches.",
  "Perform 100 Vending Machine searches.","Perform 500 Vending Machine searches.","Perform 1,000 Vending Machine searches.","Use a Super Seeker Pill.","Use 10 Super Seeker Pills.",
  "Buy a Super Seeker Pill.","Buy 10 Super Seeker Pills.","Buy 100 Super Seeker Pills.","Buy 1,000 Super Seeker Pills.","Buy 10,000 Super Seeker Pills.",
  "Unlock the Wishing Fountain.","Perform a Wishing Fountain search.","Perform 10 Wishing Fountain searches.","Perform 50 Wishing Fountain searches.","Perform 100 Wishing Fountain searches.",
  "Perform 200 Wishing Fountain searches.","Unlock the Traveling Salesman.","Buy a coin from the Traveling Salesman.","Buy an ultra rare coin from the Traveling Salesman.","Be waiting in the Traveling Salesman's shop when he arrives.",
  "Buy 10 coins you don't need.","Buy 50 coins you don't need.","Unlock the Metal Detector.","Buy a Shovel.","Dig up a chest.",
  "Dig up 10 chests.","Dig up 50 chests.","Dig up 100 chests.","Dig up 200 chests.","Unlock the Bank Exchange.",
  "Upgrade to Bank Exchange II.","Upgrade to Bank Exchange III.","Upgrade to Bank Exchange IV.","Upgrade to Bank Exchange V.","Upgrade to Bank Exchange VI.","Upgrade to Bank Exchange VII.","Buy a penny roll.","Buy 20 penny rolls.",
  "Buy 100 penny rolls.","Buy 500 penny rolls.","Buy a nickel roll.","Buy 20 nickel rolls.","Buy 100 nickel rolls.",
  "Buy 500 nickel rolls.","Buy a dime roll.","Buy 20 dime rolls.","Buy 100 dime rolls.","Buy 500 dime rolls.",
  "Buy a quarter roll.","Buy 20 quarter rolls.","Buy 100 quarter rolls.","Buy 500 quarter rolls.","Buy a half dollar roll.",
  "Buy 20 half dollar rolls.","Buy 100 half dollar rolls.","Buy 200 half dollar rolls.","Buy a dollar coin roll.","Buy 20 dollar coin rolls.",
  "Buy 100 dollar coin rolls.","Buy 200 dollar coin rolls.","Watch a coin roll appear for purchase.","Have exactly one of each coin roll available for purchase at one time.","Have 6 penny rolls, 5 nickel rolls, 4 dime rolls, etc., available for purchase.",
  "Unlock the Coin Vacuum.","Perform a Coin Vacuum search.","Perform 10 Coin Vacuum searches.","Perform 50 Coin Vacuum searches.","Perform 100 Coin Vacuum searches.",
  "Perform 200 Coin Vacuum searches.","Hover your cursor over the Coin Vacuum for its entire journey home.","Unlock the Coin Pusher.","Fill up Coin Pusher to max time.","Perform a Coin Pusher search.",
  "Perform 100 Coin Pusher searches.","Perform 1,000 Coin Pusher searches.","Perform 10,000 Coin Pusher searches.","Perform 100,000 Coin Pusher searches.","Click this achievement slot.",
  "Sell a duplicate coin.","Sell $1 worth of duplicates.","Sell $10 worth of duplicates.","Sell $100 worth of duplicates.","Sell $1,000 worth of duplicates.",
  "Sell $10,000 worth of duplicates.","Sell $100,000 worth of duplicates.","Sell $1,000,000 worth of duplicates.","Sell $10,000,000 worth of duplicates.","Sell $100,000,000 worth of duplicates.",
  "Sell $1,000,000,000 worth of duplicates.","Sell $1,000,000,000,000 worth of duplicates.","Double your bank account by selling duplicates.","Click the image of the Golden Buffalo 10 times.",
  "Obtain more of a coin than were made.","Ascend one time.","Ascend 10 times.","Ascend 25 times.","Ascend 50 times.",
  "Ascend 100 times.","Complete the Vending Specialization.","Complete the Pill Specialization.","Complete the Wishing Specialization.","Complete the Metal Detector Specialization.",
  "Complete the Banking Specialization.","Complete the Coin Vacuum Specialization.","Complete the Coin Pusher Specialization.","Complete the Seeker Specialization.","Complete the Clicking Specialization."]
const achPic = ["","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","levelUp2.png",
  "levelUp10.png","levelUp25.png","levelUp50.png","levelUp75.png","levelUp100.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png","uniqueCoin.png",
  "296front.jpg","296front.jpg","296front.jpg","296front.jpg","296front.jpg",
  "488front.jpg","488front.jpg","488front.jpg","488front.jpg","488front.jpg",
  "969front.jpg","969front.jpg","969front.jpg","969front.jpg","969front.jpg",
  "1398front.jpg","1398front.jpg","1398front.jpg","1398front.jpg","1398front.jpg",
  "1398front.jpg","2037front.jpg","2037front.jpg","2037front.jpg","2037front.jpg",
  "2037front.jpg","2254front.jpg","2254front.jpg","2254front.jpg","2254front.jpg",
  "magnifyingGlass.jpg","magnifyingGlass.jpg","magnifyingGlass.jpg","magnifyingGlass.jpg","magnifyingGlass.jpg",
  "magnifyingGlass.jpg","1coin.png","2coins.png","3coins.png","4coins.png",
  "5coins.png","6coins.png","7coins.png","8coins.png","9coins.png",
  "10coins.png","11coins.png","12coins.png","golden1.png","golden2.png",
  "golden3.png","golden4.png","golden5.png","golden6.png","golden7.png",
  "golden8.png","golden300.png","golden12.png","seeker1.png","seeker3.png",
  "seeker5.png","seeker7.png","refuel.png","quit.jpg","seeker100.png",
  "seeker1k.png","seeker10k.png","seeker100k.png","seeker1m.png","seeker10m.png",
  "seeker1.png","seeker1.png","seeker1.png","seeker1.png","riddle.png",
  "10drops.png","126back.jpg","1front.jpg","clicks2xCoins.png","clicks1000xCoins.png",
  "vend1.png","vendBoth.png","vendFind1.png","vendFind10.png","vendFind50.png",
  "vendFind100.png","vendFind500.png","vendFind1000.png","used1Pill.png","used10Pills.png",
  "buy1Pill.png","buy10Pills.png","buy100Pills.png","buy1kPills.png","buy10kPills.png",
  "wishUnlock.png","wish1.png","wish10.png","wish50.png","wish100.png",
  "wish200.png","salesmanUnlock.png","salesmanCoin.png","salesmanUR.png","salesmanWait.png",
  "dontNeed10.png","dontNeed50.png","metalUnlock.png","shovel.png","chest1.png",
  "chest10.png","chest50.png","chest100.png","chest200.png","bank1.png",
  "bank2.png","bank3.png","bank4.png","bank5.png","bank6.png",
  "bank7.png","pennyRoll1.png","pennyRoll20.png","pennyRoll100.png","pennyRoll500.png",
  "nickelRoll1.png","nickelRoll20.png","nickelRoll100.png","nickelRoll500.png","dimeRoll1.png",
  "dimeRoll20.png","dimeRoll100.png","dimeRoll500.png","quarterRoll1.png","quarterRoll20.png",
  "quarterRoll100.png","quarterRoll500.png","halfDollarRoll1.png","halfDollarRoll20.png","halfDollarRoll100.png",
  "halfDollarRoll200.png","dollarRoll1.png","dollarRoll20.png","dollarRoll100.png","dollarRoll200.png",
  "coinRollAppear.png","1EachRoll.png","1EachRollAppear.png","vacuumUnlock.png","vacuum1.png",
  "vacuum10.png","vacuum50.png","vacuum100.png","vacuum200.png","stalkingVacuum.png",
  "pusherUnlock.png","fillPusher.png","pusher1.png","pusher100.png","pusher1k.png",
  "pusher10k.png","pusher100k.png","clickPic.png","dupCoin.png","dup1.png",
  "dup10.png","dup100.png","dup1k.png","dup10k.png","dup100k.png",
  "dup1m.png","dup10m.png","dup100m.png","dup1b.png","dup1t.png",
  "dupTimes2.png","clickGolden10.png","notPossible.png","ascend1.png","ascend10.png",
  "ascend25.png","ascend50.png","ascend100.png","vendingSpecCoin.png","pillSpecCoin.png",
  "wishingSpecCoin.png","metalDetectorSpecCoin.png","bankSpecCoin.png","coinVacuumSpecCoin.png","coinPusherSpecCoin.png",
  "seekerSpecCoin.png","clickingSpecCoin.png"]
const achColor = ["","white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "rgb(149, 255, 149)","rgb(149, 255, 149)","rgb(149, 255, 149)","rgb(149, 255, 149)","rgb(149, 255, 149)","rgb(160, 160, 255)","rgb(160, 160, 255)","rgb(160, 160, 255)","rgb(160, 160, 255)","rgb(160, 160, 255)",
  "rgb(160, 160, 255)","rgb(255, 95, 95)","rgb(255, 95, 95)","rgb(255, 95, 95)","rgb(255, 95, 95)","rgb(255, 95, 95)","rgb(255, 85, 255)","rgb(255, 85, 255)","rgb(255, 85, 255)","rgb(255, 85, 255)",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "red","yellow","lightgreen","cyan","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","white","white",
  "white","white","white","white","white","white","white","white","cyan","cyan",
  "cyan","cyan","cyan","white","white","white","white","white","white","white","white","white"]
var numCoinsBought = 0
var numDupCoinsBought = 0
var numberPillsUsed = 0
var numberPillsBought = 0
var goldenClicks = 0
var stalking = false
var achBoxClicked = Array(numAch+1).fill(false)
var feedText = Array(feedCount+1).fill("")
var tempText = Array(9).fill("")
var readyToInc = false
var lastUpdate = Date.now()

let achievementSound = new Audio('achievement.mp3')
let shovelSound = new Audio('shovelSound.mp3')
let levelUpSound = new Audio('levelUp.mp3')

var soundSlider = document.getElementById("soundVolume")
var soundVol = 50
soundSlider.oninput = function() {
  soundVol = this.value
  achievementSound.volume = soundVol / 100
  shovelSound.volume = soundVol / 100
  levelUpSound.volume = soundVol / 100
  if (this.value > 0 && soundIsMuted == true) {
    soundIsMuted = false
    document.getElementById("soundMuteButton").style.background = "url('soundOn.png')"
    document.getElementById("soundMuteButton").style.backgroundColor = "rgb(144, 255, 144)"
    document.getElementById("soundMuteButton").style.backgroundSize = "contain"
    document.getElementById("soundMuteButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("soundMuteButton").style.backgroundPositionX = "center"
    document.getElementById("soundMuteButton").style.backgroundPositionY = "center"
  }
  else if (this.value == 0 && soundIsMuted == false) {
    soundIsMuted = true
    document.getElementById("soundMuteButton").style.background = "url('soundOff.png')"
    document.getElementById("soundMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
    document.getElementById("soundMuteButton").style.backgroundSize = "contain"
    document.getElementById("soundMuteButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("soundMuteButton").style.backgroundPositionX = "center"
    document.getElementById("soundMuteButton").style.backgroundPositionY = "center"
  }
}

var musicSlider = document.getElementById("musicVolume")
var musicVol = 50
musicSlider.oninput = function() {
  musicVol = this.value
  music.volume = musicVol / 100
  if (this.value > 0 && musicIsMuted == true) {
    musicIsMuted = false
    document.getElementById("musicMuteButton").style.background = "url('musicOn.png')"
    document.getElementById("musicMuteButton").style.backgroundColor = "rgb(144, 255, 144)"
    document.getElementById("musicMuteButton").style.backgroundSize = "contain"
    document.getElementById("musicMuteButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("musicMuteButton").style.backgroundPositionX = "center"
    document.getElementById("musicMuteButton").style.backgroundPositionY = "center"
  }
  else if (this.value == 0 && musicIsMuted == false) {
    musicIsMuted = true
    document.getElementById("musicMuteButton").style.background = "url('musicOff.png')"
    document.getElementById("musicMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
    document.getElementById("musicMuteButton").style.backgroundSize = "contain"
    document.getElementById("musicMuteButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("musicMuteButton").style.backgroundPositionX = "center"
    document.getElementById("musicMuteButton").style.backgroundPositionY = "center"
  }
}

var music = document.getElementById("music")
document.getElementById("playerSource").src = ""
music.load()
var duration = 10
var pButton = document.getElementById("pButton")
var playhead = document.getElementById("playhead")
var timeline = document.getElementById("timeline")
var timelineWidth = timeline.offsetWidth - playhead.offsetWidth
music.addEventListener("timeupdate", timeUpdate, false)
document.addEventListener('keypress', function (event) {
  if (event.key === " ") {
    event.preventDefault()
    playUpdate()
  }
})
timeline.addEventListener("mousedown", function(event) {
  mouseDown()
  moveplayhead(event);
  music.currentTime = duration * clickPercent(event);
}, false)
playhead.addEventListener('mousedown', mouseDown, false)
window.addEventListener('mouseup', mouseUp, false)
var onplayhead = false
music.addEventListener("canplaythrough", function () {
	duration = music.duration;
  var curMM = Math.floor(music.currentTime / 60)
    var curSS = Math.floor(music.currentTime % 60)
    if (curSS < 10) {
      curSS = "0" + curSS
    }
    var durMM = Math.floor(duration / 60)
    var durSS = Math.floor(duration % 60)
    if (durSS < 10) {
      durSS = "0" + durSS
    }
    document.getElementById("musicProgress").innerHTML = curMM + ":" + curSS + " / " + durMM + ":" + durSS
}, false)
window.addEventListener("load",function() {
  playhead.style.marginLeft = "-0.5vmax"
})

const song = ["","song1.mp3","song2.mp3","song3.mp3","song4.mp3","song5.mp3",
  "song6.mp3","song7.mp3","song8.mp3","song9.mp3","song10.mp3",
  "song11.mp3","song12.mp3","song13.mp3","song14.mp3","song15.mp3",
  "song16.mp3","song17.mp3","song18.mp3","song19.mp3","song20.mp3",
  "song21.mp3","song22.mp3","song23.mp3","song24.mp3"]
const songName = ["","Chopin - Ballade no. 1 in G minor, Op. 23",
  "Chopin - Piano Concerto no. 1 in E minor, Op. 11 - II. Romance. Larghetto",
  "Berlioz - Symphonie Fantastique Op. 14 - I. Largo",
  "Mozart - String Quartet no. 19 in C major, K. 465 - Dissonant, II. Andante Cantabile",
  "Bach - Concerto in D major - I. Allegro",
  "Mozart - Concerto no. 1 in F major - I. Allegro",
  "Chopin - Nocturne in C minor, Op. 48 no. 1",
  "Mozart - Piano Sonata no. 20 in A minor, D. 959 - IV. Rondo. Allegretto",
  "Mozart - Sonata in A minor, D. 845 - I. Moderato",
  "Mozart - Sonata in C minor, D. 958 - II. Adagio",
  "Chopin - The Rondo a la Mazur in F major, Op. 5",
  "Vivaldi - Violin Concerto in E major, RV 269, 'Spring'",
  "Vivaldi - Violin Concerto in F major, 'Autumn'",
  "Vivaldi - Violin Concerto in G minor, RV 315, 'Summer'",
  "Mozart - Violin Concerto no. 1 in B-Flat major, K. 207 - II. Adagio",
  "Chopin - Cello Sonata in G minor, Op. 65 - III. Largo",
  "Mozart - Piano Sonata no. 11 in A major, K. 331",
  "Chopin - Polonaise in D minor, Op. 71 no. 1",
  "Beethoven - Violin Concerto in D major, Op. 61",
  "Bach - Violin Sonata no. 3 in C major, BWV 1005 - II. Fuga",
  "Chopin - Polonaise in C minor, Op. 40 no. 2",
  "Chopin - Polonaise in B-Flat major, Op. 71 no. 2",
  "Chopin - Sonata no. 3 in B minor, Op. 58 - III. Largo",
  "Bach - Violin Partita no. 2, BWV 1004 - 5. Chaconne"]
const numSongs = songName.length - 1

var soundIsMuted = false
var musicIsMuted = false
var oldSoundLevel = 50
var oldMusicLevel = 50
var toggleAutoSellDups = false
var toggleAutoBuyRolls = false

const ticker = ["","The penny is the longest-circulating U.S. coin, having been in production since 1793.",
  "Coin collecting is also called numismatics, a term derived from the Latin word numisma, meaning &quot;coin.&quot;",
  "Does anyone know who coined the term &quot;numismatics&quot?",
  "A coin's face value does not always reflect its true worth.",
  "Coins have been used for trade since the 7th century BCE.",
  "Silver coins were used in the U.S. until 1964.",
  "Coin collecting was once reserved for the wealthy.",
  "The &quot;E Pluribus Unum&quot; motto on U.S. coins means &quot;Out of many, one.&quot;",
  "The largest coin ever minted is the 1,000,000 yen coin from Japan, which is made of pure gold and weighs 220 lbs.",
  "Coin collectors often refer to their collections as &quot;sets.&quot;",
  "A coin's value depends on its rarity, demand, and condition.",
  "The U.S. produces billions of coins every year.",
  "The world's most expensive coin is the 1794 Flowing Hair Silver Dollar, which was sold at auction for $10 million.",
  "Coin collectors never change; they just accumulate.",
  "A penny saved is a penny in your collection.",
  "I'm not broke; I just have a lot of rare coins.",
  "Coins are proof that history can be pocket-sized.",
  "You can't buy happiness, but you can buy a rare coin.",
  "The value of a coin is more than just metal and mint.",
  "Collecting coins is like collecting time capsules.",
  "Penny for your thoughts; nickel for your collection.",
  "Rare coins don't just add value to your collection; they add meaning.",
  "Coins are where the past meets the present.",
  "If coins could talk, they'd tell the best stories.",
  "Some coins are priceless; others are just overpriced.",
  "I started collecting coins, but I spent too much time on it.",
  "My rarest coin never returns my calls; maybe it's not mint to be.",
  "I dropped a coin into the wishing fountain, and I got change.",
  "Why was the coin so happy? It finally made cents.",
  "Help! I'm coin crazy!",
  "My tactics for finding rare coins are a bit cointroversial.",
  "I'm coinvinced that this game is amazing.",
  "Don't flip out, it's just a coin.",
  "This collection is centsational!",
  "I'm coinfident that you're about to find a rare one!",
  "What do coin collectors call a penny that is so dirty you can't read it? A penny.",
  "Seekers aren't quite human, despite their human names.",
  "Seekers don't quit if they are ready to level up.",
  "Seeker power depends on the highest level seeker you've ever had.",
  "Getting multiple max-level seekers really pays off.",
  "Why do so many people leave their change in vending machines?",
  "My brother and I used to search couches in hotels for loose change.",
  "I used to collect coins as a kid. Now I just try to collect money of any kind.",
  "You are more likely to be crushed by a vending machine than to win the lottery.",
  "The traveling salesman's wares are way too overpriced.",
  "I used to buy coin rolls from the bank and once found a roll of silver half dollars.",
  "I wonder what else the coin vacuum finds in that parking lot.",
  "I used to throw change into fountains as a kid. Now I fish change out of fountains.",
  "I always loved playing coin pushers, but then again it was my dad's money I put into it. Not sure why my dad didn't like them.",
  "Don't forget to take your shovel to the beach.",
  "Are shovels really that expensive?",
  "Did you know clicking a coin will show you the reverse?",
  "The &quot;Face Up&quot; button will return all coins to their obverse side.",
  "The obverse side of a coin is basically the front side. I don't know why they don't just say &quot;front.&quot;",
  "Face value is the value that coin was meant to be worth: a penny always has a face value of $0.01.",
  "When you sell duplicates, you lose their face value but gain their worth.",
  "Does anyone read these?",
  "It's not Co-Incremental; it's Coin-cremental. This ain't no co-op game.",
  "Probabilities given in the Statistics tab are not always exact but should be close. Some approximations were made to reduce lag.",
  "Vending machines can only contain nickels, dimes, and quarters. Have you ever seen anything else come out of one?",
  "The chance of finding each coin in this game is roughly proportional to how many of that coin were made.",
  "It's possible to find more of a coin than were made.",
  "Coins have considerably less bacteria on them than paper money. Still don't put them in your mouth.",
  "Moar coins...",
  "Don't forget to buy a shovel.",
  "Have you solved the seeker riddle yet?",
  "Reaching Level 100 is only the beginning.",
  "Why is there not an 8th seeker? There's room for one. My OCD can't handle it.",
  "If the feed gets a bit spammy, use the duplicate filters.",
  "If you mute the music, you'll see a quarter rest. How appropriate...",
  "You better refresh yourself on Roman numerals while you still can.",
  "The rough edge of a quarter is called a reeded edge.",
  "The four-digit number on a coin is called the &quot;year.&quot;",
  "Mistakes make coins rare. There was a 1979 penny that was meant to be a quarter, but nobody has ever found it.",
  "I used to clean dirty pennies by soaking them in hot sauce&mdash;the hotter, the better.",
  "If you want to clean a coin, first you have to wake up in the morning.",
  "Do NOT jump into a mound of coins hoping you can swim in them. It will hurt.",
  "My grandmother used to say, &quot;Watch your pennies, and your dollars will take care of themselves.&quot;",
  "If you flip a coin, it will show heads or not show heads 100% of the time.",
  "Be right there, honey. I just have to find...one more...rare half dollar...",
  "I paid for my last car in pennies. It was about 5 years ago, and they are still counting them.",
  "The seeker pills are not harmful in any way to the seekers. They are just sugar pills, and seekers LOVE sugar.",
  "Have you found Waldo?",
  "The most tedious part of making this game was cropping 2297 images of coins, both front and back.",
  "Back up your game often. I'm not a professional game developer.",
  "A find chance of 100% does not mean you are certain to find one.",
  "Your coin pusher power is equal to your own search power.",
  "Seekers and the coin pusher are this game's form of automation.",
  "This isn't your typical incremental game.",
  "All coins in this game are virtual and worthless. Want real ones? Get out there and find them!",
  "Find chance is the chance of finding at least one coin, and eventually this will always happen.",
  "Power affects the upper bound on how many coins you can find at once.",
  "It took an embarrassingly long time to get this news ticker to work right.",
  "Avoid talking over coins. Tiny droplets of saliva can leave spots. The coins might also hear you.",
  "Don't be an idiot like me and deposit your rare coins in the bank to try to draw interest. It doesn't work that way.",
  "Seekers and the coin pusher work while offline until they run out of juice.",
  "This news ticker container is full of seeker fuel.",
  "I keep having dreams about the coin that belonged to that old woman. Maybe I should have kept it.",
  "Lucky numbers: 13 23 47 51 104.2234",
  "[Blank news ticker]",
  "The number you are trying to reach has been [COINED]. Please try again later.",
  "This game is boring. When do I get to shoot stuff?",
  "The first animal featured on a coin was an eagle.",
  "The people portrayed on ancient coins all have something in common. They are all dead.",
  "All U.S. coins were originally gold, silver, or copper.",
  "Nickels used to be called half-dimes.",
  "Nickels are only 25% nickel. So a quarter of a nickel is nickel, while a nickel is a fifth of a quarter.",
  "Ridges on coins are to help prevent counterfeiting.",
  "Lincoln was the first U.S. president...to be featured on a coin.",
  "No bitcoins here. But people did used to bite gold coins to see if they were pure gold.",
  "This is not the first game about coin collecting. Super Mario Bros. featured it as well.",
  "Why are all the 1957 coins in this game featured as proof strikes?",
  "The four most famous mints are Philadelphia, Denver, San Francisco, and Pepper.",
  "The quickest way to get to Lvl 100 is to only use [REDACTED] while simultaneously [EXPUNGED].",
  "Cutoffs for coins being common, uncommon, rare, and ultra rare in this game were arbitrary.",
  "Sorry, what am I supposed to write here?",
  "Florida man breaks world record for largest coin collection, claims to have found &quot;lost treasure&quot; in backyard pool.",
  "Man discovers $1 million coin in couch cushions during weekend clean-up.",
  "Rare coin found in ancient Roman temple turns out to be priceless, but still can't buy a latte.",
  "Coin collectors do NOT want you to know these 5 facts about rare coins.",
  "Coin collector refuses to sell gold coin, claims it &quot;speaks&quot; to him in dreams.",
  "Grandma's penny jar worth more than her house, shocks family with secret fortune.",
  "Cryptocurrency coins found in ancient Egyptian tomb, experts baffled.",
  "Mysterious &quot;invisible coin&quot; found, experts argue over whether it exists or not.",
  "Coin collector trades entire collection for one rare coin...that turns out to be fake.",
  "Florida man claims he was trapped in time for 24 hours after touching rare ancient coin.",
  "Mississippi woman trades her entire coin collection for a rare cat that happens to be a lucky charm.",
  "I accidentally spent a $50,000 quarter paying for a milkshake last week. My sweetest mistake."
]

//News Ticker
var newTicker = ["",""]
newTicker[0] = document.getElementById("tickerDiv0")
newTicker[1] = document.getElementById("tickerDiv1")

var u = Math.ceil((ticker.length - 1) * Math.random())
newTicker[0].innerHTML = ticker[u]
var whichTicker = 0
var oldWhichTicker = 0
var firstTickerTime = Date.now()

var toggleHypnotic = true
var catchUp = true //determines whether to let seekers/coin pusher catch up when loading a save
const coinHeight = 1.6 //mm
const heightComp = ["","1","7","31","63","188","625","1063","3125","6250","9375",
  "18750","31250","62500","312500","518750","3437500","5500000","6250000","62500000","250000000",
  "22366250000","240250000000","3125000000000","26250000000000","93750000000000",
  "486250000000000","1875000000000000","3750000000000000","9300000000000000","25000000000000000000"
] //At least this many to get next comparison

//Need to backup

document.addEventListener('contextmenu', event => event.preventDefault());
feedArea.addEventListener('scroll', () => {
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    document.getElementById("feedBottom").style.display = "flex"
  }
  else {
    document.getElementById("feedBottom").style.display = "none"
  }
});

//used to be unload/onunload
addEventListener('beforeunload', (event) => { }); 
onbeforeunload = (event) => {saveGame()}

function oneSearch() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  searchNumSearches++
  document.getElementById("searchNumSearches").innerHTML = numberWithCommas(searchNumSearches)
  var priorNewsFound = searchNumNew
  qsum = 0
  for (let i = 1; i <= coinCutoff; i++) {
    q[i] = Math.floor(Math.random() * a[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        searchNumNew++
        // newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.setAttribute("draggable","false")
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        if (myLevel == 2 && !(prestigeComplete == false && currentDescensionType == 9
            && numberDescensionsComplete[9] >= 1 && numberDescensionsComplete[9] <= 8)) {
          document.getElementById("coinmasterButtonBlank").style.display = "none"
          document.getElementById("coinmasterButton").style.display = ""
        }
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }

        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>new</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"

        //Feed addition
        if (!(toggleCommon == true && rarityWordMod[i] == "common") && !(toggleUncommon == true && rarityWordMod[i] == "uncommon")
          && !(toggleRare == true && rarityWordMod[i] == "rare") && !(toggleUltraRare == true && rarityWordMod[i] == "ultraRare")) {
          shiftFeed()
          document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:gray'> You found a duplicate "
            + rarityWord[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        }
      }
      quantity[i] += q[i]
      //document.getElementById("qty"+i).innerHTML = quantity[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  searchNumCoins += qsum
  countTotalCoins()
  document.getElementById("searchNumCoins").innerHTML = numberWithCommas(searchNumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found " + garbageWord[Math.ceil(20 * Math.random())] + "."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  if (searchNumSearches == 100 && ascensionLevel == 0) {
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML
      = ("> Your grandmother sends you a letter that reads, <span style='color:blue'><i>&#34;Hi honey, I know you've started coin collecting, and I wish I had a coin to give you, but here's a dollar. I hope you can find a good use for it. Love you!&#34;</i></span> Enclosed is a wrinkled dollar bill. (+$1.00)")
    bankAccount += 1
  }
  //Update stats
  if (searchNumNew > priorNewsFound) {
    document.getElementById("searchNumNew").innerHTML = numberWithCommas(searchNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[71] == 0 && searchNumSearches == 10) {
    achAward(71)
  }
  else if (achHave[72] == 0 && searchNumSearches == 100) {
    achAward(72)
  }
  else if (achHave[73] == 0 && searchNumSearches == 1000) {
    achAward(73)
  }
  else if (achHave[74] == 0 && searchNumSearches == 10000) {
    achAward(74)
  }
  else if (achHave[75] == 0 && searchNumSearches == 100000) {
    achAward(75)
  }
  else if (achHave[76] == 0 && searchNumSearches == 1000000) {
    achAward(76)
  }
  updateBankAccount()
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function seekerSearch(m,number) {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  seekerNumSearches += number
  document.getElementById("seekerNumSearches").innerHTML = numberWithCommas(seekerNumSearches)
  var priorNewsFound = seekerNumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  if (number > 1) {
    seekerPower *= number
    getNoneB = 1
    for (let i = 1; i <= coinCutoff; i++) {
      b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed //fixed fudge factor for seekers
      getNoneB /= b[i]
      getSomethingB = 1 - getNoneB
    }
  }
  for (let i = 1; i <= coinCutoff; i++) {
    q[i] = Math.floor(Math.random() * b[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        seekerNumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        if (number == 1) {
          shiftFeed()
          document.getElementById("feedDiv"+feedCount).innerHTML = ("> " + seekerName[m] + " found a <span style='color:orange'><b>" + newTag + "</b></span> "
            + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
            document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        }
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"

        //Feed addition
        if (number == 1 && !(toggleCommon == true && rarityWordMod[i] == "common")
          && !(toggleUncommon == true && rarityWordMod[i] == "uncommon") && !(toggleRare == true && rarityWordMod[i] == "rare")
          && !(toggleUltraRare == true && rarityWordMod[i] == "ultraRare")) {
          shiftFeed()
          document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:gray'> " + seekerName[m] + " found a " + newTag + " "
            + rarityWord[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        }
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  seekerNumCoins += qsum
  countTotalCoins()
  document.getElementById("seekerNumCoins").innerHTML = numberWithCommas(seekerNumCoins)
  if (number == 1 && qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> " + seekerName[m] + " found nothing."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  if (number > 1 && catchUp == true) { //Get it back to normal after catching up
    seekerPower /= number
    getNoneB = 1
    for (let i = 1; i <= coinCutoff; i++) {
      b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed //fixed fudge factor for seekers
      getNoneB /= b[i]
      getSomethingB = 1 - getNoneB
    }
    seekerChance = getSomethingB * 100
    document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"

    if (qsum == 0) {
      tempText[m] = "> While you weren't looking, " + seekerName[m] + " performed "
      + number + " searches and found nothing. You didn't miss much."
    }
    else {
      var pluralLetter1 = "s"
      var pluralLetter2 = "s"
      var pluralLetter3 = "s"
      if (qsum == 1) {pluralLetter1 = ""}
      if (qNewSum == 1) {pluralLetter2 = ""}
      if (qOldSum == 1) {pluralLetter3 = ""}
      tempText[m] = "> While you weren't looking, " + seekerName[m] + " performed "
        + number + " searches and found " + numberWithCommas(qsum)
        + " coin" + pluralLetter1 + ", including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin"
        + pluralLetter2 + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
    }
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = tempText[m]
    //feedArea.scrollTo(0,feedArea.scrollHeight)
  }
  //feedArea.scrollTo(0,feedArea.scrollHeight)
  //Update stats
  if (seekerNumNew > priorNewsFound) {
    document.getElementById("seekerNumNew").innerHTML = numberWithCommas(seekerNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[105] == 0 && seekerNumSearches >= 100) {
    achAward(105)
  }
  else if (achHave[106] == 0 && seekerNumSearches >= 1000) {
    achAward(106)
  }
  else if (achHave[107] == 0 && seekerNumSearches >= 10000) {
    achAward(107)
  }
  else if (achHave[108] == 0 && seekerNumSearches >= 100000) {
    achAward(108)
  }
  else if (achHave[109] == 0 && seekerNumSearches >= 1000000) {
    achAward(109)
  }
  else if (achHave[110] == 0 && seekerNumSearches >= 10000000) {
    achAward(110)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function allowCatchUp() {
  catchUp = true
}

function updateTable(x,y,i) {
  typeCount[x][y] += 1
  document.getElementById(rarityWordMod[i] + coinTypePlural[i] + "Count").innerHTML = typeCount[x][y] + "/" + typeCountTotal[x][y]
  sumOverX[y] = typeCount[1][y] + typeCount[2][y] + typeCount[3][y] + typeCount[4][y]
  sumOverY[x] = typeCount[x][1] + typeCount[x][2] + typeCount[x][3] + typeCount[x][4] + typeCount[x][5] + typeCount[x][6]
  grandTotalCount = sumOverY[1] + sumOverY[2] + sumOverY[3] + sumOverY[4]
  document.getElementById(rarityWordMod[i] + "TotalCount").innerHTML = sumOverY[x] + "/" + sumOverYTotal[x]
  document.getElementById(coinTypePlural[i] + "TotalCount").innerHTML = sumOverX[y] + "/" + sumOverXTotal[y]
  document.getElementById("grandTotalCount").innerHTML = grandTotalCount + "/" + "2297"
  typePct[x][y] = Math.round(typeCount[x][y] / typeCountTotal[x][y] * 1000) / 10
  document.getElementById(rarityWordMod[i] + coinTypePlural[i] + "Pct").innerHTML = typePct[x][y].toFixed(1) + "%"
  document.getElementById(rarityWordMod[i] + coinTypePlural[i] + "Bar").value = typePct[x][y] / 100
  rarityTotal[x] = Math.round(sumOverY[x] / sumOverYTotal[x] * 1000) / 10
  document.getElementById(rarityWordMod[i] + "TotalPct").innerHTML = rarityTotal[x].toFixed(1) + "%"
  document.getElementById(rarityWordMod[i] + "TotalBar").value = rarityTotal[x] / 100
  denomTotal[y] = Math.round(sumOverX[y] / sumOverXTotal[y] * 1000) / 10
  document.getElementById(coinTypePlural[i] + "TotalPct").innerHTML = denomTotal[y].toFixed(1) + "%"
  document.getElementById(coinTypePlural[i] + "TotalBar").value = denomTotal[y] / 100
  grandTotalPct = Math.round(grandTotalCount / 2297 * 1000) / 10
  document.getElementById("grandTotalPct").innerHTML = grandTotalPct.toFixed(1) + "%"
  document.getElementById("grandTotalBar").value = grandTotalPct / 100
  if (achHave[1] == 0 && grandTotalCount == 1) {
    achAward(1)
  }
  else if (achHave[2] == 0 && grandTotalCount == 10) {
    achAward(2)
  }
  else if (achHave[3] == 0 && grandTotalCount == 50) {
    achAward(3)
  }
  else if (achHave[4] == 0 && grandTotalCount == 100) {
    achAward(4)
  }
  else if (achHave[5] == 0 && grandTotalCount == 250) {
    achAward(5)
  }
  else if (achHave[6] == 0 && grandTotalCount == 500) {
    achAward(6)
  }
  else if (achHave[7] == 0 && grandTotalCount == 750) {
    achAward(7)
  }
  else if (achHave[8] == 0 && grandTotalCount == 1000) {
    achAward(8)
  }
  else if (achHave[9] == 0 && grandTotalCount == 1149) {
    achAward(9)
  }
  else if (achHave[10] == 0 && grandTotalCount == 1250) {
    achAward(10)
  }
  else if (achHave[11] == 0 && grandTotalCount == 1500) {
    achAward(11)
  }
  else if (achHave[12] == 0 && grandTotalCount == 1750) {
    achAward(12)
  }
  else if (achHave[13] == 0 && grandTotalCount == 2000) {
    achAward(13)
  }
  else if (achHave[14] == 0 && grandTotalCount == 2297) {
    achAward(14)
  }
  if (achHave[21] == 0 && sumOverY[1] == 1) {
    achAward(21)
  }
  else if (achHave[22] == 0 && sumOverY[1] == 100) {
    achAward(22)
  }
  else if (achHave[23] == 0 && sumOverY[1] == 250) {
    achAward(23)
  }
  else if (achHave[24] == 0 && sumOverY[1] == 500) {
    achAward(24)
  }
  else if (achHave[25] == 0 && sumOverY[1] == 607) {
    achAward(25)
  }
  if (achHave[26] == 0 && sumOverY[2] == 1) {
    achAward(26)
  }
  else if (achHave[27] == 0 && sumOverY[2] == 100) {
    achAward(27)
  }
  else if (achHave[28] == 0 && sumOverY[2] == 250) {
    achAward(28)
  }
  else if (achHave[29] == 0 && sumOverY[2] == 500) {
    achAward(29)
  }
  else if (achHave[30] == 0 && sumOverY[2] == 750) {
    achAward(30)
  }
  else if (achHave[31] == 0 && sumOverY[2] == 900) {
    achAward(31)
  }
  if (achHave[32] == 0 && sumOverY[3] == 1) {
    achAward(32)
  }
  else if (achHave[33] == 0 && sumOverY[3] == 100) {
    achAward(33)
  }
  else if (achHave[34] == 0 && sumOverY[3] == 250) {
    achAward(34)
  }
  else if (achHave[35] == 0 && sumOverY[3] == 500) {
    achAward(35)
  }
  else if (achHave[36] == 0 && sumOverY[3] == 671) {
    achAward(36)
  }
  if (achHave[37] == 0 && sumOverY[4] == 1) {
    achAward(37)
  }
  else if (achHave[38] == 0 && sumOverY[4] == 10) {
    achAward(38)
  }
  else if (achHave[39] == 0 && sumOverY[4] == 50) {
    achAward(39)
  }
  else if (achHave[40] == 0 && sumOverY[4] == 119) {
    achAward(40)
  }
  if (achHave[41] == 0 && sumOverX[1] == 1) {
    achAward(41)
  }
  else if (achHave[42] == 0 && sumOverX[1] == 50) {
    achAward(42)
  }
  else if (achHave[43] == 0 && sumOverX[1] == 100) {
    achAward(43)
  }
  else if (achHave[44] == 0 && sumOverX[1] == 250) {
    achAward(44)
  }
  else if (achHave[45] == 0 && sumOverX[1] == 326) {
    achAward(45)
  }
  if (achHave[46] == 0 && sumOverX[2] == 1) {
    achAward(46)
  }
  else if (achHave[47] == 0 && sumOverX[2] == 50) {
    achAward(47)
  }
  else if (achHave[48] == 0 && sumOverX[2] == 100) {
    achAward(48)
  }
  else if (achHave[49] == 0 && sumOverX[2] == 250) {
    achAward(49)
  }
  else if (achHave[50] == 0 && sumOverX[2] == 299) {
    achAward(50)
  }
  if (achHave[51] == 0 && sumOverX[3] == 1) {
    achAward(51)
  }
  else if (achHave[52] == 0 && sumOverX[3] == 50) {
    achAward(52)
  }
  else if (achHave[53] == 0 && sumOverX[3] == 100) {
    achAward(53)
  }
  else if (achHave[54] == 0 && sumOverX[3] == 250) {
    achAward(54)
  }
  else if (achHave[55] == 0 && sumOverX[3] == 423) {
    achAward(55)
  }
  if (achHave[56] == 0 && sumOverX[4] == 1) {
    achAward(56)
  }
  else if (achHave[57] == 0 && sumOverX[4] == 50) {
    achAward(57)
  }
  else if (achHave[58] == 0 && sumOverX[4] == 100) {
    achAward(58)
  }
  else if (achHave[59] == 0 && sumOverX[4] == 250) {
    achAward(59)
  }
  else if (achHave[60] == 0 && sumOverX[4] == 500) {
    achAward(60)
  }
  else if (achHave[61] == 0 && sumOverX[4] == 647) {
    achAward(61)
  }
  if (achHave[62] == 0 && sumOverX[5] == 1) {
    achAward(62)
  }
  else if (achHave[63] == 0 && sumOverX[5] == 50) {
    achAward(63)
  }
  else if (achHave[64] == 0 && sumOverX[5] == 100) {
    achAward(64)
  }
  else if (achHave[65] == 0 && sumOverX[5] == 250) {
    achAward(65)
  }
  else if (achHave[66] == 0 && sumOverX[5] == 352) {
    achAward(66)
  }
  if (achHave[67] == 0 && sumOverX[6] == 1) {
    achAward(67)
  }
  else if (achHave[68] == 0 && sumOverX[6] == 50) {
    achAward(68)
  }
  else if (achHave[69] == 0 && sumOverX[6] == 100) {
    achAward(69)
  }
  else if (achHave[70] == 0 && sumOverX[6] == 250) {
    achAward(70)
  }
}

function levelUpCheck() {
  for (let k = 1; k < 100; k++) {
    if (grandTotalCount == coinsNeededCumul[k]) {
      levelUpSound.load()
      levelUpSound.play()
      myLevel = k + 1
      document.getElementById("myLevel").innerHTML = "Lvl " + myLevel
      updateCoinmasterBadge()
      for (let p = 1; p < 11; p++) {
        if (myLevel == 10*p) {
          document.getElementById("myTitle").innerHTML = myTitle[p]
        }
      }
      whichSpecialEnableDisable()
      if (achHave[15] == 0 && myLevel == 2) {
        achAward(15)
      }
      else if (achHave[16] == 0 && myLevel == 10) {
        achAward(16)
      }
      else if (achHave[17] == 0 && myLevel == 25) {
        achAward(17)
      }
      else if (achHave[18] == 0 && myLevel == 50) {
        achAward(18)
      }
      else if (achHave[19] == 0 && myLevel == 75) {
        achAward(19)
      }
      else if (achHave[20] == 0 && myLevel == 100) {
        achAward(20)
      }
    }
  }
}

function countTotalCoins() {
  var stack = document.getElementById("coinStackStat")
  var totalCoins = searchNumCoins + seekerNumCoins + vending1NumCoins + vending2NumCoins + fountainNumCoins + chestNumCoins + vacuumNumCoins + coinPusherNumCoins
    + pennyRollsOpened*50 + nickelRollsOpened*40 + dimeRollsOpened*50 + quarterRollsOpened*40 + halfDollarRollsOpened*20 + dollarRollsOpened*25
    + numCoinsBought
  var pluralLetter4 = "s"
  if (totalCoins == 1) {
    pluralLetter4 = ""
  }
  if (totalCoins == 0) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has a height of zero. How depressing."
  }
  else if (totalCoins >= 1 && totalCoins < heightComp[2]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed an ant in height."
  }
  else if (totalCoins < heightComp[3]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a Lego brick in height."
  }
  else if (totalCoins < heightComp[4]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a chess pawn in height."
  }
  else if (totalCoins < heightComp[5]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a juice box in height."
  }
  else if (totalCoins < heightComp[6]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a water bottle in height."
  }
  else if (totalCoins < heightComp[7]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a kitchen counter in height."
  }
  else if (totalCoins < heightComp[8]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the average adult in height."
  }
  else if (totalCoins < heightComp[9]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a giraffe's shoulders in height."
  }
  else if (totalCoins < heightComp[10]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a telephone pole in height."
  }
  else if (totalCoins < heightComp[11]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a 5-story building in height."
  }
  else if (totalCoins < heightComp[12]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the Hollywood sign in height."
  }
  else if (totalCoins < heightComp[13]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the tail of a Boeing 747 in height."
  }
  else if (totalCoins < heightComp[14]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the Statue of Liberty in height."
  }
  else if (totalCoins < heightComp[15]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the Eiffel Tower in height."
  }
  else if (totalCoins < heightComp[16]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the Burj Khalifa in height."
  }
  else if (totalCoins < heightComp[17]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a small jet's cruising altitude in height."
  }
  else if (totalCoins < heightComp[18]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed Mount Everest in height."
  }
  else if (totalCoins < heightComp[19]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed a commercial airliner's cruising altitude in height."
  }
  else if (totalCoins < heightComp[20]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the Karman line in height. Your coins have reached &quot;space.&quot;"
  }
  else if (totalCoins < heightComp[21]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the orbit of the International Space Station in height."
  }
  else if (totalCoins < heightComp[22]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed geostationary orbit in height."
  }
  else if (totalCoins < heightComp[23]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has reached the moon!"
  }
  else if (totalCoins < heightComp[24]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. The planet Mercury might now collide with your stack of coins!"
  }
  else if (totalCoins < heightComp[25]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. The planet Mars might now collide with your stack of coins!"
  }
  else if (totalCoins < heightComp[26]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has reached the sun!"
  }
  else if (totalCoins < heightComp[27]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. The planet Jupiter might now collide with your stack of coins!"
  }
  else if (totalCoins < heightComp[28]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. The planet Neptune might now collide with your stack of coins!"
  }
  else if (totalCoins < heightComp[29]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Former planet Pluto might now collide with your stack of coins!"
  }
  else if (totalCoins < heightComp[30]) {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has surpassed the boundary of the solar system!"
  }
  else {
    stack.innerHTML = "You have found a total of " + numberWithCommas(totalCoins) + " coin" + pluralLetter4 +
      " so far. Your stack of coins has reached Proxima Centauri, the nearest star beyond the sun!"
  }
  if (achHave[77] == 0 && totalCoins >= 100) {
    achAward(77)
  }
  else if (achHave[78] == 0 && totalCoins >= 1000) {
    achAward(78)
  }
  else if (achHave[79] == 0 && totalCoins >= 10000) {
    achAward(79)
  }
  else if (achHave[80] == 0 && totalCoins >= 100000) {
    achAward(80)
  }
  else if (achHave[81] == 0 && totalCoins >= 1000000) {
    achAward(81)
  }
  else if (achHave[82] == 0 && totalCoins >= 10000000) {
    achAward(82)
  }
  else if (achHave[83] == 0 && totalCoins >= 100000000) {
    achAward(83)
  }
  else if (achHave[84] == 0 && totalCoins >= 1000000000) {
    achAward(84)
  }
  else if (achHave[85] == 0 && totalCoins >= 10000000000) {
    achAward(85)
  }
  else if (achHave[86] == 0 && totalCoins >= 100000000000) {
    achAward(86)
  }
  else if (achHave[87] == 0 && totalCoins >= 1000000000000) {
    achAward(87)
  }
  else if (achHave[88] == 0 && totalCoins >= 10000000000000) {
    achAward(88)
  }
  if (achHave[119] == 0 && totalCoins >= 1 && totalCoins >= 2 * searchNumSearches) {
    achAward(119)
  }
  else if (achHave[120] == 0 && totalCoins >= 1 && totalCoins >= 1000 * searchNumSearches) {
    achAward(120)
  }
}

function flipCoin(i) {
  if (binaryCoinSide[i] == 0) {
    document.getElementById("qty"+i).previousElementSibling.previousElementSibling.previousElementSibling.firstElementChild.src
      = "Coin Pictures/" + i + "back.jpg"
    binaryCoinSide[i] = 1
    numberCoinsFlipped++
  }
  else if (binaryCoinSide[i] == 1) {
    document.getElementById("qty"+i).previousElementSibling.previousElementSibling.previousElementSibling.firstElementChild.src
      = "Coin Pictures/" + i + "front.jpg"
    binaryCoinSide[i] = 0
    numberCoinsFlipped--
  }
  if (achHave[117] == 0 && numberCoinsFlipped == 100) {
    achAward(117)
  }
}

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

const numPerGroup = 3
var nn = Math.floor(6 * Math.random()) //Random integer between 0 and 5
var songIndex = 0
function pickSong(nn) {
  var k = Math.ceil(numPerGroup * Math.random()) //Random integer between 1 and numPerGroup
  songIndex = nn * numPerGroup + k
  document.getElementById("playerSource").src = "Music/" + song[songIndex]
  music.load()
  music.play()
  document.getElementById("nowPlaying").innerHTML = "&#127925;&nbsp;Now Playing: " + songName[songIndex] + "&nbsp;&#127925;"
}
pickSong(nn)
document.getElementById("nowPlaying").innerHTML = "&#127925;&nbsp;Paused: " + songName[songIndex] + "&nbsp;&#127925;"

function playUpdate() {
	if (music.paused) {
		music.play();
		document.getElementById("pButton").style.background = "url('pauseIcon.png')"
    document.getElementById("pButton").style.backgroundSize = "contain"
    document.getElementById("pButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("nowPlaying").innerHTML = "&#127925;&nbsp;Now Playing: " + songName[songIndex] + "&nbsp;&#127925;"
	}
  else {
		music.pause();
		document.getElementById("pButton").style.background = "url('playIcon.png')"
    document.getElementById("pButton").style.backgroundSize = "contain"
    document.getElementById("pButton").style.backgroundRepeat = "no-repeat"
    document.getElementById("nowPlaying").innerHTML = "&#127925;&nbsp;Paused: " + songName[songIndex] + "&nbsp;&#127925;"
	}
}

function toggleMuteSound() {
  if (soundIsMuted == true) {
    soundIsMuted = false
    soundSlider.value = oldSoundLevel
    document.getElementById("soundMuteButton").style.background = "url('soundOn.png')"
    document.getElementById("soundMuteButton").style.backgroundColor = "rgb(144, 255, 144)"
  }
  else {
    soundIsMuted = true
    oldSoundLevel = soundSlider.value
    soundSlider.value = 0
    document.getElementById("soundMuteButton").style.background = "url('soundOff.png')"
    document.getElementById("soundMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
  }
  soundVol = soundSlider.value
  achievementSound.volume = soundVol / 100
  shovelSound.volume = soundVol / 100
  levelUpSound.volume = soundVol / 100
  document.getElementById("soundMuteButton").style.backgroundSize = "contain"
  document.getElementById("soundMuteButton").style.backgroundRepeat = "no-repeat"
  document.getElementById("soundMuteButton").style.backgroundPositionX = "center"
  document.getElementById("soundMuteButton").style.backgroundPositionY = "center"
}

function toggleMuteMusic() {
  if (musicIsMuted == true) {
    musicIsMuted = false
    musicSlider.value = oldMusicLevel
    document.getElementById("musicMuteButton").style.background = "url('musicOn.png')"
    document.getElementById("musicMuteButton").style.backgroundColor = "rgb(144, 255, 144)"
  }
  else {
    musicIsMuted = true
    oldMusicLevel = musicSlider.value
    musicSlider.value = 0
    document.getElementById("musicMuteButton").style.background = "url('musicOff.png')"
    document.getElementById("musicMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
  }
  musicVol = musicSlider.value
  music.volume = musicVol / 100
  document.getElementById("musicMuteButton").style.backgroundSize = "contain"
  document.getElementById("musicMuteButton").style.backgroundRepeat = "no-repeat"
  document.getElementById("musicMuteButton").style.backgroundPositionX = "center"
  document.getElementById("musicMuteButton").style.backgroundPositionY = "center"
}

function clickPercent(event) {
  timelineWidth = timeline.offsetWidth
  return (event.clientX - getPosition(timeline)) / timelineWidth;
}

function mouseDown() {
  onplayhead = true;
  window.addEventListener('mousemove', moveplayhead, true);
  music.removeEventListener('timeupdate', timeUpdate, false);
}

function mouseUp(event) {
  if (onplayhead == true) {
    moveplayhead(event);
    window.removeEventListener('mousemove', moveplayhead, true);
    // change current time
    music.currentTime = duration * clickPercent(event);
    music.addEventListener('timeupdate', timeUpdate, false);
  }
  onplayhead = false;
}

function moveplayhead(event) {
  var newMargLeft = event.clientX - getPosition(timeline);
  if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {
    playhead.style.marginLeft = newMargLeft - 0.5 * playhead.offsetWidth + "px";
  }
  if (newMargLeft < 0) {
    playhead.style.marginLeft = - 0.5 * playhead.offsetWidth + "px";
  }
  if (newMargLeft > timelineWidth) {
    playhead.style.marginLeft = timelineWidth - 0.5 * playhead.offsetWidth + "px";
  }
  music.currentTime = duration * clickPercent(event);
  var curMM = Math.floor(music.currentTime / 60)
  var curSS = Math.floor(music.currentTime % 60)
  if (curSS < 10) {
    curSS = "0" + curSS
  }
  var durMM = Math.floor(duration / 60)
  var durSS = Math.floor(duration % 60)
  if (durSS < 10) {
    durSS = "0" + durSS
  }
  document.getElementById("musicProgress").innerHTML = curMM + ":" + curSS + " / " + durMM + ":" + durSS
}

function timeUpdate() {
  timelineWidth = timeline.offsetWidth
  var playPercent = timelineWidth * (music.currentTime / duration);
  playhead.style.marginLeft = playPercent - 0.5 * playhead.offsetWidth + "px";
  if (music.currentTime < duration) {
    var curMM = Math.floor(music.currentTime / 60)
    var curSS = Math.floor(music.currentTime % 60)
    if (curSS < 10) {
      curSS = "0" + curSS
    }
    var durMM = Math.floor(duration / 60)
    var durSS = Math.floor(duration % 60)
    if (durSS < 10) {
      durSS = "0" + durSS
    }
    document.getElementById("musicProgress").innerHTML = curMM + ":" + curSS + " / " + durMM + ":" + durSS
  }
  else if (music.currentTime == duration) {
    nn = (nn + 1) % 6
    pickSong(nn)
  }
}

function nextSong() {
  nn = (nn + 1) % 6
  pickSong(nn)
  document.getElementById("pButton").style.background = "url('pauseIcon.png')"
  document.getElementById("pButton").style.backgroundSize = "contain"
  document.getElementById("pButton").style.backgroundRepeat = "no-repeat"
  document.getElementById("nowPlaying").innerHTML = "&#127925;&nbsp;Now Playing: " + songName[songIndex] + "&nbsp;&#127925;"	
}

function getPosition(el) {
  return el.getBoundingClientRect().left;
}

function toFeedBottom() {
  feedArea.scrollTo(0,feedArea.scrollHeight)
}

function showHave() {
  for (let i=1; i <= 2297; i++) {
    if (quantity[i] > 0) {
      document.getElementById("qty"+i).parentElement.style.display = "grid"
    }
    else {
      document.getElementById("qty"+i).parentElement.style.display = "none"
    }
  }
}

function showDont() {
  for (let i=1; i <= 2297; i++) {
    if (quantity[i] == 0) {
      document.getElementById("qty"+i).parentElement.style.display = "grid"
    }
    else {
      document.getElementById("qty"+i).parentElement.style.display = "none"
    }
  }
}

function showAll() {
  for (let i=1; i <= 2297; i++) {
    document.getElementById("qty"+i).parentElement.style.display = "grid"
  }
}

function saveGame() {
  saveTime = Date.now()
  for (let i = 1; i <= feedCount; i++) {
    feedText[i] = document.getElementById("feedDiv"+i).innerHTML
  }
  localStorage['bankAccount'] = encodeString(JSON.stringify(bankAccount));
  localStorage['totalMintage'] = encodeString(JSON.stringify(totalMintage));
  localStorage['quantity'] = encodeString(JSON.stringify(quantity));
  localStorage['binaryCoinSide'] = encodeString(JSON.stringify(binaryCoinSide));
  localStorage['coinCutoff'] = encodeString(JSON.stringify(coinCutoff));
  localStorage['fudgeFactor'] = encodeString(JSON.stringify(fudgeFactor)); //Need to remove
  localStorage['myLevel'] = encodeString(JSON.stringify(myLevel));
  localStorage['typesUnlocked'] = encodeString(JSON.stringify(typesUnlocked));
  localStorage['goldenBuffaloCount'] = encodeString(JSON.stringify(goldenBuffaloCount));
  localStorage['highestSeekerLevel'] = encodeString(JSON.stringify(highestSeekerLevel));
  localStorage['buffaloUB'] = encodeString(JSON.stringify(buffaloUB));
  localStorage['specialsCooldown'] = encodeString(JSON.stringify(specialsCooldown));
  localStorage['seekerPillDuration'] = encodeString(JSON.stringify(seekerPillDuration));
  localStorage['seekerPillActive'] = encodeString(JSON.stringify(seekerPillActive));
  localStorage['shovelNumber'] = encodeString(JSON.stringify(shovelNumber));
  localStorage['salesmanPresent'] = encodeString(JSON.stringify(salesmanPresent));
  localStorage['boughtShovel'] = encodeString(JSON.stringify(boughtShovel));
  localStorage['specialIsUnlocked'] = encodeString(JSON.stringify(specialIsUnlocked));
  localStorage['salesmanLevel'] = encodeString(JSON.stringify(salesmanLevel));
  localStorage['timeSalesmanPresent'] = encodeString(JSON.stringify(timeSalesmanPresent));
  localStorage['timeSalesmanGone'] = encodeString(JSON.stringify(timeSalesmanGone));
  localStorage['inventoryIndex'] = encodeString(JSON.stringify(inventoryIndex));
  localStorage['coinRollPrepTime'] = encodeString(JSON.stringify(coinRollPrepTime));
  localStorage['coinRollLimit'] = encodeString(JSON.stringify(coinRollLimit));
  localStorage['coinRollAvail'] = encodeString(JSON.stringify(coinRollAvail));
  localStorage['vacuumSearching'] = encodeString(JSON.stringify(vacuumSearching));
  localStorage['vacuumReady'] = encodeString(JSON.stringify(vacuumReady));
  localStorage['vacuumCollected'] = encodeString(JSON.stringify(vacuumCollected));
  localStorage['vacuumSpeed'] = encodeString(JSON.stringify(vacuumSpeed));
  localStorage['vacuumRotateSpeed'] = encodeString(JSON.stringify(vacuumRotateSpeed));
  localStorage['totalVacuumTime'] = encodeString(JSON.stringify(totalVacuumTime));
  localStorage['totalVacuumRetreatTime'] = encodeString(JSON.stringify(totalVacuumRetreatTime));
  localStorage['coinPusherOffTime'] = encodeString(JSON.stringify(coinPusherOffTime));
  localStorage['seekerName'] = encodeString(JSON.stringify(seekerName));
  localStorage['seekerLevel'] = encodeString(JSON.stringify(seekerLevel));
  localStorage['seekerFuelTimeUpgrade'] = encodeString(JSON.stringify(seekerFuelTimeUpgrade));
  localStorage['seekerCooldownUpgrade'] = encodeString(JSON.stringify(seekerCooldownUpgrade));
  localStorage['seekerFuelLeft'] = encodeString(JSON.stringify(seekerFuelLeft));
  localStorage['seekerProgress'] = encodeString(JSON.stringify(seekerProgress));
  localStorage['seekerSearchesToLevel'] = encodeString(JSON.stringify(seekerSearchesToLevel));
  localStorage['seekerSearches'] = encodeString(JSON.stringify(seekerSearches));
  localStorage['seekerReadyToLevel'] = encodeString(JSON.stringify(seekerReadyToLevel));
  localStorage['boughtUpgrade'] = encodeString(JSON.stringify(boughtUpgrade));
  localStorage['wTotal'] = encodeString(JSON.stringify(wTotal));
  localStorage['fTotal'] = encodeString(JSON.stringify(fTotal));
  localStorage['startTime'] = encodeString(JSON.stringify(startTime));
  localStorage['metalDetectorStarted'] = encodeString(JSON.stringify(metalDetectorStarted));
  localStorage['metalDetectorXFound'] = encodeString(JSON.stringify(metalDetectorXFound));
  localStorage['metalDetectorChestFound'] = encodeString(JSON.stringify(metalDetectorChestFound));
  localStorage['startTimeRoll'] = encodeString(JSON.stringify(startTimeRoll));
  localStorage['vacuumCost'] = encodeString(JSON.stringify(vacuumCost));
  localStorage['coinPusherCost'] = encodeString(JSON.stringify(coinPusherCost));
  localStorage['seekerUnlocked'] = encodeString(JSON.stringify(seekerUnlocked));
  localStorage['seekerHired'] = encodeString(JSON.stringify(seekerHired));
  localStorage['toggleGarbage'] = encodeString(JSON.stringify(toggleGarbage));
  localStorage['specialReady'] = encodeString(JSON.stringify(specialReady));
  localStorage['numberPills'] = encodeString(JSON.stringify(numberPills));
  localStorage['itemBought'] = encodeString(JSON.stringify(itemBought));
  localStorage['toggleCommon'] = encodeString(JSON.stringify(toggleCommon));
  localStorage['saveTime'] = encodeString(JSON.stringify(saveTime));
  localStorage['pusherMaxTime'] = encodeString(JSON.stringify(pusherMaxTime));
  localStorage['toggleUncommon'] = encodeString(JSON.stringify(toggleUncommon));
  localStorage['toggleRare'] = encodeString(JSON.stringify(toggleRare));
  localStorage['searchNumSearches'] = encodeString(JSON.stringify(searchNumSearches));
  localStorage['seekerNumSearches'] = encodeString(JSON.stringify(seekerNumSearches));
  localStorage['vending1NumSearches'] = encodeString(JSON.stringify(vending1NumSearches));
  localStorage['vending2NumSearches'] = encodeString(JSON.stringify(vending2NumSearches));
  localStorage['fountainNumSearches'] = encodeString(JSON.stringify(fountainNumSearches));
  localStorage['chestNumSearches'] = encodeString(JSON.stringify(chestNumSearches));
  localStorage['vacuumNumSearches'] = encodeString(JSON.stringify(vacuumNumSearches));
  localStorage['coinPusherNumSearches'] = encodeString(JSON.stringify(coinPusherNumSearches));
  localStorage['searchNumNew'] = encodeString(JSON.stringify(searchNumNew));
  localStorage['seekerNumNew'] = encodeString(JSON.stringify(seekerNumNew));
  localStorage['vending1NumNew'] = encodeString(JSON.stringify(vending1NumNew));
  localStorage['vending2NumNew'] = encodeString(JSON.stringify(vending2NumNew));
  localStorage['fountainNumNew'] = encodeString(JSON.stringify(fountainNumNew));
  localStorage['chestNumNew'] = encodeString(JSON.stringify(chestNumNew));
  localStorage['vacuumNumNew'] = encodeString(JSON.stringify(vacuumNumNew));
  localStorage['coinPusherNumNew'] = encodeString(JSON.stringify(coinPusherNumNew));
  localStorage['seekerPillStartTime'] = encodeString(JSON.stringify(seekerPillStartTime));
  localStorage['searchNumCoins'] = encodeString(JSON.stringify(searchNumCoins));
  localStorage['seekerNumCoins'] = encodeString(JSON.stringify(seekerNumCoins));
  localStorage['vending1NumCoins'] = encodeString(JSON.stringify(vending1NumCoins));
  localStorage['vending2NumCoins'] = encodeString(JSON.stringify(vending2NumCoins));
  localStorage['fountainNumCoins'] = encodeString(JSON.stringify(fountainNumCoins));
  localStorage['chestNumCoins'] = encodeString(JSON.stringify(chestNumCoins));
  localStorage['vacuumNumCoins'] = encodeString(JSON.stringify(vacuumNumCoins));
  localStorage['coinPusherNumCoins'] = encodeString(JSON.stringify(coinPusherNumCoins));
  localStorage['seekerPrizeClaimed'] = encodeString(JSON.stringify(seekerPrizeClaimed));
  localStorage['toggleReady'] = encodeString(JSON.stringify(toggleReady));
  localStorage['goldenBuffalosFound'] = encodeString(JSON.stringify(goldenBuffalosFound));
  localStorage['duplicatesWorth'] = encodeString(JSON.stringify(duplicatesWorth));
  localStorage['prestigeComplete'] = encodeString(JSON.stringify(prestigeComplete));
  localStorage['ascensionLevel'] = encodeString(JSON.stringify(ascensionLevel));
  localStorage['typeUnlocked'] = encodeString(JSON.stringify(typeUnlocked));
  localStorage['currentDescensionType'] = encodeString(JSON.stringify(currentDescensionType));
  localStorage['numberDescensionsComplete'] = encodeString(JSON.stringify(numberDescensionsComplete));
  localStorage['whichEnabled'] = encodeString(JSON.stringify(whichEnabled));
  localStorage['numberMessagesUnlocked'] = encodeString(JSON.stringify(numberMessagesUnlocked));
  localStorage['toggleUltraRare'] = encodeString(JSON.stringify(toggleUltraRare));
  localStorage['pennyRollsOpened1'] = encodeString(JSON.stringify(pennyRollsOpened1));
  localStorage['nickelRollsOpened1'] = encodeString(JSON.stringify(nickelRollsOpened1));
  localStorage['dimeRollsOpened1'] = encodeString(JSON.stringify(dimeRollsOpened1));
  localStorage['quarterRollsOpened1'] = encodeString(JSON.stringify(quarterRollsOpened1));
  localStorage['halfDollarRollsOpened1'] = encodeString(JSON.stringify(halfDollarRollsOpened1));
  localStorage['dollarRollsOpened1'] = encodeString(JSON.stringify(dollarRollsOpened1));
  localStorage['pennyRollsOpened2'] = encodeString(JSON.stringify(pennyRollsOpened2));
  localStorage['nickelRollsOpened2'] = encodeString(JSON.stringify(nickelRollsOpened2));
  localStorage['dimeRollsOpened2'] = encodeString(JSON.stringify(dimeRollsOpened2));
  localStorage['quarterRollsOpened2'] = encodeString(JSON.stringify(quarterRollsOpened2));
  localStorage['halfDollarRollsOpened2'] = encodeString(JSON.stringify(halfDollarRollsOpened2));
  localStorage['dollarRollsOpened2'] = encodeString(JSON.stringify(dollarRollsOpened2));
  localStorage['pennyRollsOpened3'] = encodeString(JSON.stringify(pennyRollsOpened3));
  localStorage['nickelRollsOpened3'] = encodeString(JSON.stringify(nickelRollsOpened3));
  localStorage['dimeRollsOpened3'] = encodeString(JSON.stringify(dimeRollsOpened3));
  localStorage['quarterRollsOpened3'] = encodeString(JSON.stringify(quarterRollsOpened3));
  localStorage['halfDollarRollsOpened3'] = encodeString(JSON.stringify(halfDollarRollsOpened3));
  localStorage['dollarRollsOpened3'] = encodeString(JSON.stringify(dollarRollsOpened3));
  localStorage['pennyRollsOpened4'] = encodeString(JSON.stringify(pennyRollsOpened4));
  localStorage['nickelRollsOpened4'] = encodeString(JSON.stringify(nickelRollsOpened4));
  localStorage['dimeRollsOpened4'] = encodeString(JSON.stringify(dimeRollsOpened4));
  localStorage['quarterRollsOpened4'] = encodeString(JSON.stringify(quarterRollsOpened4));
  localStorage['halfDollarRollsOpened4'] = encodeString(JSON.stringify(halfDollarRollsOpened4));
  localStorage['dollarRollsOpened4'] = encodeString(JSON.stringify(dollarRollsOpened4));
  localStorage['whichSpecial'] = encodeString(JSON.stringify(whichSpecial));
  localStorage['coinLoadSec'] = encodeString(JSON.stringify(coinLoadSec));
  localStorage['openingDone'] = encodeString(JSON.stringify(openingDone));
  localStorage['achHave'] = encodeString(JSON.stringify(achHave));
  localStorage['numCoinsBought'] = encodeString(JSON.stringify(numCoinsBought));
  localStorage['numDupCoinsBought'] = encodeString(JSON.stringify(numDupCoinsBought));
  localStorage['numberPillsUsed'] = encodeString(JSON.stringify(numberPillsUsed));
  localStorage['numberPillsBought'] = encodeString(JSON.stringify(numberPillsBought));
  localStorage['pusherCollected'] = encodeString(JSON.stringify(pusherCollected));
  localStorage['feedText'] = encodeString(JSON.stringify(feedText));
  localStorage['lastUpdate'] = encodeString(JSON.stringify(lastUpdate));
  localStorage['soundVol'] = encodeString(JSON.stringify(soundVol));
  localStorage['musicVol'] = encodeString(JSON.stringify(musicVol));
  localStorage['soundIsMuted'] = encodeString(JSON.stringify(soundIsMuted));
  localStorage['musicIsMuted'] = encodeString(JSON.stringify(musicIsMuted));
  localStorage['oldSoundLevel'] = encodeString(JSON.stringify(oldSoundLevel));
  localStorage['oldMusicLevel'] = encodeString(JSON.stringify(oldMusicLevel));
  localStorage['toggleAutoSellDups'] = encodeString(JSON.stringify(toggleAutoSellDups));
  localStorage['toggleAutoBuyRolls'] = encodeString(JSON.stringify(toggleAutoBuyRolls));
  localStorage['toggleHypnotic'] = encodeString(JSON.stringify(toggleHypnotic));

}

function backup() {
  saveGame();
  var date = new Date();
  var dateYear = date.getFullYear();
  var dateMonth = date.getMonth() + 1;
  if (dateMonth < 10) {
    dateMonth = "0" + dateMonth
  }
  var dateDay = date.getDate();
  if (dateDay < 10) {
    dateDay = "0" + dateDay
  }
  var dateHour = date.getHours();
  if (dateHour < 10) {
    dateHour = "0" + dateHour
  }
  var dateMinute = date.getMinutes();
  if (dateMinute < 10) {
    dateMinute = "0" + dateMinute
  }
  var dateSecond = date.getSeconds();
  if (dateSecond < 10) {
    dateSecond = "0" + dateSecond
  }
  var dateMS = date.getMilliseconds();
  if (dateMS < 10) {
    dateMS = "00" + dateMS
  }
  else if (dateMS < 100) {
    dateMS = "0" + dateMS
  }
  var blob = new Blob([
    encodeString("ultimatecoincollectorbackupfile" +
      JSON.stringify(bankAccount) + "_" +
      JSON.stringify(totalMintage) + "_" +
      JSON.stringify(quantity) + "_" +
      JSON.stringify(binaryCoinSide) + "_" +
      JSON.stringify(coinCutoff) + "_" +
      JSON.stringify(fudgeFactor) + "_" +
      JSON.stringify(myLevel) + "_" +
      JSON.stringify(typesUnlocked) + "_" +
      JSON.stringify(goldenBuffaloCount) + "_" +
      JSON.stringify(highestSeekerLevel) + "_" +
      JSON.stringify(buffaloUB) + "_" +
      JSON.stringify(specialsCooldown) + "_" +
      JSON.stringify(seekerPillDuration) + "_" +
      JSON.stringify(seekerPillActive) + "_" +
      JSON.stringify(shovelNumber) + "_" +
      JSON.stringify(salesmanPresent) + "_" +
      JSON.stringify(boughtShovel) + "_" +
      JSON.stringify(specialIsUnlocked) + "_" +
      JSON.stringify(salesmanLevel) + "_" +
      JSON.stringify(timeSalesmanPresent) + "_" +
      JSON.stringify(timeSalesmanGone) + "_" +
      JSON.stringify(inventoryIndex) + "_" +
      JSON.stringify(coinRollPrepTime) + "_" +
      JSON.stringify(coinRollLimit) + "_" +
      JSON.stringify(coinRollAvail) + "_" +
      JSON.stringify(vacuumSearching) + "_" +
      JSON.stringify(vacuumReady) + "_" +
      JSON.stringify(vacuumCollected) + "_" +
      JSON.stringify(vacuumSpeed) + "_" +
      JSON.stringify(vacuumRotateSpeed) + "_" +
      JSON.stringify(totalVacuumTime) + "_" +
      JSON.stringify(totalVacuumRetreatTime) + "_" +
      JSON.stringify(coinPusherOffTime) + "_" +
      JSON.stringify(seekerName) + "_" +
      JSON.stringify(seekerLevel) + "_" +
      JSON.stringify(seekerFuelTimeUpgrade) + "_" +
      JSON.stringify(seekerCooldownUpgrade) + "_" +
      JSON.stringify(seekerFuelLeft) + "_" +
      JSON.stringify(seekerProgress) + "_" +
      JSON.stringify(seekerSearchesToLevel) + "_" +
      JSON.stringify(seekerSearches) + "_" +
      JSON.stringify(seekerReadyToLevel) + "_" +
      JSON.stringify(boughtUpgrade) + "_" +
      JSON.stringify(wTotal) + "_" +
      JSON.stringify(fTotal) + "_" +
      JSON.stringify(startTime) + "_" +
      JSON.stringify(metalDetectorStarted) + "_" +
      JSON.stringify(metalDetectorXFound) + "_" +
      JSON.stringify(metalDetectorChestFound) + "_" +
      JSON.stringify(startTimeRoll) + "_" +
      JSON.stringify(vacuumCost) + "_" +
      JSON.stringify(coinPusherCost) + "_" +
      JSON.stringify(seekerUnlocked) + "_" +
      JSON.stringify(seekerHired) + "_" +
      JSON.stringify(toggleGarbage) + "_" +
      JSON.stringify(specialReady) + "_" +
      JSON.stringify(numberPills) + "_" +
      JSON.stringify(itemBought) + "_" +
      JSON.stringify(toggleCommon) + "_" +
      JSON.stringify(saveTime) + "_" +
      JSON.stringify(pusherMaxTime) + "_" +
      JSON.stringify(toggleUncommon) + "_" +
      JSON.stringify(toggleRare) + "_" +
      JSON.stringify(searchNumSearches) + "_" +
      JSON.stringify(seekerNumSearches) + "_" +
      JSON.stringify(vending1NumSearches) + "_" +
      JSON.stringify(vending2NumSearches) + "_" +
      JSON.stringify(fountainNumSearches) + "_" +
      JSON.stringify(chestNumSearches) + "_" +
      JSON.stringify(vacuumNumSearches) + "_" +
      JSON.stringify(coinPusherNumSearches) + "_" +
      JSON.stringify(searchNumNew) + "_" +
      JSON.stringify(seekerNumNew) + "_" +
      JSON.stringify(vending1NumNew) + "_" +
      JSON.stringify(vending2NumNew) + "_" +
      JSON.stringify(fountainNumNew) + "_" +
      JSON.stringify(chestNumNew) + "_" +
      JSON.stringify(vacuumNumNew) + "_" +
      JSON.stringify(coinPusherNumNew) + "_" +
      JSON.stringify(seekerPillStartTime) + "_" +
      JSON.stringify(searchNumCoins) + "_" +
      JSON.stringify(seekerNumCoins) + "_" +
      JSON.stringify(vending1NumCoins) + "_" +
      JSON.stringify(vending2NumCoins) + "_" +
      JSON.stringify(fountainNumCoins) + "_" +
      JSON.stringify(chestNumCoins) + "_" +
      JSON.stringify(vacuumNumCoins) + "_" +
      JSON.stringify(coinPusherNumCoins) + "_" +
      JSON.stringify(seekerPrizeClaimed) + "_" +
      JSON.stringify(toggleReady) + "_" +
      JSON.stringify(goldenBuffalosFound) + "_" +
      JSON.stringify(duplicatesWorth) + "_" +
      JSON.stringify(prestigeComplete) + "_" +
      JSON.stringify(ascensionLevel) + "_" +
      JSON.stringify(typeUnlocked) + "_" +
      JSON.stringify(currentDescensionType) + "_" +
      JSON.stringify(numberDescensionsComplete) + "_" +
      JSON.stringify(whichEnabled) + "_" +
      JSON.stringify(numberMessagesUnlocked) + "_" +
      JSON.stringify(toggleUltraRare) + "_" +
      JSON.stringify(pennyRollsOpened1) + "_" +
      JSON.stringify(nickelRollsOpened1) + "_" +
      JSON.stringify(dimeRollsOpened1) + "_" +
      JSON.stringify(quarterRollsOpened1) + "_" +
      JSON.stringify(halfDollarRollsOpened1) + "_" +
      JSON.stringify(dollarRollsOpened1) + "_" +
      JSON.stringify(pennyRollsOpened2) + "_" +
      JSON.stringify(nickelRollsOpened2) + "_" +
      JSON.stringify(dimeRollsOpened2) + "_" +
      JSON.stringify(quarterRollsOpened2) + "_" +
      JSON.stringify(halfDollarRollsOpened2) + "_" +
      JSON.stringify(dollarRollsOpened2) + "_" +
      JSON.stringify(pennyRollsOpened3) + "_" +
      JSON.stringify(nickelRollsOpened3) + "_" +
      JSON.stringify(dimeRollsOpened3) + "_" +
      JSON.stringify(quarterRollsOpened3) + "_" +
      JSON.stringify(halfDollarRollsOpened3) + "_" +
      JSON.stringify(dollarRollsOpened3) + "_" +
      JSON.stringify(pennyRollsOpened4) + "_" +
      JSON.stringify(nickelRollsOpened4) + "_" +
      JSON.stringify(dimeRollsOpened4) + "_" +
      JSON.stringify(quarterRollsOpened4) + "_" +
      JSON.stringify(halfDollarRollsOpened4) + "_" +
      JSON.stringify(dollarRollsOpened4) + "_" +
      JSON.stringify(whichSpecial) + "_" +
      JSON.stringify(coinLoadSec) + "_" +
      JSON.stringify(openingDone) + "_" +
      JSON.stringify(achHave) + "_" +
      JSON.stringify(numCoinsBought) + "_" +
      JSON.stringify(numDupCoinsBought) + "_" +
      JSON.stringify(numberPillsUsed) + "_" +
      JSON.stringify(numberPillsBought) + "_" +
      JSON.stringify(pusherCollected) + "_" +
      JSON.stringify(feedText) + "_" +
      JSON.stringify(lastUpdate) + "_" +
      JSON.stringify(soundVol) + "_" +
      JSON.stringify(musicVol) + "_" +
      JSON.stringify(soundIsMuted) + "_" +
      JSON.stringify(musicIsMuted) + "_" +
      JSON.stringify(oldSoundLevel) + "_" +
      JSON.stringify(oldMusicLevel) + "_" +
      JSON.stringify(toggleAutoSellDups) + "_" +
      JSON.stringify(toggleAutoBuyRolls) + "_" +
      JSON.stringify(toggleHypnotic)

    )],{type: "text/plain;charset=utf-8"});
  saveAs(blob,"coinbackup_A" + ascensionLevel + "_lvl" + myLevel + "_" + dateYear + dateMonth + dateDay + "_" + dateHour + dateMinute + dateSecond + dateMS + ".txt");
}

function loadBackup() {
  if (document.getElementById("restoreWindow").style.display == "none") {
    document.getElementById("restoreWindow").style.display = ""
  }
  else {
    document.getElementById("restoreWindow").style.display = "none"
  }
  if (document.getElementById("resetWindow").style.display == "") {
    document.getElementById("resetWindow").style.display = "none"
  }
}

function loadGame(input) {
  if (input.substring(0,31) != encodeString("ultimatecoincollectorbackupfile")) {
    alert("This is not a valid save file.")
  }
  else {
    document.getElementById("restoreWindow").style.display = "none"
    var string = input
    const sep = encodeOne("_")
    var thing1    = string.substring(31,string.indexOf(sep))
    var leftover1 = string.substring(string.indexOf(sep)+1)
    var thing2    = leftover1.substring(0,leftover1.indexOf(sep))
    var leftover2 = leftover1.substring(leftover1.indexOf(sep)+1)
    var thing3    = leftover2.substring(0,leftover2.indexOf(sep))
    var leftover3 = leftover2.substring(leftover2.indexOf(sep)+1)
    var thing4    = leftover3.substring(0,leftover3.indexOf(sep))
    var leftover4 = leftover3.substring(leftover3.indexOf(sep)+1)
    var thing5    = leftover4.substring(0,leftover4.indexOf(sep))
    var leftover5 = leftover4.substring(leftover4.indexOf(sep)+1)
    var thing6    = leftover5.substring(0,leftover5.indexOf(sep))
    var leftover6 = leftover5.substring(leftover5.indexOf(sep)+1)
    var thing7    = leftover6.substring(0,leftover6.indexOf(sep))
    var leftover7 = leftover6.substring(leftover6.indexOf(sep)+1)
    var thing8    = leftover7.substring(0,leftover7.indexOf(sep))
    var leftover8 = leftover7.substring(leftover7.indexOf(sep)+1)
    var thing9    = leftover8.substring(0,leftover8.indexOf(sep))
    var leftover9 = leftover8.substring(leftover8.indexOf(sep)+1)
    var thing10   = leftover9.substring(0,leftover9.indexOf(sep))
    var leftover10= leftover9.substring(leftover9.indexOf(sep)+1)
    var thing11   = leftover10.substring(0,leftover10.indexOf(sep))
    var leftover11= leftover10.substring(leftover10.indexOf(sep)+1)
    var thing12   = leftover11.substring(0,leftover11.indexOf(sep))
    var leftover12= leftover11.substring(leftover11.indexOf(sep)+1)
    var thing13   = leftover12.substring(0,leftover12.indexOf(sep))
    var leftover13= leftover12.substring(leftover12.indexOf(sep)+1)
    var thing14   = leftover13.substring(0,leftover13.indexOf(sep))
    var leftover14= leftover13.substring(leftover13.indexOf(sep)+1)
    var thing15   = leftover14.substring(0,leftover14.indexOf(sep))
    var leftover15= leftover14.substring(leftover14.indexOf(sep)+1)
    var thing16   = leftover15.substring(0,leftover15.indexOf(sep))
    var leftover16= leftover15.substring(leftover15.indexOf(sep)+1)
    var thing17   = leftover16.substring(0,leftover16.indexOf(sep))
    var leftover17= leftover16.substring(leftover16.indexOf(sep)+1)
    var thing18   = leftover17.substring(0,leftover17.indexOf(sep))
    var leftover18= leftover17.substring(leftover17.indexOf(sep)+1)
    var thing19   = leftover18.substring(0,leftover18.indexOf(sep))
    var leftover19= leftover18.substring(leftover18.indexOf(sep)+1)
    var thing20   = leftover19.substring(0,leftover19.indexOf(sep))
    var leftover20= leftover19.substring(leftover19.indexOf(sep)+1)
    var thing21   = leftover20.substring(0,leftover20.indexOf(sep))
    var leftover21= leftover20.substring(leftover20.indexOf(sep)+1)
    var thing22   = leftover21.substring(0,leftover21.indexOf(sep))
    var leftover22= leftover21.substring(leftover21.indexOf(sep)+1)
    var thing23   = leftover22.substring(0,leftover22.indexOf(sep))
    var leftover23= leftover22.substring(leftover22.indexOf(sep)+1)
    var thing24   = leftover23.substring(0,leftover23.indexOf(sep))
    var leftover24= leftover23.substring(leftover23.indexOf(sep)+1)
    var thing25   = leftover24.substring(0,leftover24.indexOf(sep))
    var leftover25= leftover24.substring(leftover24.indexOf(sep)+1)
    var thing26   = leftover25.substring(0,leftover25.indexOf(sep))
    var leftover26= leftover25.substring(leftover25.indexOf(sep)+1)
    var thing27   = leftover26.substring(0,leftover26.indexOf(sep))
    var leftover27= leftover26.substring(leftover26.indexOf(sep)+1)
    var thing28   = leftover27.substring(0,leftover27.indexOf(sep))
    var leftover28= leftover27.substring(leftover27.indexOf(sep)+1)
    var thing29   = leftover28.substring(0,leftover28.indexOf(sep))
    var leftover29= leftover28.substring(leftover28.indexOf(sep)+1)
    var thing30   = leftover29.substring(0,leftover29.indexOf(sep))
    var leftover30= leftover29.substring(leftover29.indexOf(sep)+1)
    var thing31   = leftover30.substring(0,leftover30.indexOf(sep))
    var leftover31= leftover30.substring(leftover30.indexOf(sep)+1)
    var thing32   = leftover31.substring(0,leftover31.indexOf(sep))
    var leftover32= leftover31.substring(leftover31.indexOf(sep)+1)
    var thing33   = leftover32.substring(0,leftover32.indexOf(sep))
    var leftover33= leftover32.substring(leftover32.indexOf(sep)+1)
    var thing34   = leftover33.substring(0,leftover33.indexOf(sep))
    var leftover34= leftover33.substring(leftover33.indexOf(sep)+1)
    var thing35   = leftover34.substring(0,leftover34.indexOf(sep))
    var leftover35= leftover34.substring(leftover34.indexOf(sep)+1)
    var thing36   = leftover35.substring(0,leftover35.indexOf(sep))
    var leftover36= leftover35.substring(leftover35.indexOf(sep)+1)
    var thing37   = leftover36.substring(0,leftover36.indexOf(sep))
    var leftover37= leftover36.substring(leftover36.indexOf(sep)+1)
    var thing38   = leftover37.substring(0,leftover37.indexOf(sep))
    var leftover38= leftover37.substring(leftover37.indexOf(sep)+1)
    var thing39   = leftover38.substring(0,leftover38.indexOf(sep))
    var leftover39= leftover38.substring(leftover38.indexOf(sep)+1)
    var thing40   = leftover39.substring(0,leftover39.indexOf(sep))
    var leftover40= leftover39.substring(leftover39.indexOf(sep)+1)
    var thing41   = leftover40.substring(0,leftover40.indexOf(sep))
    var leftover41= leftover40.substring(leftover40.indexOf(sep)+1)
    var thing42   = leftover41.substring(0,leftover41.indexOf(sep))
    var leftover42= leftover41.substring(leftover41.indexOf(sep)+1)
    var thing43   = leftover42.substring(0,leftover42.indexOf(sep))
    var leftover43= leftover42.substring(leftover42.indexOf(sep)+1)
    var thing44   = leftover43.substring(0,leftover43.indexOf(sep))
    var leftover44= leftover43.substring(leftover43.indexOf(sep)+1)
    var thing45   = leftover44.substring(0,leftover44.indexOf(sep))
    var leftover45= leftover44.substring(leftover44.indexOf(sep)+1)
    var thing46   = leftover45.substring(0,leftover45.indexOf(sep))
    var leftover46= leftover45.substring(leftover45.indexOf(sep)+1)
    var thing47   = leftover46.substring(0,leftover46.indexOf(sep))
    var leftover47= leftover46.substring(leftover46.indexOf(sep)+1)
    var thing48   = leftover47.substring(0,leftover47.indexOf(sep))
    var leftover48= leftover47.substring(leftover47.indexOf(sep)+1)
    var thing49   = leftover48.substring(0,leftover48.indexOf(sep))
    var leftover49= leftover48.substring(leftover48.indexOf(sep)+1)
    var thing50   = leftover49.substring(0,leftover49.indexOf(sep))
    var leftover50= leftover49.substring(leftover49.indexOf(sep)+1)
    var thing51   = leftover50.substring(0,leftover50.indexOf(sep))
    var leftover51= leftover50.substring(leftover50.indexOf(sep)+1)
    var thing52   = leftover51.substring(0,leftover51.indexOf(sep))
    var leftover52= leftover51.substring(leftover51.indexOf(sep)+1)
    var thing53   = leftover52.substring(0,leftover52.indexOf(sep))
    var leftover53= leftover52.substring(leftover52.indexOf(sep)+1)
    var thing54   = leftover53.substring(0,leftover53.indexOf(sep))
    var leftover54= leftover53.substring(leftover53.indexOf(sep)+1)
    var thing55   = leftover54.substring(0,leftover54.indexOf(sep))
    var leftover55= leftover54.substring(leftover54.indexOf(sep)+1)
    var thing56   = leftover55.substring(0,leftover55.indexOf(sep))
    var leftover56= leftover55.substring(leftover55.indexOf(sep)+1)
    var thing57   = leftover56.substring(0,leftover56.indexOf(sep))
    var leftover57= leftover56.substring(leftover56.indexOf(sep)+1)
    var thing58   = leftover57.substring(0,leftover57.indexOf(sep))
    var leftover58= leftover57.substring(leftover57.indexOf(sep)+1)
    var thing59   = leftover58.substring(0,leftover58.indexOf(sep))
    var leftover59= leftover58.substring(leftover58.indexOf(sep)+1)
    var thing60   = leftover59.substring(0,leftover59.indexOf(sep))
    var leftover60= leftover59.substring(leftover59.indexOf(sep)+1)
    var thing61   = leftover60.substring(0,leftover60.indexOf(sep))
    var leftover61= leftover60.substring(leftover60.indexOf(sep)+1)
    var thing62   = leftover61.substring(0,leftover61.indexOf(sep))
    var leftover62= leftover61.substring(leftover61.indexOf(sep)+1)
    var thing63   = leftover62.substring(0,leftover62.indexOf(sep))
    var leftover63= leftover62.substring(leftover62.indexOf(sep)+1)
    var thing64   = leftover63.substring(0,leftover63.indexOf(sep))
    var leftover64= leftover63.substring(leftover63.indexOf(sep)+1)
    var thing65   = leftover64.substring(0,leftover64.indexOf(sep))
    var leftover65= leftover64.substring(leftover64.indexOf(sep)+1)
    var thing66   = leftover65.substring(0,leftover65.indexOf(sep))
    var leftover66= leftover65.substring(leftover65.indexOf(sep)+1)
    var thing67   = leftover66.substring(0,leftover66.indexOf(sep))
    var leftover67= leftover66.substring(leftover66.indexOf(sep)+1)
    var thing68   = leftover67.substring(0,leftover67.indexOf(sep))
    var leftover68= leftover67.substring(leftover67.indexOf(sep)+1)
    var thing69   = leftover68.substring(0,leftover68.indexOf(sep))
    var leftover69= leftover68.substring(leftover68.indexOf(sep)+1)
    var thing70   = leftover69.substring(0,leftover69.indexOf(sep))
    var leftover70= leftover69.substring(leftover69.indexOf(sep)+1)
    var thing71   = leftover70.substring(0,leftover70.indexOf(sep))
    var leftover71= leftover70.substring(leftover70.indexOf(sep)+1)
    var thing72   = leftover71.substring(0,leftover71.indexOf(sep))
    var leftover72= leftover71.substring(leftover71.indexOf(sep)+1)
    var thing73   = leftover72.substring(0,leftover72.indexOf(sep))
    var leftover73= leftover72.substring(leftover72.indexOf(sep)+1)
    var thing74   = leftover73.substring(0,leftover73.indexOf(sep))
    var leftover74= leftover73.substring(leftover73.indexOf(sep)+1)
    var thing75   = leftover74.substring(0,leftover74.indexOf(sep))
    var leftover75= leftover74.substring(leftover74.indexOf(sep)+1)
    var thing76   = leftover75.substring(0,leftover75.indexOf(sep))
    var leftover76= leftover75.substring(leftover75.indexOf(sep)+1)
    var thing77   = leftover76.substring(0,leftover76.indexOf(sep))
    var leftover77= leftover76.substring(leftover76.indexOf(sep)+1)
    var thing78   = leftover77.substring(0,leftover77.indexOf(sep))
    var leftover78= leftover77.substring(leftover77.indexOf(sep)+1)
    var thing79   = leftover78.substring(0,leftover78.indexOf(sep))
    var leftover79= leftover78.substring(leftover78.indexOf(sep)+1)
    var thing80   = leftover79.substring(0,leftover79.indexOf(sep))
    var leftover80= leftover79.substring(leftover79.indexOf(sep)+1)
    var thing81   = leftover80.substring(0,leftover80.indexOf(sep))
    var leftover81= leftover80.substring(leftover80.indexOf(sep)+1)
    var thing82   = leftover81.substring(0,leftover81.indexOf(sep))
    var leftover82= leftover81.substring(leftover81.indexOf(sep)+1)
    var thing83   = leftover82.substring(0,leftover82.indexOf(sep))
    var leftover83= leftover82.substring(leftover82.indexOf(sep)+1)
    var thing84   = leftover83.substring(0,leftover83.indexOf(sep))
    var leftover84= leftover83.substring(leftover83.indexOf(sep)+1)
    var thing85   = leftover84.substring(0,leftover84.indexOf(sep))
    var leftover85= leftover84.substring(leftover84.indexOf(sep)+1)
    var thing86   = leftover85.substring(0,leftover85.indexOf(sep))
    var leftover86= leftover85.substring(leftover85.indexOf(sep)+1)
    var thing87   = leftover86.substring(0,leftover86.indexOf(sep))
    var leftover87= leftover86.substring(leftover86.indexOf(sep)+1)
    var thing88   = leftover87.substring(0,leftover87.indexOf(sep))
    var leftover88= leftover87.substring(leftover87.indexOf(sep)+1)
    var thing89   = leftover88.substring(0,leftover88.indexOf(sep))
    var leftover89= leftover88.substring(leftover88.indexOf(sep)+1)
    var thing90   = leftover89.substring(0,leftover89.indexOf(sep))
    var leftover90= leftover89.substring(leftover89.indexOf(sep)+1)
    var thing91   = leftover90.substring(0,leftover90.indexOf(sep))
    var leftover91= leftover90.substring(leftover90.indexOf(sep)+1)
    var thing92   = leftover91.substring(0,leftover91.indexOf(sep))
    var leftover92= leftover91.substring(leftover91.indexOf(sep)+1)
    var thing93   = leftover92.substring(0,leftover92.indexOf(sep))
    var leftover93= leftover92.substring(leftover92.indexOf(sep)+1)
    var thing94   = leftover93.substring(0,leftover93.indexOf(sep))
    var leftover94= leftover93.substring(leftover93.indexOf(sep)+1)
    var thing95   = leftover94.substring(0,leftover94.indexOf(sep))
    var leftover95= leftover94.substring(leftover94.indexOf(sep)+1)
    var thing96   = leftover95.substring(0,leftover95.indexOf(sep))
    var leftover96= leftover95.substring(leftover95.indexOf(sep)+1)
    var thing97   = leftover96.substring(0,leftover96.indexOf(sep))
    var leftover97= leftover96.substring(leftover96.indexOf(sep)+1)
    var thing98   = leftover97.substring(0,leftover97.indexOf(sep))
    var leftover98= leftover97.substring(leftover97.indexOf(sep)+1)
    var thing99   = leftover98.substring(0,leftover98.indexOf(sep))
    var leftover99= leftover98.substring(leftover98.indexOf(sep)+1)
    var thing100  = leftover99.substring(0,leftover99.indexOf(sep))
    var leftover100= leftover99.substring(leftover99.indexOf(sep)+1)
    var thing101   = leftover100.substring(0,leftover100.indexOf(sep))
    var leftover101= leftover100.substring(leftover100.indexOf(sep)+1)
    var thing102   = leftover101.substring(0,leftover101.indexOf(sep))
    var leftover102= leftover101.substring(leftover101.indexOf(sep)+1)
    var thing103   = leftover102.substring(0,leftover102.indexOf(sep))
    var leftover103= leftover102.substring(leftover102.indexOf(sep)+1)
    var thing104   = leftover103.substring(0,leftover103.indexOf(sep))
    var leftover104= leftover103.substring(leftover103.indexOf(sep)+1)
    var thing105   = leftover104.substring(0,leftover104.indexOf(sep))
    var leftover105= leftover104.substring(leftover104.indexOf(sep)+1)
    var thing106   = leftover105.substring(0,leftover105.indexOf(sep))
    var leftover106= leftover105.substring(leftover105.indexOf(sep)+1)
    var thing107   = leftover106.substring(0,leftover106.indexOf(sep))
    var leftover107= leftover106.substring(leftover106.indexOf(sep)+1)
    var thing108   = leftover107.substring(0,leftover107.indexOf(sep))
    var leftover108= leftover107.substring(leftover107.indexOf(sep)+1)
    var thing109   = leftover108.substring(0,leftover108.indexOf(sep))
    var leftover109= leftover108.substring(leftover108.indexOf(sep)+1)
    var thing110   = leftover109.substring(0,leftover109.indexOf(sep))
    var leftover110= leftover109.substring(leftover109.indexOf(sep)+1)
    var thing111   = leftover110.substring(0,leftover110.indexOf(sep))
    var leftover111= leftover110.substring(leftover110.indexOf(sep)+1)
    var thing112   = leftover111.substring(0,leftover111.indexOf(sep))
    var leftover112= leftover111.substring(leftover111.indexOf(sep)+1)
    var thing113   = leftover112.substring(0,leftover112.indexOf(sep))
    var leftover113= leftover112.substring(leftover112.indexOf(sep)+1)
    var thing114   = leftover113.substring(0,leftover113.indexOf(sep))
    var leftover114= leftover113.substring(leftover113.indexOf(sep)+1)
    var thing115   = leftover114.substring(0,leftover114.indexOf(sep))
    var leftover115= leftover114.substring(leftover114.indexOf(sep)+1)
    var thing116   = leftover115.substring(0,leftover115.indexOf(sep))
    var leftover116= leftover115.substring(leftover115.indexOf(sep)+1)
    var thing117   = leftover116.substring(0,leftover116.indexOf(sep))
    var leftover117= leftover116.substring(leftover116.indexOf(sep)+1)
    var thing118   = leftover117.substring(0,leftover117.indexOf(sep))
    var leftover118= leftover117.substring(leftover117.indexOf(sep)+1)
    var thing119   = leftover118.substring(0,leftover118.indexOf(sep))
    var leftover119= leftover118.substring(leftover118.indexOf(sep)+1)
    var thing120   = leftover119.substring(0,leftover119.indexOf(sep))
    var leftover120= leftover119.substring(leftover119.indexOf(sep)+1)
    var thing121   = leftover120.substring(0,leftover120.indexOf(sep))
    var leftover121= leftover120.substring(leftover120.indexOf(sep)+1)
    var thing122   = leftover121.substring(0,leftover121.indexOf(sep))
    var leftover122= leftover121.substring(leftover121.indexOf(sep)+1)
    var thing123   = leftover122.substring(0,leftover122.indexOf(sep))
    var leftover123= leftover122.substring(leftover122.indexOf(sep)+1)
    var thing124   = leftover123.substring(0,leftover123.indexOf(sep))
    var leftover124= leftover123.substring(leftover123.indexOf(sep)+1)
    var thing125   = leftover124.substring(0,leftover124.indexOf(sep))
    var leftover125= leftover124.substring(leftover124.indexOf(sep)+1)
    var thing126   = leftover125.substring(0,leftover125.indexOf(sep))
    var leftover126= leftover125.substring(leftover125.indexOf(sep)+1)
    var thing127   = leftover126.substring(0,leftover126.indexOf(sep))
    var leftover127= leftover126.substring(leftover126.indexOf(sep)+1)
    var thing128   = leftover127.substring(0,leftover127.indexOf(sep))
    var leftover128= leftover127.substring(leftover127.indexOf(sep)+1)
    var thing129   = leftover128.substring(0,leftover128.indexOf(sep))
    var leftover129= leftover128.substring(leftover128.indexOf(sep)+1)
    var thing130   = leftover129.substring(0,leftover129.indexOf(sep))
    var leftover130= leftover129.substring(leftover129.indexOf(sep)+1)
    var thing131   = leftover130.substring(0,leftover130.indexOf(sep))
    var leftover131= leftover130.substring(leftover130.indexOf(sep)+1)
    var thing132   = leftover131.substring(0,leftover131.indexOf(sep))
    var leftover132= leftover131.substring(leftover131.indexOf(sep)+1)
    var thing133   = leftover132.substring(0,leftover132.indexOf(sep))
    var leftover133= leftover132.substring(leftover132.indexOf(sep)+1)
    var thing134   = leftover133.substring(0,leftover133.indexOf(sep))
    var leftover134= leftover133.substring(leftover133.indexOf(sep)+1)
    var thing135   = leftover134.substring(0,leftover134.indexOf(sep))
    var leftover135= leftover134.substring(leftover134.indexOf(sep)+1)
    var thing136   = leftover135.substring(0,leftover135.indexOf(sep))
    var leftover136= leftover135.substring(leftover135.indexOf(sep)+1)
    var thing137   = leftover136.substring(0,leftover136.indexOf(sep))
    var leftover137= leftover136.substring(leftover136.indexOf(sep)+1)
    var thing138   = leftover137.substring(0,leftover137.indexOf(sep))
    var leftover138= leftover137.substring(leftover137.indexOf(sep)+1)
    var thing139   = leftover138.substring(0,leftover138.indexOf(sep))
    var leftover139= leftover138.substring(leftover138.indexOf(sep)+1)
    var thing140   = leftover139.substring(0,leftover139.indexOf(sep))
    var leftover140= leftover139.substring(leftover139.indexOf(sep)+1)
    var thing141   = leftover140.substring(0,leftover140.indexOf(sep))
    var leftover141= leftover140.substring(leftover140.indexOf(sep)+1)
    var thing142   = leftover141.substring(0,leftover141.indexOf(sep))
    var leftover142= leftover141.substring(leftover141.indexOf(sep)+1)
    var thing143   = leftover142.substring(0,leftover142.indexOf(sep))
    var leftover143= leftover142.substring(leftover142.indexOf(sep)+1)
    var thing144   = leftover143

    //Defines variables in localStorage according to the text file.
    localStorage['bankAccount'] = thing1;
    localStorage['totalMintage'] = thing2;
    localStorage['quantity'] = thing3;
    localStorage['binaryCoinSide'] = thing4;
    localStorage['coinCutoff'] = thing5;
    localStorage['fudgeFactor'] = thing6;
    localStorage['myLevel'] = thing7;
    localStorage['typesUnlocked'] = thing8;
    localStorage['goldenBuffaloCount'] = thing9;
    localStorage['highestSeekerLevel'] = thing10;
    localStorage['buffaloUB'] = thing11;
    localStorage['specialsCooldown'] = thing12;
    localStorage['seekerPillDuration'] = thing13;
    localStorage['seekerPillActive'] = thing14;
    localStorage['shovelNumber'] = thing15;
    localStorage['salesmanPresent'] = thing16;
    localStorage['boughtShovel'] = thing17;
    localStorage['specialIsUnlocked'] = thing18;
    localStorage['salesmanLevel'] = thing19;
    localStorage['timeSalesmanPresent'] = thing20;
    localStorage['timeSalesmanGone'] = thing21;
    localStorage['inventoryIndex'] = thing22;
    localStorage['coinRollPrepTime'] = thing23;
    localStorage['coinRollLimit'] = thing24;
    localStorage['coinRollAvail'] = thing25;
    localStorage['vacuumSearching'] = thing26;
    localStorage['vacuumReady'] = thing27;
    localStorage['vacuumCollected'] = thing28;
    localStorage['vacuumSpeed'] = thing29;
    localStorage['vacuumRotateSpeed'] = thing30;
    localStorage['totalVacuumTime'] = thing31;
    localStorage['totalVacuumRetreatTime'] = thing32;
    localStorage['coinPusherOffTime'] = thing33;
    localStorage['seekerName'] = thing34;
    localStorage['seekerLevel'] = thing35;
    localStorage['seekerFuelTimeUpgrade'] = thing36;
    localStorage['seekerCooldownUpgrade'] = thing37;
    localStorage['seekerFuelLeft'] = thing38;
    localStorage['seekerProgress'] = thing39;
    localStorage['seekerSearchesToLevel'] = thing40;
    localStorage['seekerSearches'] = thing41;
    localStorage['seekerReadyToLevel'] = thing42;
    localStorage['boughtUpgrade'] = thing43;
    localStorage['wTotal'] = thing44;
    localStorage['fTotal'] = thing45;
    localStorage['startTime'] = thing46;
    localStorage['metalDetectorStarted'] = thing47;
    localStorage['metalDetectorXFound'] = thing48;
    localStorage['metalDetectorChestFound'] = thing49;
    localStorage['startTimeRoll'] = thing50;
    localStorage['vacuumCost'] = thing51;
    localStorage['coinPusherCost'] = thing52;
    localStorage['seekerUnlocked'] = thing53;
    localStorage['seekerHired'] = thing54;
    localStorage['toggleGarbage'] = thing55;
    localStorage['specialReady'] = thing56;
    localStorage['numberPills'] = thing57;
    localStorage['itemBought'] = thing58;
    localStorage['toggleCommon'] = thing59;
    localStorage['saveTime'] = thing60;
    localStorage['pusherMaxTime'] = thing61;
    localStorage['toggleUncommon'] = thing62;
    localStorage['toggleRare'] = thing63;
    localStorage['searchNumSearches'] = thing64;
    localStorage['seekerNumSearches'] = thing65;
    localStorage['vending1NumSearches'] = thing66;
    localStorage['vending2NumSearches'] = thing67;
    localStorage['fountainNumSearches'] = thing68;
    localStorage['chestNumSearches'] = thing69;
    localStorage['vacuumNumSearches'] = thing70;
    localStorage['coinPusherNumSearches'] = thing71;
    localStorage['searchNumNew'] = thing72;
    localStorage['seekerNumNew'] = thing73;
    localStorage['vending1NumNew'] = thing74;
    localStorage['vending2NumNew'] = thing75;
    localStorage['fountainNumNew'] = thing76;
    localStorage['chestNumNew'] = thing77;
    localStorage['vacuumNumNew'] = thing78;
    localStorage['coinPusherNumNew'] = thing79;
    localStorage['seekerPillStartTime'] = thing80;
    localStorage['searchNumCoins'] = thing81;
    localStorage['seekerNumCoins'] = thing82;
    localStorage['vending1NumCoins'] = thing83;
    localStorage['vending2NumCoins'] = thing84;
    localStorage['fountainNumCoins'] = thing85;
    localStorage['chestNumCoins'] = thing86;
    localStorage['vacuumNumCoins'] = thing87;
    localStorage['coinPusherNumCoins'] = thing88;
    localStorage['seekerPrizeClaimed'] = thing89;
    localStorage['toggleReady'] = thing90;
    localStorage['goldenBuffalosFound'] = thing91;
    localStorage['duplicatesWorth'] = thing92;
    localStorage['prestigeComplete'] = thing93;
    localStorage['ascensionLevel'] = thing94;
    localStorage['typeUnlocked'] = thing95;
    localStorage['currentDescensionType'] = thing96;
    localStorage['numberDescensionsComplete'] = thing97;
    localStorage['whichEnabled'] = thing98;
    localStorage['numberMessagesUnlocked'] = thing99;
    localStorage['toggleUltraRare'] = thing100;
    localStorage['pennyRollsOpened1'] = thing101;
    localStorage['nickelRollsOpened1'] = thing102;
    localStorage['dimeRollsOpened1'] = thing103;
    localStorage['quarterRollsOpened1'] = thing104;
    localStorage['halfDollarRollsOpened1'] = thing105;
    localStorage['dollarRollsOpened1'] = thing106;
    localStorage['pennyRollsOpened2'] = thing107;
    localStorage['nickelRollsOpened2'] = thing108;
    localStorage['dimeRollsOpened2'] = thing109;
    localStorage['quarterRollsOpened2'] = thing110;
    localStorage['halfDollarRollsOpened2'] = thing111;
    localStorage['dollarRollsOpened2'] = thing112;
    localStorage['pennyRollsOpened3'] = thing113;
    localStorage['nickelRollsOpened3'] = thing114;
    localStorage['dimeRollsOpened3'] = thing115;
    localStorage['quarterRollsOpened3'] = thing116;
    localStorage['halfDollarRollsOpened3'] = thing117;
    localStorage['dollarRollsOpened3'] = thing118;
    localStorage['pennyRollsOpened4'] = thing119;
    localStorage['nickelRollsOpened4'] = thing120;
    localStorage['dimeRollsOpened4'] = thing121;
    localStorage['quarterRollsOpened4'] = thing122;
    localStorage['halfDollarRollsOpened4'] = thing123;
    localStorage['dollarRollsOpened4'] = thing124;
    localStorage['whichSpecial'] = thing125;
    localStorage['coinLoadSec'] = thing126;
    localStorage['openingDone'] = thing127;
    localStorage['achHave'] = thing128;
    localStorage['numCoinsBought'] = thing129;
    localStorage['numDupCoinsBought'] = thing130;
    localStorage['numberPillsUsed'] = thing131;
    localStorage['numberPillsBought'] = thing132;
    localStorage['pusherCollected'] = thing133;
    localStorage['feedText'] = thing134;
    localStorage['lastUpdate'] = thing135;
    localStorage['soundVol'] = thing136;
    localStorage['musicVol'] = thing137;
    localStorage['soundIsMuted'] = thing138;
    localStorage['musicIsMuted'] = thing139;
    localStorage['oldSoundLevel'] = thing140;
    localStorage['oldMusicLevel'] = thing141;
    localStorage['toggleAutoSellDups'] = thing142;
    localStorage['toggleAutoBuyRolls'] = thing143;
    localStorage['toggleHypnotic'] = thing144;

    location.reload();
    initialize(true);
    location.reload();
  }
  document.getElementById("restoreFile").files[0] = "undefined"
}

function openResetWindow() {
  if (document.getElementById("resetWindow").style.display == "none") {
    document.getElementById('confirmText').value = ''
    document.getElementById("resetWindow").style.display = ""
  }
  else {
    document.getElementById("resetWindow").style.display = "none"
  }
  if (document.getElementById("restoreWindow").style.display == "") {
    document.getElementById("restoreWindow").style.display = "none"
  }
}

function resetGame() { //Make sure specialsCooldown is right
  if (document.getElementById("confirmText").value == "confirm") {
    bankAccount = 0
    collectionFace = 0
    collectionWorth = 0
    quantity = Array(2298).fill(0)
    binaryCoinSide = Array(2298).fill(0)
    searchPower = 1
    seekerPower = 0.5 //5 for each level in all-time maximum seeker level
    vendingMachinePower = 250
    fountainPower = 10000 //~100 coins per click, want it to scale up some every level
    chestPower = 10000 //~175 coins per click
    vacuumPower = 8000
    coinCutoff = coinCutoffVector[1]
    a = Array(2298).fill(0) //Upper bound on uniform distibution U[0,a] for your searches
    b = Array(2298).fill(0) //Upper bound on uniform distibution U[0,b] for seeker searches
    v = Array(2298).fill(0) //Upper bound on uniform distibution U[0,v] for vending machine collection
    f = Array(2298).fill(0) //Upper bound on uniform distibution U[0,f] for fountain collection
    c = Array(2298).fill(0) //Upper bound on uniform distibution U[0,c] for chest opening
    vac = Array(2298).fill(0) //Upper bound on uniform distibution U[0,vac] for coin vacuum collection
    cp = Array(2298).fill(0) //Upper bound on uniform distibution U[0,cp] for coin pusher collection
    getNoneA = 1
    getNoneB = 1
    getSomethingA = 1
    getSomethingB = 1
    for (let i = 1; i <= coinCutoff; i++) {
      a[i] = 1 + searchPower * probability[i] * fudgeFactor
      b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed //fixed fudge factor for seekers
      getNoneA /= a[i]
      getNoneB /= b[i]
    }
    getSomethingA = 1 - getNoneA
    getSomethingB = 1 - getNoneB
    bankAccountIncrease = 0
    collectionFaceDecrease = 0
    collectionWorthDecrease = 0
    typeCount = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
    sumOverX = [0,0,0,0,0,0,0] //How many unique pennies, nickels, dimes, etc. you have
    sumOverY = [0,0,0,0,0] //How many unique commons, uncommons, rares, ultra rares you have
    grandTotalCount = 0
    grandTotalPct = 0
    typePct = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
    rarityTotal = [0,0,0,0,0]
    denomTotal = [0,0,0,0,0,0,0]
    myLevel = 1
    expRatio = 0
    expPct = 0
    countCurrentLvl = 0
    seekerUnlocked = [0,0,0,0,0,0,0,0,0]
    seekerHired = [0,0,0,0,0,0,0,0,0]
    typesUnlocked = [0,1,0,0,0,0,0]
    goldenBuffaloCount = 0
    highestSeekerLevel = 1
    buffaloUB = 1
    startTime = [0,0,0,0,0,0,0,0,0,0]
    startTime[9] = Date.now()
    specialsCooldown = [0,1800,1800,3600,300,0,7200,43200,10800,10]
          //Official = [0,1800,1800,3600,300,0,7200,43200,10800,10]
    seekerPillStartTime = 0
    seekerPillDuration = 30  //Default: 30 seconds
    seekerPillActive = 0
    shovelNumber = 0
    myRef = function(){}
    salesmanPresent = false
    boughtShovel = false
    shopIsOpen = false
    specialIsUnlocked = [0,false,false,false,false,false,false,false,false,false,false]
    salesmanLevel = 1
    timeSalesmanPresent = 600 //600 for 10 min
    timeSalesmanGone = 3000 //3000 for 50 min
    inventoryIndex = [1,1,1,1]
    bankIsOpen = false
    coinRollPrepTime = [0,1800,2400,2100,1800,7200,9000]
                     //[0,1800,2400,2100,1800,7200,9000]
    coinRollLimit = [0,3,3,3,3,1,1]
    coinRollAvail = [0,0,0,0,0,0,0]
    L = -15
    T = 20
    vacuumSearching = false
    vacuumReady = false
    vacuumCollected = false
    vacuumSpeed = 5 //Default: 5
    vacuumRotateSpeed = 50 //Default: 50
    degree = 0
    totalVacuumTime = 0
    totalVacuumRetreatTime = 0
    time1 = 105 / vacuumSpeed //going right
    time2 = time1 + 90 / vacuumRotateSpeed //rotating down
    time3 = time2 + 10 / vacuumSpeed //going down
    time4 = time3 + 90 / vacuumRotateSpeed //rotating left
    time5 = time4 + 90 / vacuumSpeed //going left
    time6 = time5 + 90 / vacuumRotateSpeed //rotating down
    time7 = time6 + 10 / vacuumSpeed //going down
    time8 = time7 + 90 / vacuumRotateSpeed //rotating right
    time9 = time8 + 90 / vacuumSpeed //going right
    time10 = time9 + 90 / vacuumRotateSpeed //rotating down
    time11 = time10 + 10 / vacuumSpeed //going down
    time12 = time11 + 90 / vacuumRotateSpeed //rotating left
    time13 = time12 + 90 / vacuumSpeed //going left
    time14 = time13 + 90 / vacuumRotateSpeed //rotating down
    time15 = time14 + 10 / vacuumSpeed //going down
    time16 = time15 + 90 / vacuumRotateSpeed //rotating right
    time17 = time16 + 90 / vacuumSpeed //going right
    time18 = time17 + 90 / vacuumRotateSpeed //rotating down
    time19 = time18 + 10 / vacuumSpeed //going down
    time20 = time19 + 90 / vacuumRotateSpeed //rotating left
    time21 = time20 + 90 / vacuumSpeed //going left
    time22 = time21 + 90 / vacuumRotateSpeed //rotating up
    time23 = time22 + 25 / vacuumSpeed //going up halfway
    time24 = time23 + 90 / vacuumRotateSpeed //rotating right
    time25 = time24 + 47 / vacuumSpeed //going right halfway
    retreatTime1 = 180 / (2 * vacuumRotateSpeed) //rotating 180 to the left at twice the rotation speed
    retreatTime2 = retreatTime1 + 62 / vacuumSpeed //going left and disappearing
    for (let i = 1; i <= feedCount; i++) {
      document.getElementById("feedDiv"+i).innerHTML = ""
    }
    seekerName = ["","","","","","","","",""]
    for (let i = 2; i < 101; i++) {
      document.getElementById("lvl"+i+"Upgrade").querySelector("#lvl"+i+"Upgrade :nth-child(3)").innerHTML = "$" + lvlUpgradeCost[i].toFixed(2)
    }
    seekerLevel = [0,1,1,1,1,1,1,1,1]
    seekerFuelTimeUpgrade = 1
    seekerCooldownUpgrade = 1
    seekerFuelLeft = [0,0,0,0,0,0,0,0,0]
    seekerProgress = [0,0,0,0,0,0,0,0,0]
    seekerSearchesToLevel = [0,40,40,40,40,40,40,40,40]
    seekerSearches = [0,0,0,0,0,0,0,0,0]
    seekerReadyToLevel = [0,0,0,0,0,0,0,0,0]
    boughtUpgrade = Array(101).fill(0)
    wTotal = [0,0,0,0,0,0,0,0,0]
    fTotal = [0,0,0,0,0,0,0,0,0]
    metalDetectorStarted = 0 //Might not need
    metalDetectorXFound = 0 //Might not need
    metalDetectorChestFound = 0 //Might not need
    coinRollProgress = [0,0,0,0,0,0,0]
    vacuumCost = 25
    coinPusherCost = 10
    toggleGarbage = false
    specialReady = [0,0,0,0,0,0,0,0,0,0]
    numberSpecialsReady = 0
    numberPills = 10
    extraSeekerFactor = 1
    itemBought = [0,0,0,0]
    toggleCommon = false
    saveTime = 0
    loadTime = 0
    pusherReady = 1
    pusherCollected = Date.now()
    pusherMaxTime = 3600
    toggleUncommon = false
    toggleRare = false
    toggleUltraRare = false
    searchNumSearches = 0
    seekerNumSearches = 0
    vending1NumSearches = 0
    vending2NumSearches = 0
    fountainNumSearches = 0
    chestNumSearches = 0
    vacuumNumSearches = 0
    coinPusherNumSearches = 0
    searchNumNew = 0
    seekerNumNew = 0
    vending1NumNew = 0
    vending2NumNew = 0
    fountainNumNew = 0
    chestNumNew = 0
    vacuumNumNew = 0
    coinPusherNumNew = 0
    searchNumCoins = 0
    seekerNumCoins = 0
    vending1NumCoins = 0
    vending2NumCoins = 0
    fountainNumCoins = 0
    chestNumCoins = 0
    vacuumNumCoins = 0
    coinPusherNumCoins = 0
    searchNumSearchesThis = 0
    seekerNumSearchesThis = 0
    vending1NumSearchesThis = 0
    vending2NumSearchesThis = 0
    fountainNumSearchesThis = 0
    chestNumSearchesThis = 0
    vacuumNumSearchesThis = 0
    coinPusherNumSearchesThis = 0
    searchNumCoinsThis = 0
    seekerNumCoinsThis = 0
    vending1NumCoinsThis = 0
    vending2NumCoinsThis = 0
    fountainNumCoinsThis = 0
    chestNumCoinsThis = 0
    vacuumNumCoinsThis = 0
    coinPusherNumCoinsThis = 0
    searchNumNewThis = 0
    seekerNumNewThis = 0
    vending1NumNewThis = 0
    vending2NumNewThis = 0
    fountainNumNewThis = 0
    chestNumNewThis = 0
    vacuumNumNewThis = 0
    coinPusherNumNewThis = 0
    seekerPrizeClaimed = 0
    toggleReady = ["",true,true,true,true,true,true,true,true,true]
    numberMessagesUnlocked = 1
    goldenBuffalosFound = 0
    duplicatesWorth = 0
    prestigeComplete = false
    ascensionLevel = 0
    typeUnlocked = [0,0,0,0,0,0,0,0,0,0]
    currentDescensionType = 0
    numberDescensionsComplete = [0,-1,-1,-1,-1,-1,-1,-1,-1,-1]
    whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    pennyRollsOpened1 = 0
    nickelRollsOpened1 = 0
    dimeRollsOpened1 = 0
    quarterRollsOpened1 = 0
    halfDollarRollsOpened1 = 0
    dollarRollsOpened1 = 0
    pennyRollsOpened2 = 0
    nickelRollsOpened2 = 0
    dimeRollsOpened2 = 0
    quarterRollsOpened2 = 0
    halfDollarRollsOpened2 = 0
    dollarRollsOpened2 = 0
    pennyRollsOpened3 = 0
    nickelRollsOpened3 = 0
    dimeRollsOpened3 = 0
    quarterRollsOpened3 = 0
    halfDollarRollsOpened3 = 0
    dollarRollsOpened3 = 0
    pennyRollsOpened4 = 0
    nickelRollsOpened4 = 0
    dimeRollsOpened4 = 0
    quarterRollsOpened4 = 0
    halfDollarRollsOpened4 = 0
    dollarRollsOpened4 = 0
    whichSpecial = 0
    coinLoadSec = 10
    openingDone = false
    achHave = Array(numAch+1).fill(0)
    numCoinsBought = 0
    numDupCoinsBought = 0
    numberPillsUsed = 0
    numberPillsBought = 0
    feedText = Array(feedCount+1).fill("")
    lastUpdate = Date.now()
    soundVol = 50
    musicVol = 50
    soundIsMuted = false
    musicIsMuted = false
    oldSoundLevel = 50
    oldMusicLevel = 50
    toggleAutoSellDups = false
    toggleAutoBuyRolls = false
    toggleHypnotic = true

    localStorage['bankAccount'] = "";
    localStorage['totalMintage'] = "";
    localStorage['quantity'] = "";
    localStorage['binaryCoinSide'] = "";
    localStorage['coinCutoff'] = "";
    localStorage['fudgeFactor'] = "";
    localStorage['myLevel'] = "";
    localStorage['typesUnlocked'] = "";
    localStorage['goldenBuffaloCount'] = "";
    localStorage['highestSeekerLevel'] = "";
    localStorage['buffaloUB'] = "";
    localStorage['specialsCooldown'] = "";
    localStorage['seekerPillDuration'] = "";
    localStorage['seekerPillActive'] = "";
    localStorage['shovelNumber'] = "";
    localStorage['salesmanPresent'] = "";
    localStorage['boughtShovel'] = "";
    localStorage['specialIsUnlocked'] = "";
    localStorage['salesmanLevel'] = "";
    localStorage['timeSalesmanPresent'] = "";
    localStorage['timeSalesmanGone'] = "";
    localStorage['inventoryIndex'] = "";
    localStorage['coinRollPrepTime'] = "";
    localStorage['coinRollLimit'] = "";
    localStorage['coinRollAvail'] = "";
    localStorage['vacuumSearching'] = "";
    localStorage['vacuumReady'] = "";
    localStorage['vacuumCollected'] = "";
    localStorage['vacuumSpeed'] = "";
    localStorage['vacuumRotateSpeed'] = "";
    localStorage['totalVacuumTime'] = "";
    localStorage['totalVacuumRetreatTime'] = "";
    localStorage['coinPusherOffTime'] = "";
    localStorage['seekerName'] = "";
    localStorage['seekerLevel'] = "";
    localStorage['seekerFuelTimeUpgrade'] = "";
    localStorage['seekerCooldownUpgrade'] = "";
    localStorage['seekerFuelLeft'] = "";
    localStorage['seekerProgress'] = "";
    localStorage['seekerSearchesToLevel'] = "";
    localStorage['seekerSearches'] = "";
    localStorage['seekerReadyToLevel'] = "";
    localStorage['boughtUpgrade'] = "";
    localStorage['wTotal'] = "";
    localStorage['fTotal'] = "";
    localStorage['startTime'] = "";
    localStorage['metalDetectorStarted'] = "";
    localStorage['metalDetectorXFound'] = "";
    localStorage['metalDetectorChestFound'] = "";
    localStorage['startTimeRoll'] = "";
    localStorage['vacuumCost'] = "";
    localStorage['coinPusherCost'] = "";
    localStorage['toggleGarbage'] = "";
    localStorage['specialReady'] = "";
    localStorage['numberPills'] = "";
    localStorage['itemBought'] = "";
    localStorage['toggleCommon'] = "";
    localStorage['saveTime'] = "";
    localStorage['pusherMaxTime'] = "";
    localStorage['toggleUncommon'] = "";
    localStorage['toggleRare'] = "";
    localStorage['searchNumSearches'] = "";
    localStorage['seekerNumSearches'] = "";
    localStorage['vending1NumSearches'] = "";
    localStorage['vending2NumSearches'] = "";
    localStorage['fountainNumSearches'] = "";
    localStorage['chestNumSearches'] = "";
    localStorage['vacuumNumSearches'] = "";
    localStorage['coinPusherNumSearches'] = "";
    localStorage['searchNumNew'] = "";
    localStorage['seekerNumNew'] = "";
    localStorage['vending1NumNew'] = "";
    localStorage['vending2NumNew'] = "";
    localStorage['fountainNumNew'] = "";
    localStorage['chestNumNew'] = "";
    localStorage['vacuumNumNew'] = "";
    localStorage['coinPusherNumNew'] = "";
    localStorage['seekerPillStartTime'] = "";
    localStorage['searchNumCoins'] = "";
    localStorage['seekerNumCoins'] = "";
    localStorage['vending1NumCoins'] = "";
    localStorage['vending2NumCoins'] = "";
    localStorage['fountainNumCoins'] = "";
    localStorage['chestNumCoins'] = "";
    localStorage['vacuumNumCoins'] = "";
    localStorage['coinPusherNumCoins'] = "";
    localStorage['seekerPrizeClaimed'] = "";
    localStorage['toggleReady'] = "";
    localStorage['goldenBuffalosFound'] = "";
    localStorage['duplicatesWorth'] = "";
    localStorage['prestigeComplete'] = "";
    localStorage['ascensionLevel'] = "";
    localStorage['typeUnlocked'] = "";
    localStorage['currentDescensionType'] = "";
    localStorage['numberDescensionsComplete'] = "";
    localStorage['whichEnabled'] = "";
    localStorage['numberMessagesUnlocked'] = "";
    localStorage['pennyRollsOpened1'] = "";
    localStorage['nickelRollsOpened1'] = "";
    localStorage['dimeRollsOpened1'] = "";
    localStorage['quarterRollsOpened1'] = "";
    localStorage['halfDollarRollsOpened1'] = "";
    localStorage['dollarRollsOpened1'] = "";
    localStorage['pennyRollsOpened2'] = "";
    localStorage['nickelRollsOpened2'] = "";
    localStorage['dimeRollsOpened2'] = "";
    localStorage['quarterRollsOpened2'] = "";
    localStorage['halfDollarRollsOpened2'] = "";
    localStorage['dollarRollsOpened2'] = "";
    localStorage['pennyRollsOpened3'] = "";
    localStorage['nickelRollsOpened3'] = "";
    localStorage['dimeRollsOpened3'] = "";
    localStorage['quarterRollsOpened3'] = "";
    localStorage['halfDollarRollsOpened3'] = "";
    localStorage['dollarRollsOpened3'] = "";
    localStorage['pennyRollsOpened4'] = "";
    localStorage['nickelRollsOpened4'] = "";
    localStorage['dimeRollsOpened4'] = "";
    localStorage['quarterRollsOpened4'] = "";
    localStorage['halfDollarRollsOpened4'] = "";
    localStorage['dollarRollsOpened4'] = "";
    localStorage['whichSpecial'] = "";
    localStorage['coinLoadSec'] = "";
    localStorage['openingDone'] = "";
    localStorage['achHave'] = "";
    localStorage['numCoinsBought'] = "";
    localStorage['numDupCoinsBought'] = "";
    localStorage['numberPillsUsed'] = "";
    localStorage['numberPillsBought'] = "";
    localStorage['feedText'] = "";
    localStorage['lastUpdate'] = "";
    localStorage['soundVol'] = "";
    localStorage['musicVol'] = "";
    localStorage['soundIsMuted'] = "";
    localStorage['musicIsMuted'] = "";
    localStorage['oldSoundLevel'] = "";
    localStorage['oldMusicLevel'] = "";
    localStorage['toggleAutoSellDups'] = "";
    localStorage['toggleAutoBuyRolls'] = "";
    localStorage['toggleHypnotic'] = "";

    location.reload();
    initialize(false);
  }
}

function initialize(loading) {
  if (localStorage['bankAccount'] != "" && localStorage['bankAccount'] != null) { //Load variables from localStorage
    bankAccount = JSON.parse(decodeString(localStorage['bankAccount']));
    totalMintage = JSON.parse(decodeString(localStorage['totalMintage']));
    quantity = JSON.parse(decodeString(localStorage['quantity']));
    binaryCoinSide = JSON.parse(decodeString(localStorage['binaryCoinSide']));
    coinCutoff = JSON.parse(decodeString(localStorage['coinCutoff']));
    myLevel = JSON.parse(decodeString(localStorage['myLevel']));
    typesUnlocked = JSON.parse(decodeString(localStorage['typesUnlocked']));
    goldenBuffaloCount = JSON.parse(decodeString(localStorage['goldenBuffaloCount']));
    highestSeekerLevel = JSON.parse(decodeString(localStorage['highestSeekerLevel']));
    buffaloUB = JSON.parse(decodeString(localStorage['buffaloUB']));
    seekerPillDuration = JSON.parse(decodeString(localStorage['seekerPillDuration']));
    seekerPillActive = JSON.parse(decodeString(localStorage['seekerPillActive']));
    shovelNumber = JSON.parse(decodeString(localStorage['shovelNumber']));
    salesmanPresent = JSON.parse(decodeString(localStorage['salesmanPresent']));
    boughtShovel = JSON.parse(decodeString(localStorage['boughtShovel']));
    specialIsUnlocked = JSON.parse(decodeString(localStorage['specialIsUnlocked']));
    salesmanLevel = JSON.parse(decodeString(localStorage['salesmanLevel']));
    timeSalesmanPresent = JSON.parse(decodeString(localStorage['timeSalesmanPresent']));
    timeSalesmanGone = JSON.parse(decodeString(localStorage['timeSalesmanGone']));
    inventoryIndex = JSON.parse(decodeString(localStorage['inventoryIndex']));
    coinRollPrepTime = JSON.parse(decodeString(localStorage['coinRollPrepTime']));
    coinRollLimit = JSON.parse(decodeString(localStorage['coinRollLimit']));
    coinRollAvail = JSON.parse(decodeString(localStorage['coinRollAvail']));
    vacuumSearching = JSON.parse(decodeString(localStorage['vacuumSearching']));
    vacuumReady = JSON.parse(decodeString(localStorage['vacuumReady']));
    vacuumCollected = JSON.parse(decodeString(localStorage['vacuumCollected']));
    vacuumSpeed = JSON.parse(decodeString(localStorage['vacuumSpeed']));
    vacuumRotateSpeed = JSON.parse(decodeString(localStorage['vacuumRotateSpeed']));
    totalVacuumTime = JSON.parse(decodeString(localStorage['totalVacuumTime']));
    totalVacuumRetreatTime = JSON.parse(decodeString(localStorage['totalVacuumRetreatTime']));
    coinPusherOffTime = JSON.parse(decodeString(localStorage['coinPusherOffTime']));
    seekerName = JSON.parse(decodeString(localStorage['seekerName']));
    seekerLevel = JSON.parse(decodeString(localStorage['seekerLevel']));
    seekerFuelTimeUpgrade = JSON.parse(decodeString(localStorage['seekerFuelTimeUpgrade']));
    seekerCooldownUpgrade = JSON.parse(decodeString(localStorage['seekerCooldownUpgrade']));
    seekerFuelLeft = JSON.parse(decodeString(localStorage['seekerFuelLeft']));
    seekerProgress = JSON.parse(decodeString(localStorage['seekerProgress']));
    seekerSearchesToLevel = JSON.parse(decodeString(localStorage['seekerSearchesToLevel']));
    seekerSearches = JSON.parse(decodeString(localStorage['seekerSearches']));
    seekerReadyToLevel = JSON.parse(decodeString(localStorage['seekerReadyToLevel']));
    boughtUpgrade = JSON.parse(decodeString(localStorage['boughtUpgrade']));
    wTotal = JSON.parse(decodeString(localStorage['wTotal']));
    fTotal = JSON.parse(decodeString(localStorage['fTotal']));
    startTime = JSON.parse(decodeString(localStorage['startTime']));
    metalDetectorStarted = JSON.parse(decodeString(localStorage['metalDetectorStarted']));
    metalDetectorXFound = JSON.parse(decodeString(localStorage['metalDetectorXFound']));
    metalDetectorChestFound = JSON.parse(decodeString(localStorage['metalDetectorChestFound']));
    startTimeRoll = JSON.parse(decodeString(localStorage['startTimeRoll']));
    vacuumCost = JSON.parse(decodeString(localStorage['vacuumCost']));
    coinPusherCost = JSON.parse(decodeString(localStorage['coinPusherCost']));
    seekerUnlocked = JSON.parse(decodeString(localStorage['seekerUnlocked']));
    seekerHired = JSON.parse(decodeString(localStorage['seekerHired']));
    toggleGarbage = JSON.parse(decodeString(localStorage['toggleGarbage']));
    specialReady = JSON.parse(decodeString(localStorage['specialReady']));
    numberPills = JSON.parse(decodeString(localStorage['numberPills']));
    itemBought = JSON.parse(decodeString(localStorage['itemBought']));
    toggleCommon = JSON.parse(decodeString(localStorage['toggleCommon']));
    saveTime = JSON.parse(decodeString(localStorage['saveTime']))
    pusherMaxTime = JSON.parse(decodeString(localStorage['pusherMaxTime']))
    toggleUncommon = JSON.parse(decodeString(localStorage['toggleUncommon']));
    toggleRare = JSON.parse(decodeString(localStorage['toggleRare']));
    searchNumSearches = JSON.parse(decodeString(localStorage['searchNumSearches']));
    seekerNumSearches = JSON.parse(decodeString(localStorage['seekerNumSearches']));
    vending1NumSearches = JSON.parse(decodeString(localStorage['vending1NumSearches']));
    vending2NumSearches = JSON.parse(decodeString(localStorage['vending2NumSearches']));
    fountainNumSearches = JSON.parse(decodeString(localStorage['fountainNumSearches']));
    chestNumSearches = JSON.parse(decodeString(localStorage['chestNumSearches']));
    vacuumNumSearches = JSON.parse(decodeString(localStorage['vacuumNumSearches']));
    coinPusherNumSearches = JSON.parse(decodeString(localStorage['coinPusherNumSearches']));
    searchNumNew = JSON.parse(decodeString(localStorage['searchNumNew']));
    seekerNumNew = JSON.parse(decodeString(localStorage['seekerNumNew']));
    vending1NumNew = JSON.parse(decodeString(localStorage['vending1NumNew']));
    vending2NumNew = JSON.parse(decodeString(localStorage['vending2NumNew']));
    fountainNumNew = JSON.parse(decodeString(localStorage['fountainNumNew']));
    chestNumNew = JSON.parse(decodeString(localStorage['chestNumNew']));
    vacuumNumNew = JSON.parse(decodeString(localStorage['vacuumNumNew']));
    coinPusherNumNew = JSON.parse(decodeString(localStorage['coinPusherNumNew']));
    seekerPillStartTime = JSON.parse(decodeString(localStorage['seekerPillStartTime']));
    searchNumCoins = JSON.parse(decodeString(localStorage['searchNumCoins']));
    seekerNumCoins = JSON.parse(decodeString(localStorage['seekerNumCoins']));
    vending1NumCoins = JSON.parse(decodeString(localStorage['vending1NumCoins']));
    vending2NumCoins = JSON.parse(decodeString(localStorage['vending2NumCoins']));
    fountainNumCoins = JSON.parse(decodeString(localStorage['fountainNumCoins']));
    chestNumCoins = JSON.parse(decodeString(localStorage['chestNumCoins']));
    vacuumNumCoins = JSON.parse(decodeString(localStorage['vacuumNumCoins']));
    coinPusherNumCoins = JSON.parse(decodeString(localStorage['coinPusherNumCoins']));
    seekerPrizeClaimed = JSON.parse(decodeString(localStorage['seekerPrizeClaimed']));
    toggleReady = JSON.parse(decodeString(localStorage['toggleReady']));
    goldenBuffalosFound = JSON.parse(decodeString(localStorage['goldenBuffalosFound']));
    duplicatesWorth = JSON.parse(decodeString(localStorage['duplicatesWorth']));
    prestigeComplete = JSON.parse(decodeString(localStorage['prestigeComplete']));
    ascensionLevel = JSON.parse(decodeString(localStorage['ascensionLevel']));
    typeUnlocked = JSON.parse(decodeString(localStorage['typeUnlocked']));
    currentDescensionType = JSON.parse(decodeString(localStorage['currentDescensionType']));
    numberDescensionsComplete = JSON.parse(decodeString(localStorage['numberDescensionsComplete']));
    whichEnabled = JSON.parse(decodeString(localStorage['whichEnabled']));
    numberMessagesUnlocked = JSON.parse(decodeString(localStorage['numberMessagesUnlocked']));
    toggleUltraRare = JSON.parse(decodeString(localStorage['toggleUltraRare']));
    pennyRollsOpened1 = JSON.parse(decodeString(localStorage['pennyRollsOpened1']));
    nickelRollsOpened1 = JSON.parse(decodeString(localStorage['nickelRollsOpened1']));
    dimeRollsOpened1 = JSON.parse(decodeString(localStorage['dimeRollsOpened1']));
    quarterRollsOpened1 = JSON.parse(decodeString(localStorage['quarterRollsOpened1']));
    halfDollarRollsOpened1 = JSON.parse(decodeString(localStorage['halfDollarRollsOpened1']));
    dollarRollsOpened1 = JSON.parse(decodeString(localStorage['dollarRollsOpened1']));
    pennyRollsOpened2 = JSON.parse(decodeString(localStorage['pennyRollsOpened2']));
    nickelRollsOpened2 = JSON.parse(decodeString(localStorage['nickelRollsOpened2']));
    dimeRollsOpened2 = JSON.parse(decodeString(localStorage['dimeRollsOpened2']));
    quarterRollsOpened2 = JSON.parse(decodeString(localStorage['quarterRollsOpened2']));
    halfDollarRollsOpened2 = JSON.parse(decodeString(localStorage['halfDollarRollsOpened2']));
    dollarRollsOpened2 = JSON.parse(decodeString(localStorage['dollarRollsOpened2']));
    pennyRollsOpened3 = JSON.parse(decodeString(localStorage['pennyRollsOpened3']));
    nickelRollsOpened3 = JSON.parse(decodeString(localStorage['nickelRollsOpened3']));
    dimeRollsOpened3 = JSON.parse(decodeString(localStorage['dimeRollsOpened3']));
    quarterRollsOpened3 = JSON.parse(decodeString(localStorage['quarterRollsOpened3']));
    halfDollarRollsOpened3 = JSON.parse(decodeString(localStorage['halfDollarRollsOpened3']));
    dollarRollsOpened3 = JSON.parse(decodeString(localStorage['dollarRollsOpened3']));
    pennyRollsOpened4 = JSON.parse(decodeString(localStorage['pennyRollsOpened4']));
    nickelRollsOpened4 = JSON.parse(decodeString(localStorage['nickelRollsOpened4']));
    dimeRollsOpened4 = JSON.parse(decodeString(localStorage['dimeRollsOpened4']));
    quarterRollsOpened4 = JSON.parse(decodeString(localStorage['quarterRollsOpened4']));
    halfDollarRollsOpened4 = JSON.parse(decodeString(localStorage['halfDollarRollsOpened4']));
    dollarRollsOpened4 = JSON.parse(decodeString(localStorage['dollarRollsOpened4']));
    whichSpecial = JSON.parse(decodeString(localStorage['whichSpecial']));
    coinLoadSec = JSON.parse(decodeString(localStorage['coinLoadSec']));
    openingDone = JSON.parse(decodeString(localStorage['openingDone']));
    achHave = JSON.parse(decodeString(localStorage['achHave']));
    numCoinsBought = JSON.parse(decodeString(localStorage['numCoinsBought']));
    numDupCoinsBought = JSON.parse(decodeString(localStorage['numDupCoinsBought']));
    numberPillsUsed = JSON.parse(decodeString(localStorage['numberPillsUsed']));
    numberPillsBought = JSON.parse(decodeString(localStorage['numberPillsBought']));
    pusherCollected = JSON.parse(decodeString(localStorage['pusherCollected']));
    feedText = JSON.parse(decodeString(localStorage['feedText']));
    lastUpdate = JSON.parse(decodeString(localStorage['lastUpdate']));
    soundVol = JSON.parse(decodeString(localStorage['soundVol']));
    musicVol = JSON.parse(decodeString(localStorage['musicVol']));
    soundIsMuted = JSON.parse(decodeString(localStorage['soundIsMuted']));
    musicIsMuted = JSON.parse(decodeString(localStorage['musicIsMuted']));
    oldSoundLevel = JSON.parse(decodeString(localStorage['oldSoundLevel']));
    oldMusicLevel = JSON.parse(decodeString(localStorage['oldMusicLevel']));
    toggleAutoSellDups = JSON.parse(decodeString(localStorage['toggleAutoSellDups']));
    toggleAutoBuyRolls = JSON.parse(decodeString(localStorage['toggleAutoBuyRolls']));
    toggleHypnotic = JSON.parse(decodeString(localStorage['toggleHypnotic']));


    document.getElementById("soundVolume").value = soundVol
    achievementSound.volume = soundVol / 100
    shovelSound.volume = soundVol / 100
    levelUpSound.volume = soundVol / 100
    document.getElementById("musicVolume").value = musicVol
    music.volume = musicVol / 100
    if (soundIsMuted == true) {
      document.getElementById("soundMuteButton").style.background = "url('soundOff.png')"
      document.getElementById("soundMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
      document.getElementById("soundMuteButton").style.backgroundSize = "contain"
      document.getElementById("soundMuteButton").style.backgroundRepeat = "no-repeat"
      document.getElementById("soundMuteButton").style.backgroundPositionX = "center"
      document.getElementById("soundMuteButton").style.backgroundPositionY = "center"
    }
    if (musicIsMuted == true) {
      document.getElementById("musicMuteButton").style.background = "url('musicOff.png')"
      document.getElementById("musicMuteButton").style.backgroundColor = "rgb(255, 154, 154)"
      document.getElementById("musicMuteButton").style.backgroundSize = "contain"
      document.getElementById("musicMuteButton").style.backgroundRepeat = "no-repeat"
      document.getElementById("musicMuteButton").style.backgroundPositionX = "center"
      document.getElementById("musicMuteButton").style.backgroundPositionY = "center"
    }

    if (prestigeComplete == false && ((currentDescensionType == 2 && numberDescensionsComplete[2] == 7)
        || (currentDescensionType == 8 && numberDescensionsComplete[8] == 7))) {
      seekerUnlocked[6] = 0
      seekerUnlocked[7] = 0
      seekerHired[6] = 0
      seekerHired[7] = 0
    }
    else if (prestigeComplete == false && ((currentDescensionType == 2 && numberDescensionsComplete[2] == 8)
        || (currentDescensionType == 8 && numberDescensionsComplete[8] == 8))) {
      seekerUnlocked[4] = 0
      seekerUnlocked[5] = 0
      seekerUnlocked[6] = 0
      seekerUnlocked[7] = 0
      seekerHired[4] = 0
      seekerHired[5] = 0
      seekerHired[6] = 0
      seekerHired[7] = 0
    }
    else if (prestigeComplete == false && ((currentDescensionType == 2 && numberDescensionsComplete[2] == 9)
        || (currentDescensionType == 8 && numberDescensionsComplete[8] == 9))) {
      seekerUnlocked[2] = 0
      seekerUnlocked[3] = 0
      seekerUnlocked[4] = 0
      seekerUnlocked[5] = 0
      seekerUnlocked[6] = 0
      seekerUnlocked[7] = 0
      seekerHired[2] = 0
      seekerHired[3] = 0
      seekerHired[4] = 0
      seekerHired[5] = 0
      seekerHired[6] = 0
      seekerHired[7] = 0
    }

    if (openingDone == true) {
      document.getElementById("gridContainer").style.display = "grid"
    }
    else {
      document.getElementById("openingDiv").style.display = "block"
    }

    //Base values for powers
    searchPower = 1 * 1.1 ** ascensionLevel
    extraSeekerFactor = 1.1 ** ascensionLevel
    if (seekerPrizeClaimed == 1) {
      extraSeekerFactor *= 5
    }
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    } //Then later, all the upgrades are bought
    vendingMachinePower = 250 * 1.1 ** ascensionLevel
    fountainPower = 10000 * 1.1 ** ascensionLevel
    chestPower = 10000 * 1.1 ** ascensionLevel
    vacuumPower = 8000 * 1.1 ** ascensionLevel

    if (loading == true) { //If you are loading a backup file, need to adjust timers back to what they were at time of save      
      loadTime = Date.now()
      var timeSince = loadTime - saveTime
      for (let i = 1; i <= 9; i++) {
        startTime[i] += timeSince
      }
      for (let i = 1; i <= 6; i++) {
        startTimeRoll[i] += timeSince
      }
      seekerPillStartTime += timeSince

      catchUp = false
    }

    remainingTime[6] = 100
    remainingTime[9] = 1
  }
  typeCount = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]

  time1 = 105 / vacuumSpeed //going right
  time2 = time1 + 90 / vacuumRotateSpeed //rotating down
  time3 = time2 + 10 / vacuumSpeed //going down
  time4 = time3 + 90 / vacuumRotateSpeed //rotating left
  time5 = time4 + 90 / vacuumSpeed //going left
  time6 = time5 + 90 / vacuumRotateSpeed //rotating down
  time7 = time6 + 10 / vacuumSpeed //going down
  time8 = time7 + 90 / vacuumRotateSpeed //rotating right
  time9 = time8 + 90 / vacuumSpeed //going right
  time10 = time9 + 90 / vacuumRotateSpeed //rotating down
  time11 = time10 + 10 / vacuumSpeed //going down
  time12 = time11 + 90 / vacuumRotateSpeed //rotating left
  time13 = time12 + 90 / vacuumSpeed //going left
  time14 = time13 + 90 / vacuumRotateSpeed //rotating down
  time15 = time14 + 10 / vacuumSpeed //going down
  time16 = time15 + 90 / vacuumRotateSpeed //rotating right
  time17 = time16 + 90 / vacuumSpeed //going right
  time18 = time17 + 90 / vacuumRotateSpeed //rotating down
  time19 = time18 + 10 / vacuumSpeed //going down
  time20 = time19 + 90 / vacuumRotateSpeed //rotating left
  time21 = time20 + 90 / vacuumSpeed //going left
  time22 = time21 + 90 / vacuumRotateSpeed //rotating up
  time23 = time22 + 25 / vacuumSpeed //going up halfway
  time24 = time23 + 90 / vacuumRotateSpeed //rotating right
  time25 = time24 + 47 / vacuumSpeed //going right halfway
  retreatTime1 = 180 / (2 * vacuumRotateSpeed) //rotating 180 to the left at twice the rotation speed
  retreatTime2 = retreatTime1 + 62 / vacuumSpeed //going left and disappearing

  //Update coin collection, stats table, collection face/worth
  numberCoinsFlipped = 0
  bankAccountIncrease = 0
  collectionFaceDecrease = 0
  collectionWorthDecrease = 0
  for (let i = 1; i <= coinCutoff; i++) {
    if (quantity[i] > 0) {
      if (binaryCoinSide[i] == 0) {
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
      }
      else {
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling.previousElementSibling.firstElementChild.src
          = "Coin Pictures/" + i + "back.jpg"
        numberCoinsFlipped++
      }
      document.getElementById("qty"+i).previousElementSibling.previousElementSibling
        .previousElementSibling.firstElementChild.setAttribute("draggable","false")
      document.getElementById("qty"+i).previousElementSibling.previousElementSibling
        .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
      document.getElementById("qty"+i).previousElementSibling.previousElementSibling
        .previousElementSibling.style.cursor = "pointer"
      // document.getElementById("qty"+i).innerHTML = quantity[i]
      document.getElementById("qty"+i).style.display = "block"
      //Update table
      updateTable(xC[i],yC[i],i)
      bankAccountIncrease += worth[i] * (quantity[i] - 1)
      collectionFace += face[i] * quantity[i]
      collectionWorth += worth[i] * quantity[i]
      collectionFaceDecrease += face[i] * (quantity[i] - 1)
    }
  }

  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  if (bankAccountIncrease > 0) {
    document.getElementById("sellDuplicatesInactive").style.display = "none"
    document.getElementById("sellDuplicatesActive").style.display = "block"
  }
  if (toggleGarbage == true) {
    document.getElementById("toggleGarbage").classList.add("crossed")
  }
  if (toggleCommon == true) {
    document.getElementById("toggleCommon").classList.add("crossed")
  }
  if (toggleUncommon == true) {
    document.getElementById("toggleUncommon").classList.add("crossed")
  }
  if (toggleRare == true) {
    document.getElementById("toggleRare").classList.add("crossed")
  }
  if (toggleUltraRare == true) {
    document.getElementById("toggleUltraRare").classList.add("crossed")
  }
  for (let i = 1; i <= 9; i++) {
    if (toggleReady[i] == false) {
      document.getElementById("toggleReady"+i).checked = false
    }
  }
  updateSpecialsBadge()

  //Initialize your level
  showHave()
  myLevel = 1
  for (let m = 1; m <= 99; m++) {
    if (grandTotalCount >= coinsNeededCumul[m]) {
      myLevel++
    }
  }

  document.getElementById("myLevel").innerHTML = "Lvl " + myLevel
  for (let m = 1; m <= 10; m++) {
    if (myLevel >= 10*m) {
      document.getElementById("myTitle").innerHTML = myTitle[m]
    }
  }
  if (myLevel >= 2) {
    document.getElementById("coinmasterButtonBlank").style.display = "none"
    document.getElementById("coinmasterButton").style.display = ""
  }
  if (myLevel == 100) {
    document.getElementById("expBar").style.display = "none"
    document.getElementById("expProgress").style.display = "none"
  }
  //Update upgrades bought
  for (let i = 2; i <= 100; i++) {
    if (boughtUpgrade[i] == 1) {
      bankAccount += lvlUpgradeCost[i]
      var lvlFast = window["lvl"+i+"Upgrade"]
      lvlFast()
    }
  }
  document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
  document.getElementById("bankAccount").innerHTML = "$" + bankAccount.toFixed(2)

  //Initialize exp bar
  if (myLevel < 100) {
    countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
    expRatio = countCurrentLvl / coinsNeeded[myLevel]
    document.getElementById("expBar").value = expRatio
    expPct = Math.round(expRatio * 1000) / 10
    document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
  }

  //Initialize seekers
  document.getElementById("seekerRank").innerHTML = "Rank: " + highestSeekerLevel
  for (let i = 1; i <= 7; i++) {
    if (seekerUnlocked[i] == 1) {
      document.getElementById("statSeeker"+i+"Row").style.display = ""
      document.getElementById("seekerboxBlank"+i).style.display = "none"
      document.getElementById("seekerboxRetired"+i).style.display = "none"
      document.getElementById("seeker"+i+"name").innerHTML = seekerName[i]
      document.getElementById("seeker"+i+"level").innerHTML = "Lvl " + seekerLevel[i]
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
      document.getElementById("seeker"+i+"cooldown").style.width = wTotal[i] + "px"
      document.getElementById("seeker"+i+"fuel").style.height = fTotal[i] + "px"
      document.getElementById("seeker"+i+"expbar").value = seekerSearches[i] / seekerSearchesToLevel[i]
      if (seekerHired[i] == 1 && seekerReadyToLevel[i] == 0) {
        document.getElementById("seeker"+i+"expbar").style.display = ""
        document.getElementById("seeker"+i+"LevelUpButton").style.display = "none"
        document.getElementById("seekerbox"+i).style.display = "grid"
      }
      else if (seekerHired[i] == 1 && seekerReadyToLevel[i] == 1) {
        prepareToLevelSeeker(i,seekerLevel[i])
        document.getElementById("seekerbox"+i).style.display = "grid"
      }
      else { //If a seeker isn't currently hired
        resetSeeker(i)
      }
      if (seekerLevel[i] == 10) {
        document.getElementById("seeker"+i+"expbar").style.display = "none"
        document.getElementById("maxLevelSeeker"+i).style.display = ""
        document.getElementById("seeker"+i+"number").style.backgroundColor = "rgb(224, 129, 255)"
        document.getElementById("seeker"+i+"name").style.backgroundColor = "rgb(224, 129, 255)"
        document.getElementById("seeker"+i+"active").style.backgroundColor = "rgb(224, 129, 255)"
        document.getElementById("seeker"+i+"cd").style.backgroundColor = "rgb(224, 129, 255)"
        document.getElementById("seeker"+i+"level").style.backgroundColor = "cyan"
        document.getElementById("seeker"+i+"box").style.backgroundColor = "cyan"
        document.getElementById("statSeeker"+i+"SearchesInLvl").setAttribute("colspan","6")
        document.getElementById("statSeeker"+i+"SearchesToLvl").style.display = "none"
        document.getElementById("statSeeker"+i+"ProgressToLvl").style.display = "none"
        document.getElementById("statSeeker"+i+"RetireChance").style.display = "none"
        document.getElementById("statSeeker"+i+"ChanceNextLvl").style.display = "none"
        document.getElementById("statSeeker"+i+"ChanceLvl10").style.display = "none"
        if (i < 8) {
          document.getElementById("statSeeker"+i+"SearchesInLvl").style.backgroundColor = seekerClueColor[i]
          document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerClue[i]
        }
      }
    }
    else {
      document.getElementById("seekerboxBlank"+i).style.display = "none"
      document.getElementById("seekerboxRetired"+i).style.display = "none"
      document.getElementById("seekerbox"+i).style.display = "none"
    }
  }

  //Initialize specials
  //Initialize vending machines
  document.getElementById("timer1").style.display = ""
  document.getElementById("ready1").style.display = "none"
  document.getElementById("timer2").style.display = ""
  document.getElementById("ready2").style.display = "none"
  //Initialize super seeker pill
  if (boughtUpgrade[45] == 1 || ascensionLevel >= 1) {
    document.getElementById("toggleHypnotic").style.display = ""
  }
  if (toggleHypnotic == false) {
    document.getElementById("toggleHypnoticBox").checked = false
  }
  else {
    document.getElementById("toggleHypnoticBox").checked = true
  }
  if (numberDescensionsComplete[2] != 10) {
    document.getElementById("timer3").style.display = ""
    document.getElementById("pillQuantity").innerHTML = "Qty:<br>" + numberPills
  }
  else {
    document.getElementById("pillQuantity").style.top = "0%"
    document.getElementById("pillQuantity").style.right = "0%"
    document.getElementById("pillQuantity").style.left = "auto"
    document.getElementById("pillQuantity").innerHTML = "Active"
  }
  document.getElementById("ready3").style.display = "none"
  document.getElementById("youHave").innerHTML = "(You have: " + numberPills + ")"

  //Initialize traveling salesman
  if (salesmanPresent == true) {
    specialReady[4] = 1
    document.getElementById("salesmanPic").src = "travelingSalesmanPresent.jpg"
    updateSpecialsBadge()
  }

  //Initialize metal detector
  if (metalDetectorStarted + metalDetectorXFound + metalDetectorChestFound == 1) {
    document.getElementById("timer8").style.display = "none"
    document.getElementById("ready8").style.display = ""
  }
  else {
    document.getElementById("timer8").style.display = ""
    document.getElementById("ready8").style.display = "none"  
  }

  //Initialize bank
  for (let i = 1; i <= 6; i++) {
    for (let j = 1; j <= coinRollAvail[i]; j++) {
      document.getElementById("roll"+i+"_"+j).style.display = ""
    }
    document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
    if (coinRollAvail[i] == coinRollLimit[i]) {
      remainingTimeRoll[i] = 1000000000
      hhRoll[i] = Math.floor(coinRollPrepTime[i] / 3600)
      mmRoll[i] = Math.floor((coinRollPrepTime[i] % 3600) / 60)
      ssRoll[i] = Math.floor((coinRollPrepTime[i] % 60))
      hhModRoll[i] = hhRoll[i]
      mmModRoll[i] = mmRoll[i]
      ssModRoll[i] = ssRoll[i]
      if (hhRoll[i] < 10) {
        hhModRoll[i] = "0" + hhRoll[i].toString()
      }
      if (mmRoll[i] < 10) {
        mmModRoll[i] = "0" + mmRoll[i].toString()
      }
      if (ssRoll[i] < 10) {
        ssModRoll[i] = "0" + ssRoll[i].toString()
      }
      document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
    }
  }
  if (coinRollAvail[1]+coinRollAvail[2]+coinRollAvail[3]+coinRollAvail[4]+coinRollAvail[5]+coinRollAvail[6] == 0) {
    document.getElementById("bankPic").src = "bankOff.png"
  }
  else {
    document.getElementById("bankPic").src = "bankOn.png"
  }
  //Initialize wishing fountain
  document.getElementById("timer7").style.display = ""
  document.getElementById("ready7").style.display = "none"
  if (specialReady[7] == 0) {
    document.getElementById("fountainPic").src = "waterFountainEmpty.jpg"
  }
  //Initialize coin vacuum
  if (vacuumSearching == true || vacuumReady == true || vacuumCollected == true) {
    vacDiv.style.display = ""
    document.getElementById("ready6").style.display = "none"
    document.getElementById("searching6").style.display = ""
  }
  else {
    document.getElementById("timer6").style.display = ""
    document.getElementById("ready6").style.display = "none"
  }
  //No need to initialize coin pusher
  //Update badges
  updateCoinmasterBadge()
  updateSpecialsBadge()

  //Initialize stats
    //Search
  document.getElementById("searchNumSearches").innerHTML = numberWithCommas(searchNumSearches)
  document.getElementById("searchNumCoins").innerHTML = numberWithCommas(searchNumCoins)
  document.getElementById("searchNumNew").innerHTML = numberWithCommas(searchNumNew)

    //Seeker
  document.getElementById("seekerNumSearches").innerHTML = numberWithCommas(seekerNumSearches)
  document.getElementById("seekerNumCoins").innerHTML = numberWithCommas(seekerNumCoins)
  document.getElementById("seekerNumNew").innerHTML = numberWithCommas(seekerNumNew)

    //Vending 1
  document.getElementById("vending1NumSearches").innerHTML = numberWithCommas(vending1NumSearches)
  document.getElementById("vending1NumCoins").innerHTML = numberWithCommas(vending1NumCoins)
  document.getElementById("vending1NumNew").innerHTML = numberWithCommas(vending1NumNew)

    //Vending 2
  document.getElementById("vending2NumSearches").innerHTML = numberWithCommas(vending2NumSearches)
  document.getElementById("vending2NumCoins").innerHTML = numberWithCommas(vending2NumCoins)
  document.getElementById("vending2NumNew").innerHTML = numberWithCommas(vending2NumNew)

    //Fountain
  document.getElementById("fountainNumSearches").innerHTML = numberWithCommas(fountainNumSearches)
  document.getElementById("fountainNumCoins").innerHTML = numberWithCommas(fountainNumCoins)
  document.getElementById("fountainNumNew").innerHTML = numberWithCommas(fountainNumNew)

    //Metal Detector
  document.getElementById("chestNumSearches").innerHTML = numberWithCommas(chestNumSearches)
  document.getElementById("chestNumCoins").innerHTML = numberWithCommas(chestNumCoins)
  document.getElementById("chestNumNew").innerHTML = numberWithCommas(chestNumNew)

    //Coin Vacuum
  document.getElementById("vacuumNumSearches").innerHTML = numberWithCommas(vacuumNumSearches)
  document.getElementById("vacuumNumCoins").innerHTML = numberWithCommas(vacuumNumCoins)
  document.getElementById("vacuumNumNew").innerHTML = numberWithCommas(vacuumNumNew)

    //Coin Pusher
  document.getElementById("coinPusherNumSearches").innerHTML = numberWithCommas(coinPusherNumSearches)
  document.getElementById("coinPusherNumCoins").innerHTML = numberWithCommas(coinPusherNumCoins)
  document.getElementById("coinPusherNumNew").innerHTML = numberWithCommas(coinPusherNumNew)

    //Seeker Stats
  for (let i = 1; i <= 8; i++) {
    if (seekerUnlocked[i] == 1) {
      document.getElementById("statSeeker"+i+"Row").style.display = ""
      if (seekerHired[i] == 1) {
        document.getElementById("statSeeker"+i+"Name").innerHTML = seekerName[i]
        document.getElementById("statSeeker"+i+"Lvl").innerHTML = seekerLevel[i]
        if (seekerLevel[i] < 10) {
          document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerSearches[i]
          document.getElementById("statSeeker"+i+"SearchesToLvl").innerHTML = seekerSearchesToLevel[i]
          document.getElementById("statSeeker"+i+"ProgressToLvl").innerHTML
            = Math.round(1000 * seekerSearches[i] / seekerSearchesToLevel[i]) / 10 + "%"
          var retireChance = 100 * (1 / (3 * seekerSearchesToLevel[i]))
          document.getElementById("statSeeker"+i+"RetireChance").innerHTML = retireChance.toFixed(4) + "%"
          document.getElementById("statSeeker"+i+"ChanceNextLvl").innerHTML
            = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])) / 10 + "%"
          document.getElementById("statSeeker"+i+"ChanceLvl10").innerHTML
            = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])
              * 0.7164 ** (9 - seekerLevel[i])) / 10 + "%"
        }
      }
      else {
        document.getElementById("statSeeker"+i+"Name").innerHTML = "(vacant)"
      }
    }
  }

    //Other stats
  document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
  document.getElementById("duplicatesWorth").innerHTML = "$" + numberWithCommas(duplicatesWorth.toFixed(2))

    //Coin Roll Stats
  updateCoinRollStats()
  if (numberDescensionsComplete[5] >= 4) {
    document.getElementById("uncRollRow").style.display = ""
  }
  if (numberDescensionsComplete[5] >= 5) {
    document.getElementById("rarRollRow").style.display = ""
  }
  if (numberDescensionsComplete[5] >= 6) {
    document.getElementById("ultRollRow").style.display = ""
  }

    //Ascension
  if (ascensionLevel >= 1) {
    document.getElementById("coinRollStatTableLocked").style.display = "none"
    document.getElementById("coinRollStatTable").style.display = ""
    document.getElementById("goldenBuffaloStatRow").style.display = ""
    document.getElementById("whichSpecCurrent").style.display = ""
    document.getElementById("dupFilterText").style.display = ""
    document.getElementById("toggleGarbage").style.display = ""
    document.getElementById("toggleCommon").style.display = ""
    document.getElementById("toggleUncommon").style.display = ""
    document.getElementById("toggleRare").style.display = ""
    document.getElementById("toggleUltraRare").style.display = ""
    document.getElementById("coinmasterButtonBlank").style.display = "none"
    document.getElementById("coinmasterButton").style.display = ""
    document.getElementById("ascensionBubbleRoman").innerHTML = roman[ascensionLevel]
    document.getElementById("prestigeArea1Label").innerHTML = "<b>Ascension " + roman[ascensionLevel] + "</b>"
    var tempMult = 1.1 ** ascensionLevel
    document.getElementById("prestigeArea1Mult").innerHTML = "Power Multiplier: " + tempMult.toFixed(2)
    document.getElementById("ascensionBubbleRoman").style.display = "flex"
    typesUnlocked = [0,1,1,1,1,1,1]
    document.getElementById("nickelHeader").style.display = ""
    document.getElementById("nickels18661883").style.display = "block"
    document.getElementById("nickelGroup1").style.display = "block"
    document.getElementById("nickels18831912").style.display = "block"
    document.getElementById("nickelGroup2").style.display = "block"
    document.getElementById("nickels19131938").style.display = "block"
    document.getElementById("nickelGroup3").style.display = "block"
    document.getElementById("nickels19382003").style.display = "block"
    document.getElementById("nickelGroup4").style.display = "block"
    document.getElementById("nickels20042005").style.display = "block"
    document.getElementById("nickelGroup5").style.display = "block"
    document.getElementById("nickels2006pres").style.display = "block"
    document.getElementById("nickelGroup6").style.display = "block"
    document.getElementById("dimeHeader").style.display = ""
    document.getElementById("dimes18371891").style.display = "block"
    document.getElementById("dimeGroup1").style.display = "block"
    document.getElementById("dimes18921916").style.display = "block"
    document.getElementById("dimeGroup2").style.display = "block"
    document.getElementById("dimes19161945").style.display = "block"
    document.getElementById("dimeGroup3").style.display = "block"
    document.getElementById("dimes1946pres").style.display = "block"
    document.getElementById("dimeGroup4").style.display = "block"
    document.getElementById("quarterHeader").style.display = ""
    document.getElementById("quarters18381891").style.display = "block"
    document.getElementById("quarterGroup1").style.display = "block"
    document.getElementById("quarters18921916").style.display = "block"
    document.getElementById("quarterGroup2").style.display = "block"
    document.getElementById("quarters19161930").style.display = "block"
    document.getElementById("quarterGroup3").style.display = "block"
    document.getElementById("quarters19321998").style.display = "block"
    document.getElementById("quarterGroup4").style.display = "block"
    document.getElementById("quarters19992008").style.display = "block"
    document.getElementById("quarterGroup5").style.display = "block"
    document.getElementById("quarters2009").style.display = "block"
    document.getElementById("quarterGroup6").style.display = "block"
    document.getElementById("quarters20102021").style.display = "block"
    document.getElementById("quarterGroup7").style.display = "block"
    document.getElementById("halfDollarHeader").style.display = ""
    document.getElementById("half18391891").style.display = "block"
    document.getElementById("halfDollarGroup1").style.display = "block"
    document.getElementById("half18921915").style.display = "block"
    document.getElementById("halfDollarGroup2").style.display = "block"
    document.getElementById("half19161947").style.display = "block"
    document.getElementById("halfDollarGroup3").style.display = "block"
    document.getElementById("half19481963").style.display = "block"
    document.getElementById("halfDollarGroup4").style.display = "block"
    document.getElementById("half19642001").style.display = "block"
    document.getElementById("halfDollarGroup5").style.display = "block"
    document.getElementById("dollarHeader").style.display = ""
    document.getElementById("dollars18401873").style.display = "block"
    document.getElementById("dollarGroup1").style.display = "block"
    document.getElementById("dollars18731878").style.display = "block"
    document.getElementById("dollarGroup2").style.display = "block"
    document.getElementById("dollars18781921").style.display = "block"
    document.getElementById("dollarGroup3").style.display = "block"
    document.getElementById("dollars19211935").style.display = "block"
    document.getElementById("dollarGroup4").style.display = "block"
    document.getElementById("dollars19711978").style.display = "block"
    document.getElementById("dollarGroup5").style.display = "block"
    document.getElementById("dollars19791999").style.display = "block"
    document.getElementById("dollarGroup6").style.display = "block"
    document.getElementById("dollars20002001").style.display = "block"
    document.getElementById("dollarGroup7").style.display = "block"
    document.getElementById("dollars20072011").style.display = "block"
    document.getElementById("dollarGroup8").style.display = "block"

    document.getElementById("specialsButtonLocked").style.display = "none"
    document.getElementById("specialsButton").style.display = ""

    document.getElementById("moreStatBuyToUnlock").style.display = "none"
    document.getElementById("moreStatHeader1").style.display = ""
    document.getElementById("moreStatHeader2").style.display = ""
    document.getElementById("moreStatHeader3").style.display = ""
    document.getElementById("moreStatHeader4").style.display = ""
    document.getElementById("moreStatHeader5").style.display = ""
    document.getElementById("moreStatHeader6").style.display = ""
    document.getElementById("searchProbNewStat").style.display = ""
    document.getElementById("searchExpNewStat").style.display = ""
    document.getElementById("searchExpectedCoins").style.display = ""
    document.getElementById("searchNumSearches").style.display = ""
    document.getElementById("searchNumCoins").style.display = ""
    document.getElementById("searchNumNew").style.display = ""
    document.getElementById("seekerProbNewStat").style.display = ""
    document.getElementById("seekerExpNewStat").style.display = ""
    document.getElementById("seekerExpectedCoins").style.display = ""
    document.getElementById("seekerNumSearches").style.display = ""
    document.getElementById("seekerNumCoins").style.display = ""
    document.getElementById("seekerNumNew").style.display = ""

    //Update Adjusted Level Upgrades
    document.getElementById("lvl6UpgradeText").innerHTML = "<b>Get 1 Golden Buffalo</b>"
    document.getElementById("lvl7UpgradeText").innerHTML = "<b>Get 2 Golden Buffalos</b>"
    document.getElementById("lvl10UpgradeText").innerHTML = "<b>Get 3 Golden Buffalos</b>"
    document.getElementById("lvl12UpgradeText").innerHTML = "<b>Get 4 Golden Buffalos</b>"
    document.getElementById("lvl15UpgradeText").innerHTML = "<b>Get 5 Golden Buffalos</b>"
    document.getElementById("lvl18UpgradeText").innerHTML = "<b>Get 6 Golden Buffalos</b>"
    document.getElementById("lvl19UpgradeText").innerHTML = "<b>Get 7 Golden Buffalos</b>"
    document.getElementById("lvl20UpgradeText").innerHTML = "<b>Get 8 Golden Buffalos</b>"
    document.getElementById("lvl23UpgradeText").innerHTML = "<b>Get 9 Golden Buffalos</b>"
    document.getElementById("lvl25UpgradeText").innerHTML = "<b>Get 10 Golden Buffalos</b>"
    document.getElementById("lvl26UpgradeText").innerHTML = "<b>Get 11 Golden Buffalos</b>"
    document.getElementById("lvl30UpgradeText").innerHTML = "<b>Get 12 Golden Buffalos</b>"
    document.getElementById("lvl34UpgradeText").innerHTML = "<b>Get 13 Golden Buffalos</b>"
    document.getElementById("lvl35UpgradeText").innerHTML = "<b>Get 14 Golden Buffalos</b>"
    document.getElementById("lvl40UpgradeText").innerHTML = "<b>Get 15 Golden Buffalos</b>"
    document.getElementById("lvl44UpgradeText").innerHTML = "<b>Get 16 Golden Buffalos</b>"
    document.getElementById("lvl45UpgradeText").innerHTML = "<b>Get 17 Golden Buffalos</b>"
    document.getElementById("lvl50UpgradeText").innerHTML = "<b>Get 18 Golden Buffalos</b>"
    document.getElementById("lvl55UpgradeText").innerHTML = "<b>Get 19 Golden Buffalos</b>"
    document.getElementById("lvl60UpgradeText").innerHTML = "<b>Get 20 Golden Buffalos</b>"
    document.getElementById("lvl62UpgradeText").innerHTML = "<b>Get 21 Golden Buffalos</b>"
    document.getElementById("lvl68UpgradeText").innerHTML = "<b>Get 22 Golden Buffalos</b>"
    document.getElementById("lvl70UpgradeText").innerHTML = "<b>Get 23 Golden Buffalos</b>"
    document.getElementById("lvl80UpgradeText").innerHTML = "<b>Get 24 Golden Buffalos</b>"
    document.getElementById("lvl87UpgradeText").innerHTML = "<b>Get 25 Golden Buffalos</b>"
    document.getElementById("lvl95UpgradeText").innerHTML = "Traveling Salesman no longer sells rares"
    document.getElementById("lvl95Upgrade").style.height = "1.8vmax"
    if (numberDescensionsComplete[5] == 7) {
      document.getElementById("lvl55UpgradeText").innerHTML = "Unlock the Bank Exchange!"
      document.getElementById("lvl65UpgradeText").innerHTML = "Upgrade to Bank Exchange II"
      document.getElementById("lvl75UpgradeText").innerHTML = "Upgrade to Bank Exchange III"
      document.getElementById("lvl85UpgradeText").innerHTML = "Upgrade to Bank Exchange IV"
      document.getElementById("lvl90UpgradeText").innerHTML = "Upgrade to Bank Exchange V"
      document.getElementById("specials5Locked").innerHTML = "Buy<br>Level 55<br>Upgrade"
    }
    else if (numberDescensionsComplete[5] == 8) {
      document.getElementById("lvl45UpgradeText").innerHTML = "Unlock the Bank Exchange!"
      document.getElementById("lvl55UpgradeText").innerHTML = "Upgrade to Bank Exchange II"
      document.getElementById("lvl65UpgradeText").innerHTML = "Upgrade to Bank Exchange III"
      document.getElementById("lvl75UpgradeText").innerHTML = "Upgrade to Bank Exchange IV"
      document.getElementById("lvl85UpgradeText").innerHTML = "Upgrade to Bank Exchange V"
      document.getElementById("lvl90UpgradeText").innerHTML = "Upgrade to Bank Exchange VI"
      document.getElementById("specials5Locked").innerHTML = "Buy<br>Level 45<br>Upgrade"
    }
    else if (numberDescensionsComplete[5] >= 9) {
      document.getElementById("lvl35UpgradeText").innerHTML = "Unlock the Bank Exchange!"
      document.getElementById("lvl45UpgradeText").innerHTML = "Upgrade to Bank Exchange II"
      document.getElementById("lvl55UpgradeText").innerHTML = "Upgrade to Bank Exchange III"
      document.getElementById("lvl65UpgradeText").innerHTML = "Upgrade to Bank Exchange IV"
      document.getElementById("lvl75UpgradeText").innerHTML = "Upgrade to Bank Exchange V"
      document.getElementById("lvl85UpgradeText").innerHTML = "Upgrade to Bank Exchange VI"
      document.getElementById("lvl90UpgradeText").innerHTML = "Upgrade to Bank Exchange VII"
      document.getElementById("specials5Locked").innerHTML = "Buy<br>Level 35<br>Upgrade"
    }

    if (numberDescensionsComplete[9] >= 1 || numberDescensionsComplete[5] == 10) { //Add OR conditions for other ascension settings
      document.getElementById("ascSettings").style.display = ""
    }
    if (numberDescensionsComplete[9] >= 1) {
      document.getElementById("toggleDupSell").style.display = ""
      if (toggleAutoSellDups == false) {
        document.getElementById("toggleDupSellBox").checked = false
      }
      else {
        document.getElementById("toggleDupSellBox").checked = true
      }
    }
    if (numberDescensionsComplete[5] == 10) {
      document.getElementById("toggleRollBuy").style.display = ""
      if (toggleAutoBuyRolls == false) {
        document.getElementById("toggleRollBuyBox").checked = false
      }
      else {
        document.getElementById("toggleRollBuyBox").checked = true
      }
    }

    //Have golden buffalos unlocked
    document.getElementById("goldenBuffaloPic").style.display = "block"
    document.getElementById("goldenBuffaloAmount").style.display = "block"

    //Have seekers unlocked
    // for (let i = 1; i <= 7; i++) {
    //   //seekerUnlocked[i] = 1
    //   document.getElementById("statSeeker"+i+"Row").style.display = ""
    // }
    document.getElementById("seekerStatTable").style.display = ""
    document.getElementById("seekerStatTableLocked").style.display = "none"
    document.getElementById("seekerStatRow").style.display = ""
    document.getElementById("seekerArea").style.display = "flex"
    document.getElementById("unlockSeekerAtLevel").style.display = "none"

    //Have all specials unlocked
    specialIsUnlocked = ["",true,true,true,true,false,true,true,true,true,true]
    if ((boughtUpgrade[65] == 1 && numberDescensionsComplete[5] <= 6)
        || (boughtUpgrade[55] == 1 && numberDescensionsComplete[5] == 7)
        || (boughtUpgrade[45] == 1 && numberDescensionsComplete[5] == 8)
        || (boughtUpgrade[35] == 1 && numberDescensionsComplete[5] >= 9)) {
      specialIsUnlocked[5] = true
    }
    //Have traveling salesman unlocked
    document.getElementById("specials4Locked").style.display = "none"
    document.getElementById("specials4Unlocked").style.display = "flex"
    document.getElementById("toggleReady4Badge").style.display = ""

    document.getElementById("specials10Locked").style.display = "none"
    document.getElementById("specials10Unlocked").style.display = "flex"
    document.getElementById("vending1StatRow").style.display = ""
    document.getElementById("vending2StatRow").style.display = ""
    document.getElementById("fountainStatRow").style.display = ""
    document.getElementById("chestStatRow").style.display = ""
    document.getElementById("vacuumStatRow").style.display = ""
    document.getElementById("coinPusherStatRow").style.display = ""

    //Coinmaster messages and pic
    document.getElementById("trainerPic").src = "theCollectorPic.jpg"
    jumpToMessage(numberMessagesUnlocked)

    //Account for ascension rewards you've already gotten
      //Rewards for Vending Spec
    if (numberDescensionsComplete[1] >= 1) {
      if (boughtUpgrade[38] == 1) {
        specialsCooldown[1] = 1500 * 0.75 ** numberDescensionsComplete[1] //25 min
        specialsCooldown[2] = 1500 * 0.75 ** numberDescensionsComplete[1] //25 min
      }
      else {
        specialsCooldown[1] = 1800 * 0.75 ** numberDescensionsComplete[1] //30 min
        specialsCooldown[2] = 1800 * 0.75 ** numberDescensionsComplete[1] //30 min
      }
      if (remainingTime[1] > specialsCooldown[1]) {
        startTime[1] = Date.now()
      }
      if (remainingTime[2] > specialsCooldown[2]) {
        startTime[2] = Date.now()
      }
    }
      //Rewards for Pill Spec
    if (numberDescensionsComplete[2] >= 1) {
      pillCost = 20
    }
      //Rewards for Wishing Spec
    if (numberDescensionsComplete[3] >= 1) {
      var wishCooldown = [0,36000,28800,21600,14400,10800,7200,3600,1800,900,900]
      specialsCooldown[7] = wishCooldown[numberDescensionsComplete[3]]
      if (remainingTime[7] > specialsCooldown[7]) {
        startTime[7] = Date.now()
      }
    }
      //Rewards for Metal Detector Spec
    if (numberDescensionsComplete[4] >= 1) {
      var metalCooldown = [0,7200,3600,2700,2700,1800,1800,900,900,600,600]
      specialsCooldown[8] = metalCooldown[numberDescensionsComplete[4]]
      if (remainingTime[8] > specialsCooldown[8]) {
        startTime[8] = Date.now()
      }
    }

      //Rewards for Coin Vacuum Spec
    if (numberDescensionsComplete[6] >= 1) {
      var vacuumCooldown = [0,7200,7200,3600,3600,2700,2700,1800,1800,900,900]
      specialsCooldown[6] = vacuumCooldown[numberDescensionsComplete[6]]
      if (remainingTime[6] > specialsCooldown[6]) {
        startTime[6] = Date.now()
      }
      var vacSpeed = [0,5,10,10,20,20,40,40,80,80,80]
      var vacRotSpeed = [0,50,100,100,200,200,400,400,800,800,800]
      vacuumSpeed = vacSpeed[numberDescensionsComplete[6]]
      vacuumRotateSpeed = vacRotSpeed[numberDescensionsComplete[6]]

      time1 = 105 / vacuumSpeed //going right
      time2 = time1 + 90 / vacuumRotateSpeed //rotating down
      time3 = time2 + 10 / vacuumSpeed //going down
      time4 = time3 + 90 / vacuumRotateSpeed //rotating left
      time5 = time4 + 90 / vacuumSpeed //going left
      time6 = time5 + 90 / vacuumRotateSpeed //rotating down
      time7 = time6 + 10 / vacuumSpeed //going down
      time8 = time7 + 90 / vacuumRotateSpeed //rotating right
      time9 = time8 + 90 / vacuumSpeed //going right
      time10 = time9 + 90 / vacuumRotateSpeed //rotating down
      time11 = time10 + 10 / vacuumSpeed //going down
      time12 = time11 + 90 / vacuumRotateSpeed //rotating left
      time13 = time12 + 90 / vacuumSpeed //going left
      time14 = time13 + 90 / vacuumRotateSpeed //rotating down
      time15 = time14 + 10 / vacuumSpeed //going down
      time16 = time15 + 90 / vacuumRotateSpeed //rotating right
      time17 = time16 + 90 / vacuumSpeed //going right
      time18 = time17 + 90 / vacuumRotateSpeed //rotating down
      time19 = time18 + 10 / vacuumSpeed //going down
      time20 = time19 + 90 / vacuumRotateSpeed //rotating left
      time21 = time20 + 90 / vacuumSpeed //going left
      time22 = time21 + 90 / vacuumRotateSpeed //rotating up
      time23 = time22 + 25 / vacuumSpeed //going up halfway
      time24 = time23 + 90 / vacuumRotateSpeed //rotating right
      time25 = time24 + 47 / vacuumSpeed //going right halfway
      retreatTime1 = 180 / (2 * vacuumRotateSpeed) //rotating 180 to the left at twice the rotation speed
      retreatTime2 = retreatTime1 + 62 / vacuumSpeed //going left and disappearing
    }

      //Rewards for Coin Pusher Spec
    if (numberDescensionsComplete[7] >= 1) {
      var pusherPer = [0,20,40,60,90,150,240,360,720,2160,2160]
      specialsCooldown[9] = pusherPer[numberDescensionsComplete[7]]
      var numHours = pusherMaxTime / 3600
      document.getElementById("pusherMaxTime").innerHTML = "Max: " + numHours + " hrs"
    }
    if (ascensionLevel == 100) {
      document.getElementById("gameBody").style.background = "url('outerSpaceBackground.jpg')"
      document.getElementById("gameBody").style.backgroundSize = "cover"
    }
  }

  //Achievements
  var numAchHave = 0
  for (let i = 1; i <= numAch; i++) {
    if (achHave[i] == 1) {
      achUnlock(i)
      numAchHave++
    }
  }
  document.getElementById("achHeader").innerHTML = "Achievements (" + numAchHave + "/" + numAch + ")"

  //Feed
  for (let i = 1; i <= feedCount; i++) {
    document.getElementById("feedDiv"+i).innerHTML = feedText[i]
  }
  feedArea.scrollTo(0,feedArea.scrollHeight)

  //Psychedelic setting
  if (toggleHypnotic == true) {
    if (seekerPillActive == 1) {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.gif)"
      document.getElementById("seekerArea").style.backgroundSize = "cover"
    }
  }
  else {
    if (seekerPillActive == 1) {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.png)"
      document.getElementById("seekerArea").style.backgroundSize = "cover"
    }
  }

  updatePowers()
  updateBankAccount()
  updateAllStats()
  countTotalCoins()

  if (prestigeComplete == false) {
    implementConditions(currentDescensionType,numberDescensionsComplete[currentDescensionType])
  }
  if (ascensionLevel >= 1) {
    updateSpecialsEnabled()
  }

  window.requestAnimationFrame(increment)
}

function updateCoinRollStats() {
  document.getElementById("numComPennyRolls").innerHTML = pennyRollsOpened1
  document.getElementById("numComNickelRolls").innerHTML = nickelRollsOpened1
  document.getElementById("numComDimeRolls").innerHTML = dimeRollsOpened1
  document.getElementById("numComQuarterRolls").innerHTML = quarterRollsOpened1
  document.getElementById("numComHalfDollarRolls").innerHTML = halfDollarRollsOpened1
  document.getElementById("numComDollarRolls").innerHTML = dollarRollsOpened1
  document.getElementById("numUncPennyRolls").innerHTML = pennyRollsOpened2
  document.getElementById("numUncNickelRolls").innerHTML = nickelRollsOpened2
  document.getElementById("numUncDimeRolls").innerHTML = dimeRollsOpened2
  document.getElementById("numUncQuarterRolls").innerHTML = quarterRollsOpened2
  document.getElementById("numUncHalfDollarRolls").innerHTML = halfDollarRollsOpened2
  document.getElementById("numUncDollarRolls").innerHTML = dollarRollsOpened2
  document.getElementById("numRarPennyRolls").innerHTML = pennyRollsOpened3
  document.getElementById("numRarNickelRolls").innerHTML = nickelRollsOpened3
  document.getElementById("numRarDimeRolls").innerHTML = dimeRollsOpened3
  document.getElementById("numRarQuarterRolls").innerHTML = quarterRollsOpened3
  document.getElementById("numRarHalfDollarRolls").innerHTML = halfDollarRollsOpened3
  document.getElementById("numRarDollarRolls").innerHTML = dollarRollsOpened3
  document.getElementById("numUltPennyRolls").innerHTML = pennyRollsOpened4
  document.getElementById("numUltNickelRolls").innerHTML = nickelRollsOpened4
  document.getElementById("numUltDimeRolls").innerHTML = dimeRollsOpened4
  document.getElementById("numUltQuarterRolls").innerHTML = quarterRollsOpened4
  document.getElementById("numUltHalfDollarRolls").innerHTML = halfDollarRollsOpened4
  document.getElementById("numUltDollarRolls").innerHTML = dollarRollsOpened4
  comRollsOpened = pennyRollsOpened1 + nickelRollsOpened1 + dimeRollsOpened1 + quarterRollsOpened1 + halfDollarRollsOpened1 + dollarRollsOpened1
  uncRollsOpened = pennyRollsOpened2 + nickelRollsOpened2 + dimeRollsOpened2 + quarterRollsOpened2 + halfDollarRollsOpened2 + dollarRollsOpened2
  rarRollsOpened = pennyRollsOpened3 + nickelRollsOpened3 + dimeRollsOpened3 + quarterRollsOpened3 + halfDollarRollsOpened3 + dollarRollsOpened3
  ultRollsOpened = pennyRollsOpened4 + nickelRollsOpened4 + dimeRollsOpened4 + quarterRollsOpened4 + halfDollarRollsOpened4 + dollarRollsOpened4
  document.getElementById("numComRolls").innerHTML = comRollsOpened
  document.getElementById("numUncRolls").innerHTML = uncRollsOpened
  document.getElementById("numRarRolls").innerHTML = rarRollsOpened
  document.getElementById("numUltRolls").innerHTML = ultRollsOpened
  pennyRollsOpened = pennyRollsOpened1 + pennyRollsOpened2 + pennyRollsOpened3 + pennyRollsOpened4
  nickelRollsOpened = nickelRollsOpened1 + nickelRollsOpened2 + nickelRollsOpened3 + nickelRollsOpened4
  dimeRollsOpened = dimeRollsOpened1 + dimeRollsOpened2 + dimeRollsOpened3 + dimeRollsOpened4
  quarterRollsOpened = quarterRollsOpened1 + quarterRollsOpened2 + quarterRollsOpened3 + quarterRollsOpened4
  halfDollarRollsOpened = halfDollarRollsOpened1 + halfDollarRollsOpened2 + halfDollarRollsOpened3 + halfDollarRollsOpened4
  dollarRollsOpened = dollarRollsOpened1 + dollarRollsOpened2 + dollarRollsOpened3 + dollarRollsOpened4
  document.getElementById("numPennyRolls").innerHTML = pennyRollsOpened
  document.getElementById("numNickelRolls").innerHTML = nickelRollsOpened
  document.getElementById("numDimeRolls").innerHTML = dimeRollsOpened
  document.getElementById("numQuarterRolls").innerHTML = quarterRollsOpened
  document.getElementById("numHalfDollarRolls").innerHTML = halfDollarRollsOpened
  document.getElementById("numDollarRolls").innerHTML = dollarRollsOpened
  rollsOpened = pennyRollsOpened + nickelRollsOpened + dimeRollsOpened + quarterRollsOpened + halfDollarRollsOpened + dollarRollsOpened
  document.getElementById("numRolls").innerHTML = rollsOpened
}

function encodeOne(symbol) {
  if (symbol == "a") {return "1"}
  if (symbol == "b") {return "S"}
  if (symbol == "c") {return "I"}
  if (symbol == "d") {return "+"}
  if (symbol == "e") {return ")"}
  if (symbol == "f") {return "w"}
  if (symbol == "g") {return "s"}
  if (symbol == "h") {return "x"}
  if (symbol == "i") {return "a"}
  if (symbol == "j") {return "Q"}
  if (symbol == "k") {return "p"}
  if (symbol == "l") {return "o"}
  if (symbol == "m") {return ";"}
  if (symbol == "n") {return "g"}
  if (symbol == "o") {return "Z"}
  if (symbol == "p") {return "k"}
  if (symbol == "q") {return "3"}
  if (symbol == "r") {return "c"}
  if (symbol == "s") {return "2"}
  if (symbol == "t") {return "|"}
  if (symbol == "u") {return ","}
  if (symbol == "v") {return "A"}
  if (symbol == "w") {return "!"}
  if (symbol == "x") {return "t"}
  if (symbol == "y") {return "%"}
  if (symbol == "z") {return "i"}
  if (symbol == "A") {return "0"}
  if (symbol == "B") {return "q"}
  if (symbol == "C") {return `"`}
  if (symbol == "D") {return ":"}
  if (symbol == "E") {return "9"}
  if (symbol == "F") {return "^"}
  if (symbol == "G") {return "L"}
  if (symbol == "H") {return "4"}
  if (symbol == "I") {return "v"}
  if (symbol == "J") {return "E"}
  if (symbol == "K") {return "6"}
  if (symbol == "L") {return "r"}
  if (symbol == "M") {return "j"}
  if (symbol == "N") {return "."}
  if (symbol == "O") {return "e"}
  if (symbol == "P") {return "@"}
  if (symbol == "Q") {return "O"}
  if (symbol == "R") {return "d"}
  if (symbol == "S") {return "W"}
  if (symbol == "T") {return "*"}
  if (symbol == "U") {return "]"}
  if (symbol == "V") {return "b"}
  if (symbol == "W") {return "P"}
  if (symbol == "X") {return "u"}
  if (symbol == "Y") {return "X"}
  if (symbol == "Z") {return "V"}
  if (symbol == "`") {return "8"}
  if (symbol == "1") {return "="}
  if (symbol == "2") {return "G"}
  if (symbol == "3") {return "Y"}
  if (symbol == "4") {return "'"}
  if (symbol == "5") {return "?"}
  if (symbol == "6") {return "N"}
  if (symbol == "7") {return "&"}
  if (symbol == "8") {return "`"}
  if (symbol == "9") {return "z"}
  if (symbol == "0") {return "{"}
  if (symbol == "-") {return "-"}
  if (symbol == "=") {return "F"}
  if (symbol == "~") {return "H"}
  if (symbol == "!") {return "M"}
  if (symbol == "@") {return ">"}
  if (symbol == "#") {return "U"}
  if (symbol == "$") {return "f"}
  if (symbol == "%") {return "$"}
  if (symbol == "^") {return "K"}
  if (symbol == "&") {return "R"}
  if (symbol == "*") {return "("}
  if (symbol == "(") {return "["}
  if (symbol == ")") {return "l"}
  if (symbol == "_") {return "5"}
  if (symbol == "+") {return "C"}
  if (symbol == "[") {return "#"}
  if (symbol == "]") {return "_"}
  if (symbol == ";") {return "m"}
  if (symbol == "'") {return "B"}
  if (symbol == ",") {return "7"}
  if (symbol == ".") {return "y"}
  if (symbol == "/") {return "~"}
  if (symbol == "{") {return "J"}
  if (symbol == "}") {return "h"}
  if (symbol == "|") {return "/"}
  if (symbol == ":") {return "}"}
  if (symbol == `"`) {return "D"}
  if (symbol == "<") {return "<"}
  if (symbol == ">") {return "T"}
  if (symbol == "?") {return "n"}
  else {return symbol}
}

function encodeString(string) {
  var myString = string
  var current = ""
  var suffix = ""
  for (let i = 0; i < string.length + 1; i++) {
    prefix = myString.substring(0,i)
    current = myString.substring(i,i+1)
    suffix = myString.substring(i+1)
    myString = prefix + encodeOne(current) + suffix
  }
  return myString
}

function decodeOne(symbol) {
  if (symbol == "a") {return "i"}
  if (symbol == "b") {return "V"}
  if (symbol == "c") {return "r"}
  if (symbol == "d") {return "R"}
  if (symbol == "e") {return "O"}
  if (symbol == "f") {return "$"}
  if (symbol == "g") {return "n"}
  if (symbol == "h") {return "}"}
  if (symbol == "i") {return "z"}
  if (symbol == "j") {return "M"}
  if (symbol == "k") {return "p"}
  if (symbol == "l") {return ")"}
  if (symbol == "m") {return ";"}
  if (symbol == "n") {return "?"}
  if (symbol == "o") {return "l"}
  if (symbol == "p") {return "k"}
  if (symbol == "q") {return "B"}
  if (symbol == "r") {return "L"}
  if (symbol == "s") {return "g"}
  if (symbol == "t") {return "x"}
  if (symbol == "u") {return "X"}
  if (symbol == "v") {return "I"}
  if (symbol == "w") {return "f"}
  if (symbol == "x") {return "h"}
  if (symbol == "y") {return "."}
  if (symbol == "z") {return "9"}
  if (symbol == "A") {return "v"}
  if (symbol == "B") {return "'"}
  if (symbol == "C") {return "+"}
  if (symbol == "D") {return `"`}
  if (symbol == "E") {return "J"}
  if (symbol == "F") {return "="}
  if (symbol == "G") {return "2"}
  if (symbol == "H") {return "~"}
  if (symbol == "I") {return "c"}
  if (symbol == "J") {return "{"}
  if (symbol == "K") {return "^"}
  if (symbol == "L") {return "G"}
  if (symbol == "M") {return "!"}
  if (symbol == "N") {return "6"}
  if (symbol == "O") {return "Q"}
  if (symbol == "P") {return "W"}
  if (symbol == "Q") {return "j"}
  if (symbol == "R") {return "&"}
  if (symbol == "S") {return "b"}
  if (symbol == "T") {return ">"}
  if (symbol == "U") {return "#"}
  if (symbol == "V") {return "Z"}
  if (symbol == "W") {return "S"}
  if (symbol == "X") {return "Y"}
  if (symbol == "Y") {return "3"}
  if (symbol == "Z") {return "o"}
  if (symbol == "`") {return "8"}
  if (symbol == "1") {return "a"}
  if (symbol == "2") {return "s"}
  if (symbol == "3") {return "q"}
  if (symbol == "4") {return "H"}
  if (symbol == "5") {return "_"}
  if (symbol == "6") {return "K"}
  if (symbol == "7") {return ","}
  if (symbol == "8") {return "`"}
  if (symbol == "9") {return "E"}
  if (symbol == "0") {return "A"}
  if (symbol == "-") {return "-"}
  if (symbol == "=") {return "1"}
  if (symbol == "~") {return "/"}
  if (symbol == "!") {return "w"}
  if (symbol == "@") {return "P"}
  if (symbol == "#") {return "["}
  if (symbol == "$") {return "%"}
  if (symbol == "%") {return "y"}
  if (symbol == "^") {return "F"}
  if (symbol == "&") {return "7"}
  if (symbol == "*") {return "T"}
  if (symbol == "(") {return "*"}
  if (symbol == ")") {return "e"}
  if (symbol == "_") {return "]"}
  if (symbol == "+") {return "d"}
  if (symbol == "[") {return "("}
  if (symbol == "]") {return "U"}
  if (symbol == ";") {return "m"}
  if (symbol == "'") {return "4"}
  if (symbol == ",") {return "u"}
  if (symbol == ".") {return "N"}
  if (symbol == "/") {return "|"}
  if (symbol == "{") {return "0"}
  if (symbol == "}") {return ":"}
  if (symbol == "|") {return "t"}
  if (symbol == ":") {return "D"}
  if (symbol == `"`) {return "C"}
  if (symbol == "<") {return "<"}
  if (symbol == ">") {return "@"}
  if (symbol == "?") {return "5"}
  else {return symbol}
}

function decodeString(string) {
  var myString = string
  var current = ""
  var suffix = ""
  for (let i = 0; i < string.length + 1; i++) {
    prefix = myString.substring(0,i)
    current = myString.substring(i,i+1)
    suffix = myString.substring(i+1)
    myString = prefix + decodeOne(current) + suffix
  }
  return myString
}

function switchToCollection() {
  document.getElementById("collectionButton").style.backgroundColor = "goldenrod"
  document.getElementById("coinmasterButton").style.backgroundColor = "gold"
  document.getElementById("specialsButton").style.backgroundColor = "gold"
  document.getElementById("statisticsButton").style.backgroundColor = "gold"
  document.getElementById("settingsButton").style.backgroundColor = "gold"

  document.getElementById("collection").style.display = "flex"
  document.getElementById("coinMaster").style.display = "none"
  document.getElementById("specials").style.display = "none"
  document.getElementById("statistics").style.display = "none"
  document.getElementById("settings").style.display = "none"

  document.getElementById("item2Box").style.height = ""
}

function switchToCoinmaster() {
  document.getElementById("collectionButton").style.backgroundColor = "gold"
  document.getElementById("coinmasterButton").style.backgroundColor = "goldenrod"
  document.getElementById("specialsButton").style.backgroundColor = "gold"
  document.getElementById("statisticsButton").style.backgroundColor = "gold"
  document.getElementById("settingsButton").style.backgroundColor = "gold"

  document.getElementById("collection").style.display = "none"
  document.getElementById("coinMaster").style.display = "flex"
  document.getElementById("specials").style.display = "none"
  document.getElementById("statistics").style.display = "none"
  document.getElementById("settings").style.display = "none"

  document.getElementById("item2Box").style.height = ""
}

function switchToSpecials() {
  document.getElementById("collectionButton").style.backgroundColor = "gold"
  document.getElementById("coinmasterButton").style.backgroundColor = "gold"
  document.getElementById("specialsButton").style.backgroundColor = "goldenrod"
  document.getElementById("statisticsButton").style.backgroundColor = "gold"
  document.getElementById("settingsButton").style.backgroundColor = "gold"

  document.getElementById("collection").style.display = "none"
  document.getElementById("coinMaster").style.display = "none"
  document.getElementById("specials").style.display = "flex"
  document.getElementById("statistics").style.display = "none"
  document.getElementById("settings").style.display = "none"
  
  if (shopIsOpen == true) {
    toggleShop()
  }

  if (bankIsOpen == true) {
    toggleBank()
  }

  if (prestigeIsOpen == true) {
    togglePrestige()
  }
}

function switchToStatistics() {
  document.getElementById("collectionButton").style.backgroundColor = "gold"
  document.getElementById("coinmasterButton").style.backgroundColor = "gold"
  document.getElementById("specialsButton").style.backgroundColor = "gold"
  document.getElementById("statisticsButton").style.backgroundColor = "goldenrod"
  document.getElementById("settingsButton").style.backgroundColor = "gold"

  document.getElementById("collection").style.display = "none"
  document.getElementById("coinMaster").style.display = "none"
  document.getElementById("specials").style.display = "none"
  document.getElementById("statistics").style.display = "flex"
  document.getElementById("settings").style.display = "none"

  document.getElementById("item2Box").style.height = ""
}

function switchToSettings() {
  document.getElementById("collectionButton").style.backgroundColor = "gold"
  document.getElementById("coinmasterButton").style.backgroundColor = "gold"
  document.getElementById("specialsButton").style.backgroundColor = "gold"
  document.getElementById("statisticsButton").style.backgroundColor = "gold"
  document.getElementById("settingsButton").style.backgroundColor = "goldenrod"

  document.getElementById("collection").style.display = "none"
  document.getElementById("coinMaster").style.display = "none"
  document.getElementById("specials").style.display = "none"
  document.getElementById("statistics").style.display = "none"
  document.getElementById("settings").style.display = "flex"

  document.getElementById("item2Box").style.height = ""

  if (document.getElementById("restoreWindow").style.display == "") {
    document.getElementById("restoreWindow").style.display = "none"
  }
  if (document.getElementById("resetWindow").style.display == "") {
    document.getElementById("resetWindow").style.display = "none"
  }
}

function switchToDev() {
  document.getElementById("collectionButton").style.backgroundColor = "gold"
  document.getElementById("coinmasterButton").style.backgroundColor = "gold"
  document.getElementById("specialsButton").style.backgroundColor = "gold"
  document.getElementById("statisticsButton").style.backgroundColor = "gold"
  document.getElementById("settingsButton").style.backgroundColor = "gold"
  document.getElementById("devButton").style.backgroundColor = "goldenrod"

  document.getElementById("collection").style.display = "none"
  document.getElementById("coinMaster").style.display = "none"
  document.getElementById("specials").style.display = "none"
  document.getElementById("statistics").style.display = "none"
  document.getElementById("settings").style.display = "none"
  document.getElementById("dev").style.display = "flex"
}

function togglePennyGroup(i) {
  if (document.getElementById("pennyGroup"+i).style.display == "block") {
    document.getElementById("pennyGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("pennyGroup"+i).style.display = "block"
  }
}

function toggleNickelGroup(i) {
  if (document.getElementById("nickelGroup"+i).style.display == "block") {
    document.getElementById("nickelGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("nickelGroup"+i).style.display = "block"
  }
}

function toggleDimeGroup(i) {
  if (document.getElementById("dimeGroup"+i).style.display == "block") {
    document.getElementById("dimeGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("dimeGroup"+i).style.display = "block"
  }
}

function toggleQuarterGroup(i) {
  if (document.getElementById("quarterGroup"+i).style.display == "block") {
    document.getElementById("quarterGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("quarterGroup"+i).style.display = "block"
  }
}

function toggleHalfDollarGroup(i) {
  if (document.getElementById("halfDollarGroup"+i).style.display == "block") {
    document.getElementById("halfDollarGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("halfDollarGroup"+i).style.display = "block"
  }
}

function toggleDollarGroup(i) {
  if (document.getElementById("dollarGroup"+i).style.display == "block") {
    document.getElementById("dollarGroup"+i).style.display = "none"
  }
  else {
    document.getElementById("dollarGroup"+i).style.display = "block"
  }
}

function toggleAllPennies() {
  if (document.getElementById("pennies18561858").style.display == "block") {
    for (let i=1; i<=5; i++) {
      document.getElementById("pennyGroup"+i).style.display = "none"
    }
    document.getElementById("pennies18561858").style.display = "none"
    document.getElementById("pennies18591909").style.display = "none"
    document.getElementById("pennies19091958").style.display = "none"
    document.getElementById("pennies19592009").style.display = "none"
    document.getElementById("pennies2010pres").style.display = "none"
  }
  else {
    for (let i=1; i<=5; i++) {
      document.getElementById("pennyGroup"+i).style.display = "block"
    }
    document.getElementById("pennies18561858").style.display = "block"
    document.getElementById("pennies18591909").style.display = "block"
    document.getElementById("pennies19091958").style.display = "block"
    document.getElementById("pennies19592009").style.display = "block"
    document.getElementById("pennies2010pres").style.display = "block"
  }
}

function toggleAllNickels() {
  if (document.getElementById("nickels18661883").style.display == "block") {
    for (let i=1; i<=6; i++) {
      document.getElementById("nickelGroup"+i).style.display = "none"
    }
    document.getElementById("nickels18661883").style.display = "none"
    document.getElementById("nickels18831912").style.display = "none"
    document.getElementById("nickels19131938").style.display = "none"
    document.getElementById("nickels19382003").style.display = "none"
    document.getElementById("nickels20042005").style.display = "none"
    document.getElementById("nickels2006pres").style.display = "none"
  }
  else {
    for (let i=1; i<=6; i++) {
      document.getElementById("nickelGroup"+i).style.display = "block"
    }
    document.getElementById("nickels18661883").style.display = "block"
    document.getElementById("nickels18831912").style.display = "block"
    document.getElementById("nickels19131938").style.display = "block"
    document.getElementById("nickels19382003").style.display = "block"
    document.getElementById("nickels20042005").style.display = "block"
    document.getElementById("nickels2006pres").style.display = "block"
  }
}

function toggleAllDimes() {
  if (document.getElementById("dimes18371891").style.display == "block") {
    for (let i=1; i<=4; i++) {
      document.getElementById("dimeGroup"+i).style.display = "none"
    }
    document.getElementById("dimes18371891").style.display = "none"
    document.getElementById("dimes18921916").style.display = "none"
    document.getElementById("dimes19161945").style.display = "none"
    document.getElementById("dimes1946pres").style.display = "none"
  }
  else {
    for (let i=1; i<=4; i++) {
      document.getElementById("dimeGroup"+i).style.display = "block"
    }
    document.getElementById("dimes18371891").style.display = "block"
    document.getElementById("dimes18921916").style.display = "block"
    document.getElementById("dimes19161945").style.display = "block"
    document.getElementById("dimes1946pres").style.display = "block"
  }
}

function toggleAllQuarters() {
  if (document.getElementById("quarters18381891").style.display == "block") {
    for (let i=1; i<=7; i++) {
      document.getElementById("quarterGroup"+i).style.display = "none"
    }
    document.getElementById("quarters18381891").style.display = "none"
    document.getElementById("quarters18921916").style.display = "none"
    document.getElementById("quarters19161930").style.display = "none"
    document.getElementById("quarters19321998").style.display = "none"
    document.getElementById("quarters19992008").style.display = "none"
    document.getElementById("quarters2009").style.display = "none"
    document.getElementById("quarters20102021").style.display = "none"
  }
  else {
    for (let i=1; i<=7; i++) {
      document.getElementById("quarterGroup"+i).style.display = "block"
    }
    document.getElementById("quarters18381891").style.display = "block"
    document.getElementById("quarters18921916").style.display = "block"
    document.getElementById("quarters19161930").style.display = "block"
    document.getElementById("quarters19321998").style.display = "block"
    document.getElementById("quarters19992008").style.display = "block"
    document.getElementById("quarters2009").style.display = "block"
    document.getElementById("quarters20102021").style.display = "block"
  }
}

function toggleAllHalfDollars() {
  if (document.getElementById("half18391891").style.display == "block") {
    for (let i=1; i<=5; i++) {
      document.getElementById("halfDollarGroup"+i).style.display = "none"
    }
    document.getElementById("half18391891").style.display = "none"
    document.getElementById("half18921915").style.display = "none"
    document.getElementById("half19161947").style.display = "none"
    document.getElementById("half19481963").style.display = "none"
    document.getElementById("half19642001").style.display = "none"
  }
  else {
    for (let i=1; i<=5; i++) {
      document.getElementById("halfDollarGroup"+i).style.display = "block"
    }
    document.getElementById("half18391891").style.display = "block"
    document.getElementById("half18921915").style.display = "block"
    document.getElementById("half19161947").style.display = "block"
    document.getElementById("half19481963").style.display = "block"
    document.getElementById("half19642001").style.display = "block"
  }
}

function toggleAllDollars() {
  if (document.getElementById("dollars18401873").style.display == "block") {
    for (let i=1; i<=8; i++) {
      document.getElementById("dollarGroup"+i).style.display = "none"
    }
    document.getElementById("dollars18401873").style.display = "none"
    document.getElementById("dollars18731878").style.display = "none"
    document.getElementById("dollars18781921").style.display = "none"
    document.getElementById("dollars19211935").style.display = "none"
    document.getElementById("dollars19711978").style.display = "none"
    document.getElementById("dollars19791999").style.display = "none"
    document.getElementById("dollars20002001").style.display = "none"
    document.getElementById("dollars20072011").style.display = "none"
  }
  else {
    for (let i=1; i<=8; i++) {
      document.getElementById("dollarGroup"+i).style.display = "block"
    }
    document.getElementById("dollars18401873").style.display = "block"
    document.getElementById("dollars18731878").style.display = "block"
    document.getElementById("dollars18781921").style.display = "block"
    document.getElementById("dollars19211935").style.display = "block"
    document.getElementById("dollars19711978").style.display = "block"
    document.getElementById("dollars19791999").style.display = "block"
    document.getElementById("dollars20002001").style.display = "block"
    document.getElementById("dollars20072011").style.display = "block"
  }
}

function expandAllGroups() {
  for (let i=1; i<=5; i++) {
    document.getElementById("pennyGroup"+i).style.display = "block"
  }
  document.getElementById("pennies18561858").style.display = "block"
  document.getElementById("pennies18591909").style.display = "block"
  document.getElementById("pennies19091958").style.display = "block"
  document.getElementById("pennies19592009").style.display = "block"
  document.getElementById("pennies2010pres").style.display = "block"

  if (typesUnlocked[2]==1) {
    for (let i=1; i<=6; i++) {
      document.getElementById("nickelGroup"+i).style.display = "block"
    }
    document.getElementById("nickels18661883").style.display = "block"
    document.getElementById("nickels18831912").style.display = "block"
    document.getElementById("nickels19131938").style.display = "block"
    document.getElementById("nickels19382003").style.display = "block"
    document.getElementById("nickels20042005").style.display = "block"
    document.getElementById("nickels2006pres").style.display = "block"
  }
  if (typesUnlocked[3]==1) {
    for (let i=1; i<=4; i++) {
      document.getElementById("dimeGroup"+i).style.display = "block"
    }
    document.getElementById("dimes18371891").style.display = "block"
    document.getElementById("dimes18921916").style.display = "block"
    document.getElementById("dimes19161945").style.display = "block"
    document.getElementById("dimes1946pres").style.display = "block"
  }
  if (typesUnlocked[4]==1) {
    for (let i=1; i<=7; i++) {
      document.getElementById("quarterGroup"+i).style.display = "block"
    }
    document.getElementById("quarters18381891").style.display = "block"
    document.getElementById("quarters18921916").style.display = "block"
    document.getElementById("quarters19161930").style.display = "block"
    document.getElementById("quarters19321998").style.display = "block"
    document.getElementById("quarters19992008").style.display = "block"
    document.getElementById("quarters2009").style.display = "block"
    document.getElementById("quarters20102021").style.display = "block"
  }
  if (typesUnlocked[5]==1) {
    for (let i=1; i<=5; i++) {
      document.getElementById("halfDollarGroup"+i).style.display = "block"
    }
    document.getElementById("half18391891").style.display = "block"
    document.getElementById("half18921915").style.display = "block"
    document.getElementById("half19161947").style.display = "block"
    document.getElementById("half19481963").style.display = "block"
    document.getElementById("half19642001").style.display = "block"
  }
  if (typesUnlocked[6]==1) {
    for (let i=1; i<=8; i++) {
      document.getElementById("dollarGroup"+i).style.display = "block"
    }
    document.getElementById("dollars18401873").style.display = "block"
    document.getElementById("dollars18731878").style.display = "block"
    document.getElementById("dollars18781921").style.display = "block"
    document.getElementById("dollars19211935").style.display = "block"
    document.getElementById("dollars19711978").style.display = "block"
    document.getElementById("dollars19791999").style.display = "block"
    document.getElementById("dollars20002001").style.display = "block"
    document.getElementById("dollars20072011").style.display = "block"
  }
}

function collapseAllGroups() {
  for (let i=1; i<=5; i++) {
    document.getElementById("pennyGroup"+i).style.display = "none"
  }
  document.getElementById("pennies18561858").style.display = "none"
  document.getElementById("pennies18591909").style.display = "none"
  document.getElementById("pennies19091958").style.display = "none"
  document.getElementById("pennies19592009").style.display = "none"
  document.getElementById("pennies2010pres").style.display = "none"

  if (typesUnlocked[2]==1) {
    for (let i=1; i<=6; i++) {
      document.getElementById("nickelGroup"+i).style.display = "none"
    }
    document.getElementById("nickels18661883").style.display = "none"
    document.getElementById("nickels18831912").style.display = "none"
    document.getElementById("nickels19131938").style.display = "none"
    document.getElementById("nickels19382003").style.display = "none"
    document.getElementById("nickels20042005").style.display = "none"
    document.getElementById("nickels2006pres").style.display = "none"
  }
  if (typesUnlocked[3]==1) {
    for (let i=1; i<=4; i++) {
      document.getElementById("dimeGroup"+i).style.display = "none"
    }
    document.getElementById("dimes18371891").style.display = "none"
    document.getElementById("dimes18921916").style.display = "none"
    document.getElementById("dimes19161945").style.display = "none"
    document.getElementById("dimes1946pres").style.display = "none"
  }
  if (typesUnlocked[4]==1) {
    for (let i=1; i<=7; i++) {
      document.getElementById("quarterGroup"+i).style.display = "none"
    }
    document.getElementById("quarters18381891").style.display = "none"
    document.getElementById("quarters18921916").style.display = "none"
    document.getElementById("quarters19161930").style.display = "none"
    document.getElementById("quarters19321998").style.display = "none"
    document.getElementById("quarters19992008").style.display = "none"
    document.getElementById("quarters2009").style.display = "none"
    document.getElementById("quarters20102021").style.display = "none"
  }
  if (typesUnlocked[5]==1) {
    for (let i=1; i<=5; i++) {
      document.getElementById("halfDollarGroup"+i).style.display = "none"
    }
    document.getElementById("half18391891").style.display = "none"
    document.getElementById("half18921915").style.display = "none"
    document.getElementById("half19161947").style.display = "none"
    document.getElementById("half19481963").style.display = "none"
    document.getElementById("half19642001").style.display = "none"
  }
  if (typesUnlocked[6]==1) {
    for (let i=1; i<=8; i++) {
      document.getElementById("dollarGroup"+i).style.display = "none"
    }
    document.getElementById("dollars18401873").style.display = "none"
    document.getElementById("dollars18731878").style.display = "none"
    document.getElementById("dollars18781921").style.display = "none"
    document.getElementById("dollars19211935").style.display = "none"
    document.getElementById("dollars19711978").style.display = "none"
    document.getElementById("dollars19791999").style.display = "none"
    document.getElementById("dollars20002001").style.display = "none"
    document.getElementById("dollars20072011").style.display = "none"
  }
}

function sellDuplicates() {
  if (achHave[216] == 0 && bankAccountIncrease >= bankAccount) {
    achAward(216)
  }
  bankAccount += bankAccountIncrease
  collectionFace -= collectionFaceDecrease
  collectionWorth -= collectionWorthDecrease
  updateBankAccount()
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  duplicatesWorth += bankAccountIncrease
  document.getElementById("duplicatesWorth").innerHTML = "$" + numberWithCommas(duplicatesWorth.toFixed(2))
  bankAccountIncrease = 0
  collectionFaceDecrease = 0
  collectionWorthDecrease = 0
  document.getElementById("bankAccountIncrease").innerHTML = "(+0.00)"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-0.00)"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-0.00)"
  for (let i = 1; i <= coinCutoff; i++) {
    if (quantity[i] > 1) {
      quantity[i] = 1
      document.getElementById("qty"+i).innerHTML = quantity[i]
    }
  }
  document.getElementById("sellDuplicatesActive").style.display = "none"
  document.getElementById("sellDuplicatesInactive").style.display = "block"
  if (achHave[204] == 0) {
    achAward(204)
  }
  if (achHave[205] == 0 && duplicatesWorth >= 1) {
    achAward(205)
  }
  else if (achHave[206] == 0 && duplicatesWorth >= 10) {
    achAward(206)
  }
  else if (achHave[207] == 0 && duplicatesWorth >= 100) {
    achAward(207)
  }
  else if (achHave[208] == 0 && duplicatesWorth >= 1000) {
    achAward(208)
  }
  else if (achHave[209] == 0 && duplicatesWorth >= 10000) {
    achAward(209)
  }
  else if (achHave[210] == 0 && duplicatesWorth >= 100000) {
    achAward(210)
  }
  else if (achHave[211] == 0 && duplicatesWorth >= 1000000) {
    achAward(211)
  }
  else if (achHave[212] == 0 && duplicatesWorth >= 10000000) {
    achAward(212)
  }
  else if (achHave[213] == 0 && duplicatesWorth >= 100000000) {
    achAward(213)
  }
  else if (achHave[214] == 0 && duplicatesWorth >= 1000000000) {
    achAward(214)
  }
  else if (achHave[215] == 0 && duplicatesWorth >= 1000000000000) {
    achAward(215)
  }

}

function autoSellDups() {
  if (numberDescensionsComplete[9] >= 1 && toggleAutoSellDups == true) {
    sellDuplicates()
  }
}

function toggleDupSell() {
  if (toggleAutoSellDups == false) {
    toggleAutoSellDups = true
  }
  else {
    toggleAutoSellDups = false
  }
}

function toggleRollBuy() {
  if (toggleAutoBuyRolls == false) {
    toggleAutoBuyRolls = true
  }
  else {
    toggleAutoBuyRolls = false
  }
}

function toggleHyp() {
  if (toggleHypnotic == false) {
    toggleHypnotic = true
    if (seekerPillActive == 1) {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.gif)"
      document.getElementById("seekerArea").style.backgroundSize = "cover"
    }
  }
  else {
    toggleHypnotic = false
    if (seekerPillActive == 1) {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.png)"
      document.getElementById("seekerArea").style.backgroundSize = "cover"
    }
  }
}

function shiftFeed() {
  for (let i = 1; i < feedCount; i++) {
    var ip1 = i + 1
    document.getElementById("feedDiv"+i).innerHTML = document.getElementById("feedDiv"+ip1).innerHTML
  }
}

const disableselect = (e) => {  
    return false  
}  
document.onselectstart = disableselect

function collectionJump(i) {
  switchToCollection()
  expandAllGroups()
  if (document.getElementsByName('show')[1].checked == true) {
    document.getElementsByName('show')[0].checked = true
    showHave()
  }
  document.getElementById("qty"+i).scrollIntoView({
    behavior: 'auto',
    block: 'start',
    inline: 'center'
  })
  document.getElementById("collection").blur()
  
  document.getElementById("qty"+i).parentElement.style.backgroundColor = "rgb(255,255,0)"
  var rValueStart = 255
  var gValueStart = 255
  var bValueStart = 0
  var rValueFinal = 0
  var gValueFinal = 0
  var bValueFinal = 0
  if (rarityWord[i] == "COMMON") {
    rValueFinal = 149
    gValueFinal = 255
    bValueFinal = 149
  }
  else if (rarityWord[i] == "UNCOMMON") {
    rValueFinal = 160
    gValueFinal = 160
    bValueFinal = 255
  }
  else if (rarityWord[i] == "RARE") {
    rValueFinal = 255
    gValueFinal = 95
    bValueFinal = 95
  }
  else {
    rValueFinal = 255
    gValueFinal = 85
    bValueFinal = 255
  }
  var now4 = Date.now()
  window.requestAnimationFrame(increment4)

  function increment4() {
    var tTotal4 = (Date.now() - now4) / 1000
    rValue = rValueStart + (rValueFinal - rValueStart) / 3 * Math.min(tTotal4, 3)
    gValue = gValueStart + (gValueFinal - gValueStart) / 3 * Math.min(tTotal4, 3)
    bValue = bValueStart + (bValueFinal - bValueStart) / 3 * Math.min(tTotal4, 3)
    document.getElementById("qty"+i).parentElement.style.backgroundColor = "rgb(" + rValue + "," + gValue + "," + bValue + ")"
    if (tTotal4 <= 3) {
      window.requestAnimationFrame(increment4)
    }
    else {
      return
    }
  }
}

function addSeeker(i) {
  seekerHired[i] = 1
  fTotal[i] = 1
  var nameIndex = Math.ceil(Math.random() * 100)
  seekerName[i] = seekerNames[nameIndex]
  seekerLevel[i] = 1
  seekerSearchesToLevel[i] = seekerSearchesToLevelVector[1]

  seekerFuelLeft[i] = seekerFuelTime[seekerFuelTimeUpgrade] //fuel in seconds
  seekerProgress[i] = 0
  seekerSearches[i] = 0
  document.getElementById("seekerboxBlank"+i).style.display = "none"
  document.getElementById("seekerboxRetired"+i).style.display = "none"
  document.getElementById("seekerbox"+i).style.display = "grid"
  document.getElementById("seeker"+i+"name").innerHTML = seekerName[i]
  document.getElementById("seeker"+i+"level").innerHTML = "Lvl 1"
  document.getElementById("seeker"+i+"expbar").value = 0
  document.getElementById("seeker"+i+"expbar").style.display = ""
  document.getElementById("seeker"+i+"LevelUpButton").style.display = "none"

  document.getElementById("statSeeker"+i+"Name").innerHTML = seekerName[i]
  document.getElementById("statSeeker"+i+"Lvl").innerHTML = seekerLevel[i]
  document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerSearches[i]
  document.getElementById("statSeeker"+i+"SearchesToLvl").innerHTML = seekerSearchesToLevel[i]
  document.getElementById("statSeeker"+i+"ProgressToLvl").innerHTML = "0%"
  var retireChance = 100 * (1 / (3 * seekerSearchesToLevel[i]))
  document.getElementById("statSeeker"+i+"RetireChance").innerHTML = retireChance.toFixed(4) + "%"
  document.getElementById("statSeeker"+i+"ChanceNextLvl").innerHTML
    = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])) / 10 + "%"
  document.getElementById("statSeeker"+i+"ChanceLvl10").innerHTML
    = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])
      * 0.7164 ** (9 - seekerLevel[i])) / 10 + "%"
  if ((i == 1 && numberDescensionsComplete[8] >= 2) || (i == 2 && numberDescensionsComplete[8] >= 3)
      || (i == 3 && numberDescensionsComplete[8] >= 4) || (i == 4 && numberDescensionsComplete[8] >= 5)
      || (i == 5 && numberDescensionsComplete[8] >= 6) || (i == 6 && numberDescensionsComplete[8] >= 7)
      || (i == 7 && numberDescensionsComplete[8] >= 8)) {
    goldenBuffaloCount += 45
    for (let j = 1; j <= 9; j++) {
      levelUpSeeker(i,event)
    }
  }
  var numSeekersHired = seekerHired[1] + seekerHired[2] + seekerHired[3] + seekerHired[4] + seekerHired[5] + seekerHired[6] + seekerHired[7]
  if (achHave[99] == 0 && numSeekersHired >= 1) {
    achAward(99)
  }
  else if (achHave[100] == 0 && numSeekersHired >= 3) {
    achAward(100)
  }
  else if (achHave[101] == 0 && numSeekersHired >= 5) {
    achAward(101)
  }
  else if (achHave[102] == 0 && numSeekersHired >= 7) {
    achAward(102)
  }
}

function shuffleArray(array) {
  for (var k = array.length - 1; k > 0; k--) {
      var j = Math.floor(Math.random() * (k + 1));
      var temp = array[k];
      array[k] = array[j];
      array[j] = temp;
  }
  return array
}

function numberWithCommas(x) {
  if (x < 10 ** 9) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  else if (10 ** 9 <= x && x < 10 ** 12) {
    var xB = Math.round(1000 * (x / 10 ** 9)) / 1000
    return xB + " B"
  }
  else if (10 ** 12 <= x && x < 10 ** 15) {
    var xT = Math.round(1000 * (x / 10 ** 12)) / 1000
    return xT + " T"
  }
  else if (10 ** 15 <= x && x < 10 ** 18) {
    var xQa = Math.round(1000 * (x / 10 ** 15)) / 1000
    return xQa + " Qa"
  }
  else if (10 ** 18 <= x && x < 10 ** 21) {
    var xQi = Math.round(1000 * (x / 10 ** 18)) / 1000
    return xQi + " Qi"
  }
}

function updateBankAccount() {
  bankAccount = Math.round(100 * bankAccount) / 100
  document.getElementById("bankAccount").innerHTML = "$" + numberWithCommas(bankAccount.toFixed(2))
  for (let j = 2; j <= myLevel; j++) {
    if (bankAccount >= lvlUpgradeCost[j]) { //Make it green if level-appropriate and can afford
      document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(149, 255, 149)"
      document.getElementById("lvl"+j+"Upgrade").onmouseover = function(){
        document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(128, 220, 128)"
      }
      document.getElementById("lvl"+j+"Upgrade").onmouseleave = function(){
        document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(149, 255, 149)"
      }
    }
    else { //Make it yellow if you are level-appropriate but can't afford
      document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(248, 244, 31)"
      document.getElementById("lvl"+j+"Upgrade").onmouseover = function(){
        document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(200, 194, 15)"
      }
      document.getElementById("lvl"+j+"Upgrade").onmouseleave = function(){
        document.getElementById("lvl"+j+"Upgrade").style.backgroundColor = "rgb(248, 244, 31)"
      }
    }
  }
  //Traveling salesman buy buttons enabled/disabled
  if (bankAccount < shovelCost) {
    document.getElementById("buyButton0").disabled = true
  }
  else {
    document.getElementById("buyButton0").disabled = false
  }
  for (let m = 1; m <= 3; m++) {
    if (bankAccount < salesmanCoinCost[m]) {
      document.getElementById("buyButton"+m).disabled = true
    }
    else {
      document.getElementById("buyButton"+m).disabled = false
    }
  }
  if (bankAccount < 100) {
    document.getElementById("buyPillButton").disabled = true
  }
  else {
    document.getElementById("buyPillButton").disabled = false
  }
}

function fuelSeeker(i) {
  var dripDiv = document.createElement("div")
  dropCount++
  if (achHave[116] == 0 && dropCount >= 10) {
    achAward(116)
  }
  document.getElementById("seekerbox"+i).appendChild(dripDiv)
  //dripDiv.innerHTML = "<img src='refuel.png'>"
  dripDiv.style.background = "url('refuel.png')"
  dripDiv.style.backgroundSize = "contain"
  dripDiv.style.backgroundRepeat = "no-repeat"
  dripDiv.style.width = "6.5%"
  dripDiv.style.height = "13%"
  dripDiv.style.display = "inline-block"
  dripDiv.style.position = "absolute"
  dripDiv.style.top = "0%"

  var lastUpdate2 = Date.now()
  var tTotal2 = 0
  var dy = 0
  window.requestAnimationFrame(increment2)

  function increment2() {
    var now2 = Date.now()
    var dt2 = (now2 - lastUpdate2) / 1000
    lastUpdate2 = now2
    tTotal2 += dt2
    dy = 50 * tTotal2 ** 2 - 2
    dripDiv.style.top = dy + "%"
    if (dy < document.getElementById("seekerbox"+i).getBoundingClientRect().top / document.documentElement.clientHeight * 100) {
      window.requestAnimationFrame(increment2)
    }
    else {
      dripDiv.remove()
      dropCount--
      seekerFuelLeft[i] = seekerFuelTime[seekerFuelTimeUpgrade]
      fTotal[i] = 1

      var lastUpdate3 = Date.now()
      var tTotal3 = 0
      var rValue = 92
      var gValue = 255
      var bValue = 92
      window.requestAnimationFrame(increment3)

      //Flood seeker box with green which fades
      function increment3() {
        var now3 = Date.now()
        var dt3 = (now3 - lastUpdate3) / 1000
        lastUpdate3 = now3
        tTotal3 += dt3
        rValue = 92 + 163*tTotal3 / 2
        gValue = 255
        bValue = 92 + 163*tTotal3 / 2
        document.getElementById("seekerbox"+i).style.backgroundColor = "rgb(" + rValue + ", " + gValue + ", " + bValue + ")"
        if (tTotal3 <= 2) {
          window.requestAnimationFrame(increment3)
        }
        else {return}
      }
      return
    }
  }
  if (achHave[103] == 0) {
    achAward(103)
  }
}

function retireSeeker(i) {
  seekerHired[i] = 0
  document.getElementById("seekerbox"+i).style.display = "none"
  document.getElementById("seekerboxRetired"+i).style.display = ""
  document.getElementById("seekerboxRetiredText"+i).innerHTML = seekerName[i] + "<br> has quit."
  if (achHave[104] == 0) {
    achAward(104)
  }
}

function resetSeeker(i) {
  seekerSearches[i] = 0
  seekerSearchesToLevel[i] = seekerSearchesToLevelVector[1]
  document.getElementById("seekerboxBlank"+i).style.display = ""
  document.getElementById("seekerboxRetired"+i).style.display = "none"
}

function prepareToLevelSeeker(i,lvl) { //"i" is which seeker, "lvl" is current level before leveling up
  seekerReadyToLevel[i] = 1
  document.getElementById("seeker"+i+"expbar").style.display = "none"
  document.getElementById("seeker"+i+"LevelUpButton").style.display = ""
  document.getElementById("seeker"+i+"LevelUpButton").innerHTML = "x" + lvl
  if (lvl < 9) {
    document.getElementById("seeker"+i+"level").innerHTML = "Lvl " + lvl
    document.getElementById("seeker"+i+"level").style.background = "url('icongolddouble.png')"
    document.getElementById("seeker"+i+"level").style.backgroundSize = "contain"
    document.getElementById("seeker"+i+"level").style.backgroundRepeat = "no-repeat"
    document.getElementById("seeker"+i+"level").style.backgroundPositionY = "40%"
  }
  else {
    document.getElementById("seeker"+i+"level").innerHTML = "Lvl " + lvl
    document.getElementById("seeker"+i+"level").style.background = "url('icondiamonddouble.png')"
    document.getElementById("seeker"+i+"level").style.backgroundSize = "contain"
    document.getElementById("seeker"+i+"level").style.backgroundRepeat = "no-repeat"
    document.getElementById("seeker"+i+"level").style.backgroundPositionY = "40%"
  }
}

function levelUpSeeker(i,event) {
  event.stopPropagation()
  if (goldenBuffaloCount >= seekerLevel[i]) {
    seekerReadyToLevel[i] = 0
    seekerLevel[i]++
    seekerSearches[i] = 0
    seekerSearchesToLevel[i] = seekerSearchesToLevelVector[seekerLevel[i]]
    document.getElementById("seeker"+i+"LevelUpButton").style.display = "none"
    document.getElementById("seeker"+i+"level").innerHTML = "Lvl " + seekerLevel[i]
    document.getElementById("seeker"+i+"level").style.background = ""
    if (seekerLevel[i] < 10) {
      document.getElementById("seeker"+i+"expbar").style.display = ""
      document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerSearches[i]
      document.getElementById("statSeeker"+i+"SearchesToLvl").innerHTML = seekerSearchesToLevel[i]
      document.getElementById("statSeeker"+i+"ProgressToLvl").innerHTML = "0%"
      var retireChance = 100 * (1 / (3 * seekerSearchesToLevel[i]))
      document.getElementById("statSeeker"+i+"RetireChance").innerHTML = retireChance.toFixed(4) + "%"
      document.getElementById("statSeeker"+i+"ChanceNextLvl").innerHTML
        = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])) / 10 + "%"
      document.getElementById("statSeeker"+i+"ChanceLvl10").innerHTML
        = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])
          * 0.7164 ** (9 - seekerLevel[i])) / 10 + "%"
    }
    else { //If it just leveled up to lvl 10
      document.getElementById("seeker"+i+"expbar").style.display = "none"
      document.getElementById("maxLevelSeeker"+i).style.display = ""
      document.getElementById("seeker"+i+"number").style.backgroundColor = "rgb(224, 129, 255)"
      document.getElementById("seeker"+i+"name").style.backgroundColor = "rgb(224, 129, 255)"
      document.getElementById("seeker"+i+"active").style.backgroundColor = "rgb(224, 129, 255)"
      document.getElementById("seeker"+i+"cd").style.backgroundColor = "rgb(224, 129, 255)"
      document.getElementById("seeker"+i+"level").style.backgroundColor = "cyan"
      document.getElementById("seeker"+i+"box").style.backgroundColor = "cyan"
      document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = ""
      document.getElementById("statSeeker"+i+"SearchesInLvl").setAttribute("colspan","6")
      document.getElementById("statSeeker"+i+"SearchesToLvl").style.display = "none"
      document.getElementById("statSeeker"+i+"ProgressToLvl").style.display = "none"
      document.getElementById("statSeeker"+i+"RetireChance").style.display = "none"
      document.getElementById("statSeeker"+i+"ChanceNextLvl").style.display = "none"
      document.getElementById("statSeeker"+i+"ChanceLvl10").style.display = "none"
      if (i < 8) {
        document.getElementById("statSeeker"+i+"SearchesInLvl").style.backgroundColor = seekerClueColor[i]
        document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerClue[i]
      }
    }
    goldenBuffaloCount -= seekerLevel[i] - 1
    document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
    if (seekerLevel[i] > highestSeekerLevel) {
      highestSeekerLevel++
    }
    else if (seekerLevel[i] == 10) { //If it levels up to 10 but the highest seeker lvl was already 10, so this was not the first 10
      highestSeekerLevel += 10
    }
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    //updateSeekerStatsOnly()
    document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"
    document.getElementById("seekerRank").innerHTML = "Rank: " + highestSeekerLevel
    document.getElementById("seeker"+i+"expbar").value = 0
    document.getElementById("statSeeker"+i+"Lvl").innerHTML = seekerLevel[i]
    if (achHave[111] == 0) {
      achAward(111)
    }
    if (achHave[112] == 0 && seekerLevel[i] == 5) {
      achAward(112)
    }
    else if (achHave[113] == 0 && seekerLevel[i] == 10) {
      achAward(113)
    }
    if (achHave[114] == 0 && highestSeekerLevel == 70) {
      achAward(114)
    }
  }
}

function goldBuffalo() {
  if (boughtUpgrade[6] == 1 || ascensionLevel >= 1) {
    var xp = 5 + Math.ceil(Math.random() * 83)
    var yp = 2 + Math.ceil(Math.random() * 86)
    document.getElementById("clickable").style.display = "block";
    document.getElementById("clickableButton").style.backgroundImage = "url('goldbuffalo.png')";
    document.getElementById("clickableButton").style.backgroundRepeat = "no-repeat";
    document.getElementById("clickableButton").style.backgroundSize = "4vw";
    document.getElementById("clickableButton").style.backgroundPosition = "center";
    document.getElementById("clickableButton").style.backgroundColor = "transparent";
    document.getElementById("clickable").style.left = xp + "%" //6 to 88
    document.getElementById("clickable").style.top = yp + "%" //3 to 88
    document.getElementById("clickableButton").style.border = "1px solid black"
    setTimeout(function(){document.getElementById("clickable").style.display = "none"},60000)
  }
}

function getGoldBuffalo() {
  document.getElementById("clickable").style.display = "none";
  var num = Math.ceil(buffaloUB * Math.random())
  goldenBuffaloCount += num
  goldenBuffalosFound += num
  document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
  document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
  var coinSingPlural = ""
  if (num > 1) {
    coinSingPlural = "s"
  }
  shiftFeed()
  document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You found "
    + num + " Golden Buffalo nickel" + coinSingPlural + "!")
  goldenAchCheck()
}

function goldenAchCheck() {
  if (achHave[89] == 0 && goldenBuffalosFound >= 1) {
    achAward(89)
  }
  else if (achHave[90] == 0 && goldenBuffalosFound >= 10) {
    achAward(90)
  }
  else if (achHave[91] == 0 && goldenBuffalosFound >= 100) {
    achAward(91)
  }
  else if (achHave[92] == 0 && goldenBuffalosFound >= 500) {
    achAward(92)
  }
  else if (achHave[93] == 0 && goldenBuffalosFound >= 1000) {
    achAward(93)
  }
  else if (achHave[94] == 0 && goldenBuffalosFound >= 5000) {
    achAward(94)
  }
  else if (achHave[95] == 0 && goldenBuffalosFound >= 10000) {
    achAward(95)
  }
  else if (achHave[96] == 0 && goldenBuffalosFound >= 25000) {
    achAward(96)
  }
  if (achHave[97] == 0 && goldenBuffaloCount >= 300) {
    achAward(97)
  }
  if (achHave[98] == 0 && num == 12) {
    achAward(98)
  }
}

function vendingMachine1Collect() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  document.getElementById("ready1").style.display = "none"
  document.getElementById("timer1").style.display = ""
  startTime[1] = Date.now()
  specialReady[1] = 0
  updateSpecialsBadge()

  vending1NumSearches++
  document.getElementById("vending1NumSearches").innerHTML = numberWithCommas(vending1NumSearches)
  var priorNewsFound = vending1NumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  for (let i = coinCutoffVector[1]+1; i <= coinCutoffVector[4]; i++) {
    v[i] = 1 + vendingMachinePower * probability[i] * fudgeFactorFixed
    q[i] = Math.floor(Math.random() * v[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        vending1NumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  vending1NumCoins += qsum
  countTotalCoins()
  document.getElementById("vending1NumCoins").innerHTML = numberWithCommas(vending1NumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found nothing in Vending Machine 1."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  shiftFeed()
  var pluralLetter1 = "s"
  var pluralLetter2 = "s"
  var pluralLetter3 = "s"
  if (qsum == 1) {pluralLetter1 = ""}
  if (qNewSum == 1) {pluralLetter2 = ""}
  if (qOldSum == 1) {pluralLetter3 = ""}
  document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:black'> You found " + numberWithCommas(qsum)
    + " coin" + pluralLetter1 + " in Vending Machine 1, including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin"
    + pluralLetter2 + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
  //Update stats
  if (vending1NumNew > priorNewsFound) {
    document.getElementById("vending1NumNew").innerHTML = numberWithCommas(vending1NumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[123] == 0) {
    achAward(123)
  }
  else if (achHave[124] == 0 && vending1NumSearches + vending2NumSearches == 10) {
    achAward(124)
  }
  else if (achHave[125] == 0 && vending1NumSearches + vending2NumSearches == 50) {
    achAward(125)
  }
  else if (achHave[126] == 0 && vending1NumSearches + vending2NumSearches == 100) {
    achAward(126)
  }
  else if (achHave[127] == 0 && vending1NumSearches + vending2NumSearches == 500) {
    achAward(127)
  }
  else if (achHave[128] == 0 && vending1NumSearches + vending2NumSearches == 1000) {
    achAward(128)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function vendingMachine2Collect() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  document.getElementById("ready2").style.display = "none"
  document.getElementById("timer2").style.display = ""
  startTime[2] = Date.now()
  specialReady[2] = 0
  updateSpecialsBadge()

  vending2NumSearches++
  document.getElementById("vending2NumSearches").innerHTML = numberWithCommas(vending2NumSearches)
  var priorNewsFound = vending2NumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  for (let i = coinCutoffVector[1]+1; i <= coinCutoffVector[4]; i++) {
    v[i] = 1 + vendingMachinePower * probability[i] * fudgeFactorFixed
    q[i] = Math.floor(Math.random() * v[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        vending2NumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin
        
        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  vending2NumCoins += qsum
  countTotalCoins()
  document.getElementById("vending2NumCoins").innerHTML = numberWithCommas(vending2NumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found nothing in Vending Machine 2."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  shiftFeed()
  var pluralLetter1 = "s"
  var pluralLetter2 = "s"
  var pluralLetter3 = "s"
  if (qsum == 1) {pluralLetter1 = ""}
  if (qNewSum == 1) {pluralLetter2 = ""}
  if (qOldSum == 1) {pluralLetter3 = ""}
  document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:black'> You found " + numberWithCommas(qsum)
    + " coin" + pluralLetter1 + " in Vending Machine 2, including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin"
    + pluralLetter2 + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
  //Update stats
  if (vending2NumNew > priorNewsFound) {
    document.getElementById("vending2NumNew").innerHTML = numberWithCommas(vending2NumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[123] == 0) {
    achAward(123)
  }
  else if (achHave[124] == 0 && vending1NumSearches + vending2NumSearches == 10) {
    achAward(124)
  }
  else if (achHave[125] == 0 && vending1NumSearches + vending2NumSearches == 50) {
    achAward(125)
  }
  else if (achHave[126] == 0 && vending1NumSearches + vending2NumSearches == 100) {
    achAward(126)
  }
  else if (achHave[127] == 0 && vending1NumSearches + vending2NumSearches == 500) {
    achAward(127)
  }
  else if (achHave[128] == 0 && vending1NumSearches + vending2NumSearches == 1000) {
    achAward(128)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function seekerPillStart() {
  if (numberPills > 0) {
    numberPills--
    numberPillsUsed++
    document.getElementById("pillQuantity").innerHTML = "Qty:<br>" + numberPills
    document.getElementById("youHave").innerHTML = "(You have: " + numberPills + ")"
    startTime[3] = Date.now()
    document.getElementById("ready3").style.display = "none"
    document.getElementById("timer3").style.display = ""
    if (toggleHypnotic == true) {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.gif)"
    }
    else {
      document.getElementById("seekerArea").style.backgroundImage = "url(hypnotic.png)"
    }
    document.getElementById("seekerArea").style.backgroundSize = "cover"
    specialReady[3] = 0
    updateSpecialsBadge()
    seekerPower *= 10
    updateSeekerStatsOnly()
    document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"
    seekerPillStartTime = Date.now()
    seekerPillActive = 1
    if (achHave[129] == 0) {
      achAward(129)
    }
    else if (achHave[130] == 0 && numberPillsUsed == 10) {
      achAward(130)
    }
  }
}

function seekerPillStop() {
  document.getElementById("seekerArea").style.backgroundImage = ""
  seekerPower /= 10
  updateSeekerStatsOnly()
  document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"
  seekerPillActive = 0
}

function buyPill() {
  if (bankAccount >= pillCost) {
    var scrolledToBottom = true
    if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
      scrolledToBottom = false
    }
    bankAccount -= pillCost
    updateBankAccount()
    numberPills++
    numberPillsBought++
    if (numberDescensionsComplete[2] < 10) {
      document.getElementById("pillQuantity").innerHTML = "Qty:<br>" + numberPills
    }
    document.getElementById("youHave").innerHTML = "(You have: " + numberPills + ")"
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You bought a <b>"
      + "<span style='color:black'>S</span>" + "<span style='color:green'>u</span>" + "<span style='color:blue'>p</span>"
      + "<span style='color:black'>e</span>" + "<span style='color:green'>r</span> " + "<span style='color:blue'>S</span>"
      + "<span style='color:black'>e</span>" + "<span style='color:green'>e</span>" + "<span style='color:blue'>k</span>"
      + "<span style='color:black'>e</span>" + "<span style='color:green'>r</span> " + "<span style='color:blue'>P</span>"
      + "<span style='color:black'>i</span>" + "<span style='color:green'>l</span>" + "<span style='color:blue'>l</span>"
      + "</b> from the Traveling Salesman for $" + pillCost + "."
    //feedArea.scrollTo(0,feedArea.scrollHeight)
    if (achHave[131] == 0) {
      achAward(131)
    }
    else if (achHave[132] == 0 && numberPillsBought == 10) {
      achAward(132)
    }
    else if (achHave[133] == 0 && numberPillsBought == 100) {
      achAward(133)
    }
    else if (achHave[134] == 0 && numberPillsBought == 1000) {
      achAward(134)
    }
    else if (achHave[135] == 0 && numberPillsBought == 10000) {
      achAward(135)
    }
    if (scrolledToBottom == true) {
      feedArea.scrollTo(0,feedArea.scrollHeight)
    }
  }
}

function toggleShop() {
  if (shopIsOpen == true) { //If the shop is open...
    //Shrink the salesman div again
    for (let i = 1; i <= 10; i++) {
      if (specialIsUnlocked[i] == true && i != 4) {
        document.getElementById("specials"+i+"Unlocked").style.display = "flex"
      }
      else if (specialIsUnlocked[i] == false && i != 4) {
        document.getElementById("specials"+i+"Locked").style.display = "flex"
      }
    }
    shopIsOpen = false
    document.getElementById("specialsContainer").classList.remove("specialsMod")
    document.getElementById("specialsContainer").classList.add("specials")
    document.getElementById("specials4Unlocked").classList.remove("specials4Mod")
    document.getElementById("specials4Unlocked").classList.add("specials4")
    document.getElementById("traderInventory").style.display = "none"
    updateSpecialsEnabled()
  }
  else { //If the shop is closed
    for (let m = 1; m <= 3; m++) {
      if (m == 1) {
        if (boughtShovel == false && myLevel >= 60) {
          document.getElementById("shovel4").innerHTML = "Price: $" + shovelCost.toFixed(2)
          document.getElementById("buyButton0").onclick = function(){buyItem(0,0)}
          document.getElementById("shovelDiv").style.display = "grid"
          document.getElementById("item1").style.display = "none"
        }
        else {
          document.getElementById("shovelDiv").style.display = "none"
          document.getElementById("shovelBoughtDiv").style.display = "none"
          if (itemBought[1] == 1) {
            document.getElementById("item1").style.display = "none"
          }
          else {
            document.getElementById("item1").style.display = "grid"
          }
        }
      }
      if (rarityWord[inventoryIndex[m]] == "UNCOMMON") {
        document.getElementById("item"+m).style.backgroundColor = uncommonColor
      }
      else if (rarityWord[inventoryIndex[m]] == "RARE") {
        document.getElementById("item"+m).style.backgroundColor = rareColor
      }
      else if (rarityWord[inventoryIndex[m]] == "ULTRA RARE") {
        document.getElementById("item"+m).style.backgroundColor = ultraRareColor
      }
      document.getElementById("item"+m+"_1").src = "Coin Pictures/" + inventoryIndex[m] + "front.jpg"
      document.getElementById("item"+m+"_2").innerHTML
        = document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
      document.getElementById("item"+m+"_3").innerHTML = capitalizeFirstLetter(coinType[inventoryIndex[m]])
      document.getElementById("item"+m+"_4").innerHTML = capitalizeFirstLetter(rarityWord[inventoryIndex[m]].toLowerCase())
      if (quantity[inventoryIndex[m]] > 0) {
        document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
      }
      else {
        document.getElementById("item"+m+"_5").innerHTML = "New"
      }
      salesmanCoinCost[m] = 100 * worth[inventoryIndex[m]]
      document.getElementById("item"+m+"_6").innerHTML = "Price: $" + salesmanCoinCost[m].toFixed(2)
      document.getElementById("buyButton"+m).onclick = function(){buyItem(m)}
    }
    if (itemBought[2] == 1) {
      document.getElementById("item2").style.display = "none"
    }
    else {
      document.getElementById("item2").style.display = "grid"
    }
    if (itemBought[3] == 1) {
      document.getElementById("item3").style.display = "none"
    }
    else {
      document.getElementById("item3").style.display = "grid"
    }

    document.getElementById("specials1Locked").style.display = "none"
    document.getElementById("specials1LockedMod").style.display = "none"
    document.getElementById("specials1Unlocked").style.display = "none"
    document.getElementById("specials2Locked").style.display = "none"
    document.getElementById("specials2LockedMod").style.display = "none"
    document.getElementById("specials2Unlocked").style.display = "none"
    document.getElementById("specials3Locked").style.display = "none"
    document.getElementById("specials3LockedMod").style.display = "none"
    document.getElementById("specials3Unlocked").style.display = "none"
    document.getElementById("specials5Locked").style.display = "none"
    document.getElementById("specials5LockedMod").style.display = "none"
    document.getElementById("specials5Unlocked").style.display = "none"
    document.getElementById("specials6Locked").style.display = "none"
    document.getElementById("specials6LockedMod").style.display = "none"
    document.getElementById("specials6Unlocked").style.display = "none"
    document.getElementById("specials7Locked").style.display = "none"
    document.getElementById("specials7LockedMod").style.display = "none"
    document.getElementById("specials7Unlocked").style.display = "none"
    document.getElementById("specials8Locked").style.display = "none"
    document.getElementById("specials8LockedMod").style.display = "none"
    document.getElementById("specials8Unlocked").style.display = "none"
    document.getElementById("specials9Locked").style.display = "none"
    document.getElementById("specials9LockedMod").style.display = "none"
    document.getElementById("specials9Unlocked").style.display = "none"
    document.getElementById("specials10Locked").style.display = "none"
    document.getElementById("specials10Unlocked").style.display = "none"
    shopIsOpen = true
    //Maximize the salesman div
    if (salesmanPresent == true) {
      if (numberDescensionsComplete[2] >= 1) {
        document.getElementById("pillPrice").innerHTML = "Price: $20.00"
      }
      document.getElementById("traderInventory").style.display = ""
    }
    document.getElementById("specialsContainer").classList.remove("specials")
    document.getElementById("specialsContainer").classList.add("specialsMod")
    document.getElementById("specials4Unlocked").classList.remove("specials4")
    document.getElementById("specials4Unlocked").classList.add("specials4Mod")
    specialReady[4] = 0
    updateSpecialsBadge()
  }
}

function travelingSalesmanArrive() {
  salesmanPresent = true
  specialReady[4] = 1
  updateSpecialsBadge()
  if (achHave[145] == 0 && shopIsOpen == true) {
    achAward(145)
  }
  if (salesmanLevel == 1) { //If he sells only uncommon or rarer
    for (let m = 1; m <= 3; m++) {
      if (m == 1 && boughtShovel == false && myLevel >= 60) {
        document.getElementById("shovel4").innerHTML = "Price: $" + shovelCost.toFixed(2)
        document.getElementById("buyButton0").onclick = function(){buyItem(0,0)}
      }
      else {
        var n = Math.ceil(Math.random() * uncommonPlusCumulMintage[uncommonPlusNumber])
        for (let j = 1; j <= uncommonPlusNumber; j++) {
          if (uncommonPlusCumulMintage[j-1] < n && n <= uncommonPlusCumulMintage[j]) {
            inventoryIndex[m] = uncommonPlusEnum[j]
          }
        }
        if (rarityWord[inventoryIndex[m]] == "UNCOMMON") {
          document.getElementById("item"+m).style.backgroundColor = uncommonColor
        }
        else if (rarityWord[inventoryIndex[m]] == "RARE") {
          document.getElementById("item"+m).style.backgroundColor = rareColor
        }
        else if (rarityWord[inventoryIndex[m]] == "ULTRA RARE") {
          document.getElementById("item"+m).style.backgroundColor = ultraRareColor
        }
        document.getElementById("item"+m+"_1").src = "Coin Pictures/" + inventoryIndex[m] + "front.jpg"
        document.getElementById("item"+m+"_2").innerHTML
          = document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
        document.getElementById("item"+m+"_3").innerHTML = capitalizeFirstLetter(coinType[inventoryIndex[m]])
        document.getElementById("item"+m+"_4").innerHTML = capitalizeFirstLetter(rarityWord[inventoryIndex[m]].toLowerCase())
        if (quantity[inventoryIndex[m]] > 0) {
          document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
        }
        else {
          document.getElementById("item"+m+"_5").innerHTML = "New"
        }
        salesmanCoinCost[m] = 100 * worth[inventoryIndex[m]]
        document.getElementById("item"+m+"_6").innerHTML = "Price: $" + salesmanCoinCost[m].toFixed(2)
        document.getElementById("buyButton"+m).onclick = function(){buyItem(m)}
      }
    }
  }
  else if (salesmanLevel == 2) { //If he sells only rare or ultra rare
    for (let m = 1; m <= 3; m++) {
      if (m == 1 && boughtShovel == false && myLevel >= 60) {
        document.getElementById("shovel4").innerHTML = "Price: $" + shovelCost.toFixed(2)
        document.getElementById("buyButton0").onclick = function(){buyItem(0,0)}
      }
      else {
        var n = Math.ceil(Math.random() * rarePlusCumulMintage[rarePlusNumber])
        for (let j = 1; j <= rarePlusNumber; j++) {
          if (rarePlusCumulMintage[j-1] < n && n <= rarePlusCumulMintage[j]) {
            inventoryIndex[m] = rarePlusEnum[j]
          }
        }
        if (rarityWord[inventoryIndex[m]] == "RARE") {
          document.getElementById("item"+m).style.backgroundColor = rareColor
        }
        else if (rarityWord[inventoryIndex[m]] == "ULTRA RARE") {
          document.getElementById("item"+m).style.backgroundColor = ultraRareColor
        }
        document.getElementById("item"+m+"_1").src = "Coin Pictures/" + inventoryIndex[m] + "front.jpg"
        document.getElementById("item"+m+"_2").innerHTML
          = document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
        document.getElementById("item"+m+"_3").innerHTML = capitalizeFirstLetter(coinType[inventoryIndex[m]])
        document.getElementById("item"+m+"_4").innerHTML = capitalizeFirstLetter(rarityWord[inventoryIndex[m]].toLowerCase())
        if (quantity[inventoryIndex[m]] > 0) {
          document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
        }
        else {
          document.getElementById("item"+m+"_5").innerHTML = "New"
        }
        salesmanCoinCost[m] = 100 * worth[inventoryIndex[m]]
        document.getElementById("item"+m+"_6").innerHTML = "Price: $" + salesmanCoinCost[m].toFixed(2)
        document.getElementById("buyButton"+m).onclick = function(){buyItem(m)}
      }
    }
  }
  else { //If he sells only ultra rare
    for (let m = 1; m <= 3; m++) {
      if (m == 1 && boughtShovel == false && myLevel >= 60) {
        document.getElementById("shovel4").innerHTML = "Price: $" + shovelCost.toFixed(2)
        document.getElementById("buyButton0").onclick = function(){buyItem(0,0)}
      }
      else {
        var n = Math.ceil(Math.random() * ultraRareCumulMintage[ultraRareNumber])
        for (let j = 1; j <= ultraRareNumber; j++) {
          if (ultraRareCumulMintage[j-1] < n && n <= ultraRareCumulMintage[j]) {
            inventoryIndex[m] = ultraRareEnum[j]
          }
        }
        document.getElementById("item"+m).style.backgroundColor = ultraRareColor
        document.getElementById("item"+m+"_1").src = "Coin Pictures/" + inventoryIndex[m] + "front.jpg"
        document.getElementById("item"+m+"_2").innerHTML
          = document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
        document.getElementById("item"+m+"_3").innerHTML = capitalizeFirstLetter(coinType[inventoryIndex[m]])
        document.getElementById("item"+m+"_4").innerHTML = capitalizeFirstLetter(rarityWord[inventoryIndex[m]].toLowerCase())
        if (quantity[inventoryIndex[m]] > 0) {
          document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
        }
        else {
          document.getElementById("item"+m+"_5").innerHTML = "New"
        }
        salesmanCoinCost[m] = 100 * worth[inventoryIndex[m]]
        document.getElementById("item"+m+"_6").innerHTML = "Price: $" + salesmanCoinCost[m].toFixed(2)
        document.getElementById("buyButton"+m).onclick = function(){buyItem(m)}
      }
    }
  }
  if (shopIsOpen == true) {
    document.getElementById("traderInventory").style.display = ""
  }
  document.getElementById("salesmanPic").src = "travelingSalesmanPresent.jpg"
  if (boughtShovel == false) {
    document.getElementById("shovelDiv").style.display = "grid"
    document.getElementById("item1").style.display = "none"
  }
  else {
    document.getElementById("shovelDiv").style.display = "none"
    document.getElementById("shovelBoughtDiv").style.display = "none"
    document.getElementById("item1").style.display = "grid"
  }
  document.getElementById("itemBought1").style.display = "none"
  document.getElementById("itemBought2").style.display = "none"
  document.getElementById("itemBought3").style.display = "none"
  document.getElementById("item2").style.display = "grid"
  document.getElementById("item3").style.display = "grid"
}

function travelingSalesmanDepart() { 
  salesmanPresent = false
  specialReady[4] = 0
  updateSpecialsBadge()
  document.getElementById("traderInventory").style.display = "none"
  document.getElementById("salesmanPic").src = "travelingSalesmanGone.jpg"
  itemBought = [0,0,0,0]
}

function buyItem(m) {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  if (m == 0) {
    boughtShovel = true
    if (achHave[149] == 0) {
      achAward(149)
    }
    bankAccount -= shovelCost
    updateBankAccount()
    document.getElementById("shovelBoughtDiv").style.height = document.getElementById("shovelDiv").offsetHeight - 9 + "px"
    document.getElementById("shovelDiv").style.display = "none"
    document.getElementById("shovelBoughtDiv").style.display = "flex"
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You bought a <b>Shovel</b> from the Traveling Salesman for $"
      + shovelCost.toFixed(2) + "."
    //feedArea.scrollTo(0,feedArea.scrollHeight)
  }
  else {
    bankAccount -= salesmanCoinCost[m]
    itemBought[m] = 1
    numCoinsBought++
    if (achHave[143] == 0) {
      achAward(143)
    }
    if (achHave[144] == 0 && rarityWord[inventoryIndex[m]] == "ULTRA RARE") {
      achAward(144)
    }
    countTotalCoins()
    collectionFace += face[inventoryIndex[m]] //* q[inventoryIndex[m]]
    collectionWorth += worth[inventoryIndex[m]] //* q[inventoryIndex[m]]
    if (quantity[inventoryIndex[m]] == 0) { //If you don't have this coin yet...
      newTag = "new"
      document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling
        .previousElementSibling.firstElementChild.src = "Coin Pictures/" + inventoryIndex[m] + "front.jpg"
      document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling
        .previousElementSibling.firstElementChild.setAttribute("draggable","false")
      document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling
        .previousElementSibling.addEventListener("click",function() {flipCoin(inventoryIndex[m])})
      document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling
        .previousElementSibling.style.cursor = "pointer"
      updateTable(xC[inventoryIndex[m]],yC[inventoryIndex[m]],inventoryIndex[m])
      levelUpCheck()
      updateBankAccount()
      if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
        document.getElementById("qty"+inventoryIndex[m]).parentElement.style.display = "grid"
      }
      if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
        document.getElementById("qty"+inventoryIndex[m]).parentElement.style.display = "none"
      }
      if (myLevel < 100) {
        countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
        expRatio = countCurrentLvl / coinsNeeded[myLevel]
        document.getElementById("expBar").value = expRatio
        expPct = Math.round(expRatio * 1000) / 10
        document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
      }
      else {
        document.getElementById("expBar").style.display = "none"
        document.getElementById("expProgress").style.display = "none"
      }

      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("> You bought a <span style='color:orange'><b>" +
        newTag + "</b></span> "
        + coloredRarity[inventoryIndex[m]] + " " + coinType[inventoryIndex[m]] + " (<a href='#' onclick='collectionJump(" + inventoryIndex[m] + ")'>" + 
        document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
        + "</a>) from the Traveling Salesman for $" + salesmanCoinCost[m].toFixed(2) + ".")
      //feedArea.scrollTo(0,feedArea.scrollHeight)
      updateStatsBecauseOfNew()

      if (achHave[118] == 0 && worth[inventoryIndex[m]] >= 10000 * face[inventoryIndex[m]]) {
        achAward(118)
      }
    }
    else { //If you already have this coin...
      numDupCoinsBought++
      if (achHave[146] == 0 && numDupCoinsBought == 10) {
        achAward(146)
      }
      else if (achHave[147] == 0 && numDupCoinsBought == 50) {
        achAward(147)
      }
      newTag = "duplicate"
      bankAccountIncrease += worth[inventoryIndex[m]]
      collectionFaceDecrease += face[inventoryIndex[m]]
      document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
      document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
      document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
      document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
      document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
      document.getElementById("sellDuplicatesActive").style.display = "block"
      document.getElementById("sellDuplicatesInactive").style.display = "none"
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("> You bought a <span style='color:gray'><b>" +
        newTag + "</b></span> "
        + rarityWord[inventoryIndex[m]] + " " + coinType[inventoryIndex[m]] + " (<a href='#' onclick='collectionJump("
        + inventoryIndex[m] + ")'>" + 
        document.getElementById("qty"+inventoryIndex[m]).previousElementSibling.previousElementSibling.innerHTML
        + "</a>) from the Traveling Salesman for $" + salesmanCoinCost[m].toFixed(2) + ".")
      //feedArea.scrollTo(0,feedArea.scrollHeight)
    }
    quantity[inventoryIndex[m]] += 1
    if (achHave[218] == 0 && quantity[inventoryIndex[m]] > cumulMintage[inventoryIndex[m]] - cumulMintage[inventoryIndex[m]-1]) {
      achAward(218)
    }
    collectionFace += face[inventoryIndex[m]]
    collectionWorth += worth[inventoryIndex[m]]
    updateBankAccount()
    document.getElementById("itemBought"+m).style.height = document.getElementById("item"+m).offsetHeight - 9 + "px"
    document.getElementById("item"+m).style.display = "none"
    document.getElementById("itemBought"+m).style.display = "flex"
    document.getElementById("itemBought"+m).style.backgroundColor = document.getElementById("item"+m).style.backgroundColor
    var r = Math.ceil(Math.random() * 20)
    document.getElementById("itemBought"+m).innerHTML = "<q><i>" + transactionComment[r] + "</i></q>"
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function fountainCollect() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  startTime[7] = Date.now()
  document.getElementById("ready7").style.display = "none"
  document.getElementById("timer7").style.display = ""
  document.getElementById("fountainPic").src = "waterFountainEmpty.jpg"
  specialReady[7] = 0
  updateSpecialsBadge()

  fountainNumSearches++
  document.getElementById("fountainNumSearches").innerHTML = numberWithCommas(fountainNumSearches)
  var priorNewsFound = fountainNumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  for (let i = 1; i <= 2297; i++) {
    f[i] = 1 + fountainPower * probability[i] * fudgeFactorFixed
    q[i] = Math.floor(Math.random() * f[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        fountainNumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin
        
        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  fountainNumCoins += qsum
  countTotalCoins()
  document.getElementById("fountainNumCoins").innerHTML = numberWithCommas(fountainNumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found nothing."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  shiftFeed()
  var pluralLetter1 = "s"
  var pluralLetter2 = "s"
  var pluralLetter3 = "s"
  if (qsum == 1) {pluralLetter1 = ""}
  if (qNewSum == 1) {pluralLetter2 = ""}
  if (qOldSum == 1) {pluralLetter3 = ""}
  document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:black'> You found " + numberWithCommas(qsum)
    + " coin" + pluralLetter1 + " in the wishing fountain, including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin"
    + pluralLetter2 + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
  //feedArea.scrollTo(0,feedArea.scrollHeight)
  //Update stats
  if (fountainNumNew > priorNewsFound) {
    document.getElementById("fountainNumNew").innerHTML = numberWithCommas(fountainNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[137] == 0) {
    achAward(137)
  }
  else if (achHave[138] == 0 && fountainNumSearches == 10) {
    achAward(138)
  }
  else if (achHave[139] == 0 && fountainNumSearches == 50) {
    achAward(139)
  }
  else if (achHave[140] == 0 && fountainNumSearches == 100) {
    achAward(140)
  }
  else if (achHave[141] == 0 && fountainNumSearches == 200) {
    achAward(141)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function metalDetectorStart() {
  if (boughtShovel == true) {
    metalDetectorStarted = 1
    shovelSound.load()
    if (numberDescensionsComplete[4] <= 9) {
      startTime[8] = Date.now() + 1000000000000
    }
    else {
      startTime[8] = Date.now()
    }
    specialReady[8] = 0
    updateSpecialsBadge()

    document.getElementById("ready8").style.display = "none"
    document.getElementById("timer8").style.display = "none"
    //(xCoord,yCoord) is the location of the "x" that appears in the sand.
    var xCoord = 9 + Math.ceil(81 * Math.random()) //10-90%
    var yCoord = 19 + Math.ceil(71 * Math.random()) //20-90%
    var xCoordAdj = xCoord - 3
    var yCoordAdj = yCoord - 5
    var myFunction = function(xx,yy) {
      return function curriedFunc(e) {
        checkCursorCoords(e,xx,yy)
      }
    }
    document.getElementById("xMarksSpot").style.left = xCoord + "%"
    document.getElementById("xMarksSpot").style.top = yCoord + "%"
    document.getElementById("treasureChest").style.left = xCoordAdj + "%"
    document.getElementById("treasureChest").style.top = yCoordAdj + "%"
  
    if (numberDescensionsComplete[4] <= 8) {
      document.getElementById("beachPicActive").style.display = "" //Switch to picture where cursor becomes metal detector
      document.getElementById("beachPicInactive").style.display = "none"
      myRef = myFunction(xCoord,yCoord)
      document.getElementById("beachPicActive").addEventListener("mousemove",myRef)
    }
    else if (numberDescensionsComplete[4] == 9) {
      metalDetectorStarted = 0
      document.getElementById("treasureChest").style.display = "flex"
      metalDetectorChestFound = 1
      makeChestClickable()
    }
  }
  else {
    document.getElementById("ready8").innerHTML = "You need a shovel first!"
    setTimeout(function(){document.getElementById("ready8").innerHTML = "START DETECTING"},3000)
  }
}

function checkCursorCoords(e,xCoord,yCoord) {
  var rect = document.getElementById("beachPicActive").getBoundingClientRect()
  //(x,y) is the cursor position within the div
  var x = Math.round((e.clientX - rect.left) / document.getElementById("specials8Unlocked").offsetWidth * 100)
  var y = Math.round((e.clientY - rect.top) / document.getElementById("specials8Unlocked").offsetHeight * 100)
  var radius = 3
  if (numberDescensionsComplete[4] >= 4 && numberDescensionsComplete[4] <= 7) {
    radius = 6
  }
  else if (numberDescensionsComplete[4] == 8) {
    radius = 12
  }
  if ((x-xCoord) ** 2 + (y-yCoord) ** 2 <= radius ** 2) {
    metalDetectorXFound = 1
    metalDetectorStarted = 0
    document.getElementById("xMarksSpot").style.display = "flex"
    document.getElementById("beachPicActive").removeEventListener("mousemove",myRef)
    document.getElementById("beachPicActive").style.display = "none"
    document.getElementById("beachPicFound").style.display = ""
    //This adds a listener to the "x", where if you click the "x", it digs, counts shovel number, and if 7 clicks, spawn chest.
    document.getElementById("xMarksSpot").addEventListener("mousedown",shovel)
  }
}

function shovel() {
  var numDigs = 7
  if (numberDescensionsComplete[4] >= 6) {
    numDigs = 1
  }
  shovelSound.load()
  shovelSound.play()
  shovelNumber++
  if (shovelNumber == numDigs) {
    metalDetectorChestFound = 1
    metalDetectorXFound = 0
    document.getElementById("xMarksSpot").style.display = "none"
    document.getElementById("beachPicFound").style.display = "none"
    document.getElementById("beachPicInactive").style.display = ""
    document.getElementById("treasureChest").style.display = "flex"
    shovelNumber = 0
    setTimeout(makeChestClickable,2000)
  }
}

function makeChestClickable() {
  document.getElementById("treasureChest").addEventListener("mousedown",openChest)
  document.getElementById("treasureChest").style.cursor = "pointer"
}

function openChest() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  metalDetectorChestFound = 0
  document.getElementById("treasureChest").style.display = "none"
  document.getElementById("treasureChest").style.cursor = "default"
  document.getElementById("treasureChest").removeEventListener("mousedown",openChest)
  specialReady[8] = 0
  updateSpecialsBadge()
  startTime[8] = Date.now()
  document.getElementById("timer8").style.display = ""

  chestNumSearches++
  document.getElementById("chestNumSearches").innerHTML = numberWithCommas(chestNumSearches)
  var priorNewsFound = chestNumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  for (let i = 1; i <= 2297; i++) {
    c[i] = 1 + chestPower * probability[i] * fudgeFactorFixed
    q[i] = Math.floor(Math.random() * c[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        chestNumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  chestNumCoins += qsum
  countTotalCoins()
  document.getElementById("chestNumCoins").innerHTML = numberWithCommas(chestNumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found nothing."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  shiftFeed()
  var pluralLetter1 = "s"
  var pluralLetter2 = "s"
  var pluralLetter3 = "s"
  if (qsum == 1) {pluralLetter1 = ""}
  if (qNewSum == 1) {pluralLetter2 = ""}
  if (qOldSum == 1) {pluralLetter3 = ""}
  document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:black'> You opened the chest! It contained " + numberWithCommas(qsum)
    + " coin" + pluralLetter1 + ", including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin" + pluralLetter2
    + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
  //feedArea.scrollTo(0,feedArea.scrollHeight)
  //Update stats
  if (chestNumNew > priorNewsFound) {
    document.getElementById("chestNumNew").innerHTML = numberWithCommas(chestNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[150] == 0) {
    achAward(150)
  }
  else if (achHave[151] == 0 && chestNumSearches == 10) {
    achAward(151)
  }
  else if (achHave[152] == 0 && chestNumSearches == 50) {
    achAward(152)
  }
  else if (achHave[153] == 0 && chestNumSearches == 100) {
    achAward(153)
  }
  else if (achHave[154] == 0 && chestNumSearches == 200) {
    achAward(154)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function toggleBank() {
  if (bankIsOpen == true) {
    //Shrink the bank div again
    document.getElementById("bankPic").src = ""
    for (let i = 1; i <= 10; i++) {
      if (specialIsUnlocked[i] == true && i != 5) {
        document.getElementById("specials"+i+"Unlocked").style.display = "flex"
      }
      else if (specialIsUnlocked[i] == false && i != 5) {
        document.getElementById("specials"+i+"Locked").style.display = "flex"
      }
    }
    bankIsOpen = false
    document.getElementById("bankInventory").style.display = "none"
    document.getElementById("specialsContainer").classList.remove("specialsMod2")
    document.getElementById("specialsContainer").classList.add("specials")
    document.getElementById("specials5Unlocked").classList.remove("specials5Mod")
    document.getElementById("specials5Unlocked").classList.add("specials5")
    if (coinRollAvail[1]+coinRollAvail[2]+coinRollAvail[3]+coinRollAvail[4]+coinRollAvail[5]+coinRollAvail[6] == 0) {
      document.getElementById("bankPic").src = "bankOff.png"
    }
    else {
      document.getElementById("bankPic").src = "bankOn.png"
    }
    if (prestigeComplete == false) {
      implementConditions(currentDescensionType,numberDescensionsComplete[currentDescensionType])
    }

    updateSpecialsEnabled()
  }
  else { //If the bank is closed
    document.getElementById("bankPic").src = "insideBank.jpg"
    document.getElementById("bankInventory").style.display = ""
    document.getElementById("specials1Locked").style.display = "none"
    document.getElementById("specials1LockedMod").style.display = "none"
    document.getElementById("specials1Unlocked").style.display = "none"
    document.getElementById("specials2Locked").style.display = "none"
    document.getElementById("specials2LockedMod").style.display = "none"
    document.getElementById("specials2Unlocked").style.display = "none"
    document.getElementById("specials3Locked").style.display = "none"
    document.getElementById("specials3LockedMod").style.display = "none"
    document.getElementById("specials3Unlocked").style.display = "none"
    document.getElementById("specials4Locked").style.display = "none"
    document.getElementById("specials4LockedMod").style.display = "none"
    document.getElementById("specials4Unlocked").style.display = "none"
    document.getElementById("specials6Locked").style.display = "none"
    document.getElementById("specials6LockedMod").style.display = "none"
    document.getElementById("specials6Unlocked").style.display = "none"
    document.getElementById("specials7Locked").style.display = "none"
    document.getElementById("specials7LockedMod").style.display = "none"
    document.getElementById("specials7Unlocked").style.display = "none"
    document.getElementById("specials8Locked").style.display = "none"
    document.getElementById("specials8LockedMod").style.display = "none"
    document.getElementById("specials8Unlocked").style.display = "none"
    document.getElementById("specials9Locked").style.display = "none"
    document.getElementById("specials9LockedMod").style.display = "none"
    document.getElementById("specials9Unlocked").style.display = "none"
    document.getElementById("specials10Locked").style.display = "none"
    document.getElementById("specials10Unlocked").style.display = "none"
    bankIsOpen = true
    //Maximize the bank div
    document.getElementById("specialsContainer").classList.remove("specials")
    document.getElementById("specialsContainer").classList.add("specialsMod2")
    document.getElementById("specials5Unlocked").classList.remove("specials5")
    document.getElementById("specials5Unlocked").classList.add("specials5Mod")
  }
}

function genComCoinRoll(k) {
  var n = mintageBoundaries[k-1] + Math.ceil(Math.random() * (mintageBoundaries[k]-mintageBoundaries[k-1])) //Random mintage number within cumulative mintage for that coin type
  for (let m = coinCutoffVector[k-1] + 1; m <= coinCutoffVector[k]; m++) { //For every coin of the given type
    if (cumulMintage[m-1] < n && n <= cumulMintage[m]) { //If the given mintage number is within appropriate range of cumulative mintage of that coin
      return m //Let i be the index of that particular coin
    }
  }
}

function genUncCoinRoll(k) {
  var n = Math.ceil(Math.random() * uncommonPlusCumulMintageType[k][uncommonPlusNumberType[k]])
  for (let r = 1; r <= uncommonPlusNumberType[k]; r++) {
    if (uncommonPlusCumulMintageType[k][r-1] < n && n < uncommonPlusCumulMintageType[k][r]) {
      return uncommonPlusEnumType[k][r]
    }
  }
}

function genRarCoinRoll(k) {
  var n = Math.ceil(Math.random() * rarePlusCumulMintageType[k][rarePlusNumberType[k]])
  for (let r = 1; r <= rarePlusNumberType[k]; r++) {
    if (rarePlusCumulMintageType[k][r-1] < n && n < rarePlusCumulMintageType[k][r]) {
      return rarePlusEnumType[k][r]
    }
  }
}

function genUltCoinRoll(k) {
  var n = Math.ceil(Math.random() * ultraRareCumulMintageType[k][ultraRareNumberType[k]])
  for (let r = 1; r <= ultraRareNumberType[k]; r++) {
    if (ultraRareCumulMintageType[k][r-1] < n && n < ultraRareCumulMintageType[k][r]) {
      return ultraRareEnumType[k][r]
    }
  }
}

function comRollStatIncrement(k) {
  if (k == 1) {
    pennyRollsOpened1++
    pennyRollsOpened++
    document.getElementById("numComPennyRolls").innerHTML = pennyRollsOpened1
    document.getElementById("numPennyRolls").innerHTML = pennyRollsOpened
  }
  else if (k == 2) {
    nickelRollsOpened1++
    nickelRollsOpened++
    document.getElementById("numComNickelRolls").innerHTML = nickelRollsOpened1
    document.getElementById("numNickelRolls").innerHTML = nickelRollsOpened
  }
  else if (k == 3) {
    dimeRollsOpened1++
    dimeRollsOpened++
    document.getElementById("numComDimeRolls").innerHTML = dimeRollsOpened1
    document.getElementById("numDimeRolls").innerHTML = dimeRollsOpened
  }
  else if (k == 4) {
    quarterRollsOpened1++
    quarterRollsOpened++
    document.getElementById("numComQuarterRolls").innerHTML = quarterRollsOpened1
    document.getElementById("numQuarterRolls").innerHTML = quarterRollsOpened
  }
  else if (k == 5) {
    halfDollarRollsOpened1++
    halfDollarRollsOpened++
    document.getElementById("numComHalfDollarRolls").innerHTML = halfDollarRollsOpened1
    document.getElementById("numHalfDollarRolls").innerHTML = halfDollarRollsOpened
  }
  else {
    dollarRollsOpened1++
    dollarRollsOpened++
    document.getElementById("numComDollarRolls").innerHTML = dollarRollsOpened1
    document.getElementById("numDollarRolls").innerHTML = dollarRollsOpened
  }
  comRollsOpened++
  rollsOpened++
  document.getElementById("numComRolls").innerHTML = comRollsOpened
  document.getElementById("numRolls").innerHTML = rollsOpened
  coinRollAchCheck()
}

function uncRollStatIncrement(k) {
  if (k == 1) {
    pennyRollsOpened2++
    pennyRollsOpened++
    document.getElementById("numUncPennyRolls").innerHTML = pennyRollsOpened2
    document.getElementById("numPennyRolls").innerHTML = pennyRollsOpened
  }
  else if (k == 2) {
    nickelRollsOpened2++
    nickelRollsOpened++
    document.getElementById("numUncNickelRolls").innerHTML = nickelRollsOpened2
    document.getElementById("numNickelRolls").innerHTML = nickelRollsOpened
  }
  else if (k == 3) {
    dimeRollsOpened2++
    dimeRollsOpened++
    document.getElementById("numUncDimeRolls").innerHTML = dimeRollsOpened2
    document.getElementById("numDimeRolls").innerHTML = dimeRollsOpened
  }
  else if (k == 4) {
    quarterRollsOpened2++
    quarterRollsOpened++
    document.getElementById("numUncQuarterRolls").innerHTML = quarterRollsOpened2
    document.getElementById("numQuarterRolls").innerHTML = quarterRollsOpened
  }
  else if (k == 5) {
    halfDollarRollsOpened2++
    halfDollarRollsOpened++
    document.getElementById("numUncHalfDollarRolls").innerHTML = halfDollarRollsOpened2
    document.getElementById("numHalfDollarRolls").innerHTML = halfDollarRollsOpened
  }
  else {
    dollarRollsOpened2++
    dollarRollsOpened++
    document.getElementById("numUncDollarRolls").innerHTML = dollarRollsOpened2
    document.getElementById("numDollarRolls").innerHTML = dollarRollsOpened
  }
  uncRollsOpened++
  rollsOpened++
  document.getElementById("numUncRolls").innerHTML = uncRollsOpened
  document.getElementById("numRolls").innerHTML = rollsOpened
  coinRollAchCheck()
}

function rarRollStatIncrement(k) {
  if (k == 1) {
    pennyRollsOpened3++
    pennyRollsOpened++
    document.getElementById("numRarPennyRolls").innerHTML = pennyRollsOpened3
    document.getElementById("numPennyRolls").innerHTML = pennyRollsOpened
  }
  else if (k == 2) {
    nickelRollsOpened3++
    nickelRollsOpened++
    document.getElementById("numRarNickelRolls").innerHTML = nickelRollsOpened3
    document.getElementById("numNickelRolls").innerHTML = nickelRollsOpened
  }
  else if (k == 3) {
    dimeRollsOpened3++
    dimeRollsOpened++
    document.getElementById("numRarDimeRolls").innerHTML = dimeRollsOpened3
    document.getElementById("numDimeRolls").innerHTML = dimeRollsOpened
  }
  else if (k == 4) {
    quarterRollsOpened3++
    quarterRollsOpened++
    document.getElementById("numRarQuarterRolls").innerHTML = quarterRollsOpened3
    document.getElementById("numQuarterRolls").innerHTML = quarterRollsOpened
  }
  else if (k == 5) {
    halfDollarRollsOpened3++
    halfDollarRollsOpened++
    document.getElementById("numRarHalfDollarRolls").innerHTML = halfDollarRollsOpened3
    document.getElementById("numHalfDollarRolls").innerHTML = halfDollarRollsOpened
  }
  else {
    dollarRollsOpened3++
    dollarRollsOpened++
    document.getElementById("numRarDollarRolls").innerHTML = dollarRollsOpened3
    document.getElementById("numDollarRolls").innerHTML = dollarRollsOpened
  }
  rarRollsOpened++
  rollsOpened++
  document.getElementById("numRarRolls").innerHTML = rarRollsOpened
  document.getElementById("numRolls").innerHTML = rollsOpened
  coinRollAchCheck()
}

function ultRollStatIncrement(k) {
  if (k == 1) {
    pennyRollsOpened4++
    pennyRollsOpened++
    document.getElementById("numUltPennyRolls").innerHTML = pennyRollsOpened4
    document.getElementById("numPennyRolls").innerHTML = pennyRollsOpened
  }
  else if (k == 2) {
    nickelRollsOpened4++
    nickelRollsOpened++
    document.getElementById("numUltNickelRolls").innerHTML = nickelRollsOpened4
    document.getElementById("numNickelRolls").innerHTML = nickelRollsOpened
  }
  else if (k == 3) {
    dimeRollsOpened4++
    dimeRollsOpened++
    document.getElementById("numUltDimeRolls").innerHTML = dimeRollsOpened4
    document.getElementById("numDimeRolls").innerHTML = dimeRollsOpened
  }
  else if (k == 4) {
    quarterRollsOpened4++
    quarterRollsOpened++
    document.getElementById("numUltQuarterRolls").innerHTML = quarterRollsOpened4
    document.getElementById("numQuarterRolls").innerHTML = quarterRollsOpened
  }
  else if (k == 5) {
    halfDollarRollsOpened4++
    halfDollarRollsOpened++
    document.getElementById("numUltHalfDollarRolls").innerHTML = halfDollarRollsOpened4
    document.getElementById("numHalfDollarRolls").innerHTML = halfDollarRollsOpened
  }
  else {
    dollarRollsOpened4++
    dollarRollsOpened++
    document.getElementById("numUltDollarRolls").innerHTML = dollarRollsOpened4
    document.getElementById("numDollarRolls").innerHTML = dollarRollsOpened
  }
  ultRollsOpened++
  rollsOpened++
  document.getElementById("numUltRolls").innerHTML = ultRollsOpened
  document.getElementById("numRolls").innerHTML = rollsOpened
  coinRollAchCheck()
}

function coinRollAchCheck() {
  if (achHave[162] == 0 && pennyRollsOpened == 1) {
    achAward(162)
  }
  else if (achHave[163] == 0 && pennyRollsOpened == 20) {
    achAward(163)
  }
  else if (achHave[164] == 0 && pennyRollsOpened == 100) {
    achAward(164)
  }
  else if (achHave[165] == 0 && pennyRollsOpened == 500) {
    achAward(165)
  }
  if (achHave[166] == 0 && nickelRollsOpened == 1) {
    achAward(166)
  }
  else if (achHave[167] == 0 && nickelRollsOpened == 20) {
    achAward(167)
  }
  else if (achHave[168] == 0 && nickelRollsOpened == 100) {
    achAward(168)
  }
  else if (achHave[169] == 0 && nickelRollsOpened == 500) {
    achAward(169)
  }
  if (achHave[170] == 0 && dimeRollsOpened == 1) {
    achAward(170)
  }
  else if (achHave[171] == 0 && dimeRollsOpened == 20) {
    achAward(171)
  }
  else if (achHave[172] == 0 && dimeRollsOpened == 100) {
    achAward(172)
  }
  else if (achHave[173] == 0 && dimeRollsOpened == 500) {
    achAward(173)
  }
  if (achHave[174] == 0 && quarterRollsOpened == 1) {
    achAward(174)
  }
  else if (achHave[175] == 0 && quarterRollsOpened == 20) {
    achAward(175)
  }
  else if (achHave[176] == 0 && quarterRollsOpened == 100) {
    achAward(176)
  }
  else if (achHave[177] == 0 && quarterRollsOpened == 500) {
    achAward(177)
  }
  if (achHave[178] == 0 && halfDollarRollsOpened == 1) {
    achAward(178)
  }
  else if (achHave[179] == 0 && halfDollarRollsOpened == 20) {
    achAward(179)
  }
  else if (achHave[180] == 0 && halfDollarRollsOpened == 100) {
    achAward(180)
  }
  else if (achHave[181] == 0 && halfDollarRollsOpened == 200) {
    achAward(181)
  }
  if (achHave[182] == 0 && dollarRollsOpened == 1) {
    achAward(182)
  }
  else if (achHave[183] == 0 && dollarRollsOpened == 20) {
    achAward(183)
  }
  else if (achHave[184] == 0 && dollarRollsOpened == 100) {
    achAward(184)
  }
  else if (achHave[185] == 0 && dollarRollsOpened == 200) {
    achAward(185)
  }
}

function buyCoinRoll(k) {
  if (bankAccount >= coinRollCost[k]) {
    var scrolledToBottom = true
    if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
      scrolledToBottom = false
    }
    if (coinRollAvail[k] == coinRollLimit[k]) {
      startTimeRoll[k] = Date.now()
    }
    document.getElementById("rollTimer"+k).style.display = ""
    document.getElementById("roll"+k+"_"+coinRollAvail[k]).style.display = "none"
    coinRollAvail[k]--
    if (achHave[187] == 0 && coinRollAvail[1] * coinRollAvail[2] * coinRollAvail[3] * coinRollAvail[4] * coinRollAvail[5] * coinRollAvail[6] == 1) {
      achAward(187)
    }
    if (achHave[188] == 0 && coinRollAvail[1] == 6 && coinRollAvail[2] == 5 && coinRollAvail[3] == 4 && coinRollAvail[4] == 3 && coinRollAvail[5] == 2 && coinRollAvail[6] == 1) {
      achAward(188)
    }
    document.getElementById("rollHeader"+k).innerHTML = coinWord[k] + " (" + coinRollAvail[k] + "/" + coinRollLimit[k] + ")"
    bankAccount -= coinRollCost[k]
    updateBankAccount()
    qNewSum = 0
    qOldSum = 0
    var ranNum = Math.random()
    if (numberDescensionsComplete[5] < 4) {
      comRollStatIncrement(k)
    }
    if (numberDescensionsComplete[5] == 4) {
      if (ranNum < 0.1) { //Uncommon-or-better roll
        uncRollStatIncrement(k)
      }
      else {
        comRollStatIncrement(k)
      }
    }
    if (numberDescensionsComplete[5] == 5) {
      if (ranNum < 0.1) { //Uncommon-or-better roll
        uncRollStatIncrement(k)
      }
      else if (0.1 <= ranNum && ranNum < 0.11) { //Rare-or-better roll
        rarRollStatIncrement(k)
      }
      else {
        comRollStatIncrement(k)
      }
    }
    if (numberDescensionsComplete[5] >= 6) {
      if (ranNum < 0.1) { //Uncommon-or-better roll
        uncRollStatIncrement(k)
      }
      else if (0.1 <= ranNum && ranNum < 0.11) { //Rare-or-better roll
        rarRollStatIncrement(k)
      }
      else if (0.11 <= ranNum && ranNum < 0.111) { //Ultra-rare roll
        ultRollStatIncrement(k)
      }
      else {
        comRollStatIncrement(k)
      }
    }
    for (let j = 1; j <= coinsPerRoll[k]; j++) {
      if (numberDescensionsComplete[5] < 4) {
        i = genComCoinRoll(k)
      }
      if (numberDescensionsComplete[5] == 4) {
        if (ranNum < 0.1) { //Uncommon-or-better roll
          i = genUncCoinRoll(k)
        }
        else {
          i = genComCoinRoll(k)
        }
      }
      if (numberDescensionsComplete[5] == 5) {
        if (ranNum < 0.1) { //Uncommon-or-better roll
          i = genUncCoinRoll(k)
        }
        else if (0.1 <= ranNum && ranNum < 0.11) { //Rare-or-better roll
          i = genRarCoinRoll(k)
        }
        else {
          i = genComCoinRoll(k)
        }
      }
      if (numberDescensionsComplete[5] >= 6) {
        if (ranNum < 0.1) { //Uncommon-or-better roll
          i = genUncCoinRoll(k)
        }
        else if (0.1 <= ranNum && ranNum < 0.11) { //Rare-or-better roll
          i = genRarCoinRoll(k)
        }
        else if (0.11 <= ranNum && ranNum < 0.111) { //Ultra-rare roll
          i = genUltCoinRoll(k)
        }
        else {
          i = genComCoinRoll(k)
        }
      }
      //So now we have a random coin of the type that will show up in that coin roll.
      collectionFace += face[i]
      collectionWorth += worth[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        qNewSum += 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.setAttribute("draggable","false")
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>) in the "
          + coinType[i] + " roll.")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += 1
        newTag = "duplicate"
        bankAccountIncrease += worth[i]
        collectionFaceDecrease += face[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"

        //Feed addition
        if (!(toggleCommon == true && rarityWordMod[i] == "common") && !(toggleUncommon == true && rarityWordMod[i] == "uncommon")
          && !(toggleRare == true && rarityWordMod[i] == "rare") && !(toggleUltraRare == true && rarityWordMod[i] == "ultraRare")) {
          shiftFeed()
          document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:gray'> You found a " + newTag + " "
            + rarityWord[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
            document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>) in the "
            + coinType[i] + " roll.")
        }
      }
      quantity[i] += 1
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
      //feedArea.scrollTo(0,feedArea.scrollHeight)
    }
    collectionWorthDecrease = bankAccountIncrease
    document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
    document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
    document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
    document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
    document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"

    shiftFeed()
    var pluralLetter2 = "s"
    var pluralLetter3 = "s"
    if (qNewSum == 1) {pluralLetter2 = ""}
    if (qOldSum == 1) {pluralLetter3 = ""}
    var whoBought = "You"
    if (numberDescensionsComplete[5] == 10) {whoBought = "The Executive"}
    document.getElementById("feedDiv"+feedCount).innerHTML
      = "> " + whoBought + " bought a roll of " + coinWordPlural[k] + " for $" + coinRollCost[k].toFixed(2)
      + " and opened it. The roll contained " + qNewSum + " <span style='color:orange'><b>new</b></span> coin" + pluralLetter2 + " and "
      + qOldSum + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
    //feedArea.scrollTo(0,feedArea.scrollHeight)

    if (coinRollAvail[1]+coinRollAvail[2]+coinRollAvail[3]+coinRollAvail[4]+coinRollAvail[5]+coinRollAvail[6] == 0) {
      specialReady[5] = 0
      updateSpecialsBadge()
      if (bankIsOpen == false) {
        document.getElementById("bankPic").src = "bankOff.png"
      }
    }
    countTotalCoins()
    if (scrolledToBottom == true) {
      feedArea.scrollTo(0,feedArea.scrollHeight)
    }
  }
}

function startVacuum() {
  if (bankAccount >= vacuumCost) {
    bankAccount -= vacuumCost
    updateBankAccount()
    vacDiv.style.display = ""
    vacuumSearching = true
    vacuumReady = false
    vacuumCollected = false
    totalVacuumTime = 0
    L = -15
    T = 20
    degree = 0
    rotateImage(degree)
    vacDiv.style.left = L + "%"
    vacDiv.style.top = T + "%"
    vacDiv.style.cursor = "default"
    vacDiv.removeEventListener("click",vacuumCollect)
    document.getElementById("ready6").style.display = "none"
    document.getElementById("searching6").style.display = ""
    specialReady[6] = 0
    updateSpecialsBadge()
  }
}

function rotateImage(degree){
  const image = document.getElementById("vacuumImg");
  image.style.transform = "rotate(" + degree + "deg)";
}

function leaveVacDiv() {
  stalking = false
  vacDiv.removeEventListener("mouseout",leaveVacDiv)
}

function vacuumCollect() {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  vacuumCollected = true
  vacuumReady = false
  totalVacuumRetreatTime = 0
  stalking = true
  document.getElementById("searching6").innerHTML = "GOING HOME TO CHARGE"
  document.getElementById("searching6").style.backgroundColor = ""
  vacDiv.style.cursor = "default"
  vacDiv.removeEventListener("click",vacuumCollect)
  vacDiv.addEventListener("mouseout",leaveVacDiv)
  specialReady[6] = 0
  updateSpecialsBadge()
  startTime[6] = Date.now()

  vacuumNumSearches++
  document.getElementById("vacuumNumSearches").innerHTML = numberWithCommas(vacuumNumSearches)
  var priorNewsFound = vacuumNumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  for (let i = 1; i <= 2297; i++) {
    vac[i] = 1 + vacuumPower * probability[i] * fudgeFactorFixed
    q[i] = Math.floor(Math.random() * vac[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        vacuumNumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML = ("> You found a <span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " " + coinType[i] + "! (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  vacuumNumCoins += qsum
  countTotalCoins()
  document.getElementById("vacuumNumCoins").innerHTML = numberWithCommas(vacuumNumCoins)
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You found nothing."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  shiftFeed()
  var pluralLetter1 = "s"
  var pluralLetter2 = "s"
  var pluralLetter3 = "s"
  if (qsum == 1) {pluralLetter1 = ""}
  if (qNewSum == 1) {pluralLetter2 = ""}
  if (qOldSum == 1) {pluralLetter3 = ""}
  document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:black'> You emptied the coin vacuum! It contained "
    + numberWithCommas(qsum) + " coin" + pluralLetter1 + ", including " + numberWithCommas(qNewSum) + " <span style='color:orange'><b>new</b></span> coin"
    + pluralLetter2 + " and " + numberWithCommas(qOldSum) + " <span style='color:gray'>duplicate</b></span> coin" + pluralLetter3 + "."
  //feedArea.scrollTo(0,feedArea.scrollHeight)
  //Update stats
  if (vacuumNumNew > priorNewsFound) {
    document.getElementById("vacuumNumNew").innerHTML = numberWithCommas(vacuumNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[190] == 0) {
    achAward(190)
  }
  else if (achHave[191] == 0 && vacuumNumSearches == 10) {
    achAward(191)
  }
  else if (achHave[192] == 0 && vacuumNumSearches == 50) {
    achAward(192)
  }
  else if (achHave[193] == 0 && vacuumNumSearches == 100) {
    achAward(193)
  }
  else if (achHave[194] == 0 && vacuumNumSearches == 200) {
    achAward(194)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function loadCoin() {
  if (bankAccount >= 0.50 && remainingTime[9] + coinLoadSec <= pusherMaxTime) {
    bankAccount -= 0.50
    updateBankAccount()
    if (remainingTime[9] > 0) {
      startTime[9] += 1000 * coinLoadSec //Puts start time 10 seconds forward so that remaining time increases by coinLoadSec seconds
    }
    else {
      startTime[9] = Date.now()
      remainingTime[9] = coinLoadSec
      pusherCollected = Date.now()
    }
  }
}

function coinPusherCollect(number) {
  var scrolledToBottom = true
  if (feedArea.scrollHeight - feedArea.clientHeight > feedArea.scrollTop + 1) {
    scrolledToBottom = false
  }
  coinPusherNumSearches += number
  document.getElementById("coinPusherNumSearches").innerHTML = numberWithCommas(coinPusherNumSearches)
  var priorNewsFound = coinPusherNumNew
  qsum = 0
  qNewSum = 0
  qOldSum = 0
  if (number > 1) {
    searchPower *= number
  }
  for (let i = 1; i <= 2297; i++) {
    cp[i] = 1 + searchPower * probability[i] * fudgeFactor
    q[i] = Math.floor(Math.random() * cp[i]) //Random number taken from U[0,a] and rounded down = How many of coin i will be found
    qsum += q[i]
    if (q[i] > 0) { //If you get at least one coin i...
      collectionFace += face[i] * q[i]
      collectionWorth += worth[i] * q[i]
      if (quantity[i] == 0) { //If you don't have coin i yet...
        coinPusherNumNew++
        qNewSum += 1
        qOldSum += q[i] - 1
        newTag = "new"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.addEventListener("click",function() {flipCoin(i)})
        document.getElementById("qty"+i).previousElementSibling.previousElementSibling
          .previousElementSibling.style.cursor = "pointer"
        updateTable(xC[i],yC[i],i)
        levelUpCheck()
        updateBankAccount()
        if (myLevel < 100) {
          countCurrentLvl = grandTotalCount - coinsNeededCumul[myLevel - 1]
          expRatio = countCurrentLvl / coinsNeeded[myLevel]
          document.getElementById("expBar").value = expRatio
          expPct = Math.round(expRatio * 1000) / 10
          document.getElementById("expProgress").innerHTML = expPct + "%&nbsp (" + countCurrentLvl + "/" + coinsNeeded[myLevel] + ")"
        }
        else {
          document.getElementById("expBar").style.display = "none"
          document.getElementById("expProgress").style.display = "none"
        }
        for (let m = 1; m <= 3; m++) {
          if (i == inventoryIndex[m]) {
            document.getElementById("item"+m+"_5").innerHTML = "Duplicate"
          }
        }
        if (document.getElementsByName('show')[0].checked == true) { //If you are filtering by "Have" coins
          document.getElementById("qty"+i).parentElement.style.display = "grid"
        }
        if (document.getElementsByName('show')[1].checked == true) { //If you are filtering by "Dont" coins
          document.getElementById("qty"+i).parentElement.style.display = "none"
        }
        bankAccountIncrease += worth[i] * (q[i]-1) //One gets saved as new, the rest can be sold
        collectionFaceDecrease += face[i] * (q[i]-1)

        //Feed addition
        shiftFeed()
        document.getElementById("feedDiv"+feedCount).innerHTML
          = ("> <span style='color:green'>You found a </span><span style='color:orange'><b>" + newTag + "</b></span> "
          + coloredRarity[i] + " <span style='color:green'>" + coinType[i] + "!</span> (<a href='#' onclick='collectionJump(" + i + ")'>" + 
          document.getElementById("qty"+i).previousElementSibling.previousElementSibling.innerHTML + "</a>)")
        
        document.getElementById("qty"+i).style.display = "block" //Quantity badge appears on this coin

        if (achHave[118] == 0 && worth[i] >= 10000 * face[i]) {
          achAward(118)
        }
      }
      else { //If you already have coin i...
        qOldSum += q[i]
        newTag = "duplicate"
        bankAccountIncrease += worth[i] * q[i] //All can be sold since it's a duplicate
        collectionFaceDecrease += face[i] * q[i]
        document.getElementById("sellDuplicatesActive").style.display = "block"
        document.getElementById("sellDuplicatesInactive").style.display = "none"
      }
      quantity[i] += q[i]
      if (achHave[218] == 0 && quantity[i] > cumulMintage[i] - cumulMintage[i-1]) {
        achAward(218)
      }
    }
  }
  coinPusherNumCoins += qsum
  countTotalCoins()
  document.getElementById("coinPusherNumCoins").innerHTML = numberWithCommas(coinPusherNumCoins)
  if (number > 1) {
    searchPower /= number
    for (let i = 1; i <= 2297; i++) {
      cp[i] = 1 + searchPower * probability[i] * fudgeFactor
    }
  }
  if (qsum == 0 && toggleGarbage == false) {
    //Feed addition
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML = "> You won nothing from the Coin Pusher."
  }
  collectionWorthDecrease = bankAccountIncrease
  document.getElementById("collectionFace").innerHTML = "$" + numberWithCommas(collectionFace.toFixed(2))
  document.getElementById("collectionWorth").innerHTML = "$" + numberWithCommas(collectionWorth.toFixed(2))
  document.getElementById("bankAccountIncrease").innerHTML = "(+" + numberWithCommas(bankAccountIncrease.toFixed(2)) + ")"
  document.getElementById("collectionFaceDecrease").innerHTML = "(-" + numberWithCommas(collectionFaceDecrease.toFixed(2)) + ")"
  document.getElementById("collectionWorthDecrease").innerHTML = "(-" + numberWithCommas(collectionWorthDecrease.toFixed(2)) + ")"
  if (qsum > 0) {
    shiftFeed()
    var pluralLetter1 = "s"
    var pluralLetter2 = "s"
    var pluralLetter3 = "s"
    if (qsum == 1) {pluralLetter1 = ""}
    if (qNewSum == 1) {pluralLetter2 = ""}
    if (qOldSum == 1) {pluralLetter3 = ""}
    if (number == 1) {
      document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:green'> You won " + numberWithCommas(qsum) + " coin"
      + pluralLetter1 + " from the coin pusher, including " + numberWithCommas(qNewSum)
      + " </span><span style='color:orange'><b>new</b></span><span style='color:green'> coin" + pluralLetter2 + " and "
      + numberWithCommas(qOldSum) + " </span><span style='color:darkgray'>duplicate</b></span><span style='color:green'> coin" + pluralLetter3 + ".</span>"
    }
    else {
      document.getElementById("feedDiv"+feedCount).innerHTML = "><span style='color:green'> While you weren't looking, you won "
      + numberWithCommas(qsum) + " coin" + pluralLetter1 + " from the coin pusher, including " + numberWithCommas(qNewSum)
      + " </span><span style='color:orange'><b>new</b></span><span style='color:green'> coin" + pluralLetter2 + " and "
      + numberWithCommas(qOldSum) + " </span><span style='color:darkgray'>duplicate</b></span><span style='color:green'> coin" + pluralLetter3 + ".</span>"
    }
  }
  //feedArea.scrollTo(0,feedArea.scrollHeight)
  //Update stats
  if (coinPusherNumNew > priorNewsFound) {
    document.getElementById("coinPusherNumNew").innerHTML = numberWithCommas(coinPusherNumNew)
    updateStatsBecauseOfNew()
  }
  if (achHave[198] == 0) {
    achAward(198)
  }
  else if (achHave[199] == 0 && coinPusherNumSearches >= 100) {
    achAward(199)
  }
  else if (achHave[200] == 0 && coinPusherNumSearches >= 1000) {
    achAward(200)
  }
  else if (achHave[201] == 0 && coinPusherNumSearches >= 10000) {
    achAward(201)
  }
  else if (achHave[202] == 0 && coinPusherNumSearches >= 100000) {
    achAward(202)
  }
  if (scrolledToBottom == true) {
    feedArea.scrollTo(0,feedArea.scrollHeight)
  }
}

function garbageToggle() {
  if (toggleGarbage == true) {
    toggleGarbage = false
    document.getElementById("toggleGarbage").classList.remove("crossed")
  }
  else {
    toggleGarbage = true
    document.getElementById("toggleGarbage").classList.add("crossed")
  }
}

function commonToggle() {
  if (toggleCommon == true) {
    toggleCommon = false
    document.getElementById("toggleCommon").classList.remove("crossed")
  }
  else {
    toggleCommon = true
    document.getElementById("toggleCommon").classList.add("crossed")
  }
}

function uncommonToggle() {
  if (toggleUncommon == true) {
    toggleUncommon = false
    document.getElementById("toggleUncommon").classList.remove("crossed")
  }
  else {
    toggleUncommon = true
    document.getElementById("toggleUncommon").classList.add("crossed")
  }
}

function rareToggle() {
  if (toggleRare == true) {
    toggleRare = false
    document.getElementById("toggleRare").classList.remove("crossed")
  }
  else {
    toggleRare = true
    document.getElementById("toggleRare").classList.add("crossed")
  }
}

function ultraRareToggle() {
  if (toggleUltraRare == true) {
    toggleUltraRare = false
    document.getElementById("toggleUltraRare").classList.remove("crossed")
  }
  else {
    toggleUltraRare = true
    document.getElementById("toggleUltraRare").classList.add("crossed")
  }
}

function updateCoinmasterBadge() {
  var count = 0
  var highestUpgrade = 1
  for (let i = 2; i <= 100; i++) {
    if (boughtUpgrade[i] == 1) {
      highestUpgrade++
    }
  }
  count = myLevel - highestUpgrade
  document.getElementById("coinmasterBadge").innerHTML = count
  if (count == 0) {
    document.getElementById("coinmasterBadge").style.display = "none"
  }
  else {
    document.getElementById("coinmasterBadge").style.display = "flex"
  }
  if (prestigeComplete == false && currentDescensionType == 9 && numberDescensionsComplete[9] == 9 && myLevel >= 51
      && myLevel <= 99) {
    document.getElementById("coinmasterBadge").style.display = "none"
  }
  else if (prestigeComplete == false && currentDescensionType == 9 && numberDescensionsComplete[9] == 9 && myLevel == 100) {
    document.getElementById("coinmasterBadge").style.display = "flex"
  }
}

function updateSpecialsBadge() {
  numberSpecialsReady = 0
  if (specialIsUnlocked[1] == true && toggleReady[1] == true && whichEnabled[1] == 1) { //Vending 1
    numberSpecialsReady += specialReady[1]
  }
  if (specialIsUnlocked[2] == true && toggleReady[2] == true && whichEnabled[1] == 1) { //Vending 2
    numberSpecialsReady += specialReady[2]
  }
  if (specialIsUnlocked[3] == true && toggleReady[3] == true && whichEnabled[2] == 1) { //Seeker Pills
    numberSpecialsReady += specialReady[3]
  }
  if (specialIsUnlocked[4] == true && toggleReady[4] == true) { //Salesman
    numberSpecialsReady += specialReady[4]
  }
  if (specialIsUnlocked[5] == true && toggleReady[5] == true && whichEnabled[5] == 1) { //Bank
    numberSpecialsReady += specialReady[5]
  }
  if (specialIsUnlocked[6] == true && toggleReady[6] == true && whichEnabled[6] == 1) { //Coin Vacuum
    numberSpecialsReady += specialReady[6]
  }
  if (specialIsUnlocked[7] == true && toggleReady[7] == true && whichEnabled[3] == 1) { //Fountain
    numberSpecialsReady += specialReady[7]
  }
  if (specialIsUnlocked[8] == true && toggleReady[8] == true && whichEnabled[4] == 1) { //Metal Detector
    numberSpecialsReady += specialReady[8]
  }
  if (specialIsUnlocked[9] == true && toggleReady[9] == true && whichEnabled[7] == 1) { //Coin Pusher
    numberSpecialsReady += specialReady[9]
  }
  document.getElementById("specialsReadyBadge").innerHTML = numberSpecialsReady
  if (numberSpecialsReady == 0) {
    document.getElementById("specialsReadyBadge").style.display = "none"
  }
  else {
    document.getElementById("specialsReadyBadge").style.display = "flex"
  }
}

function toggleReadyFn(i) {
  if (toggleReady[i] == true) {
    toggleReady[i] = false
    updateSpecialsBadge()
  }
  else {
    toggleReady[i] = true
    updateSpecialsBadge()
  }
}

//This function is called when a new coin is found.
function updateStatsBecauseOfNew() { //Updates New Find Chance & Expected # Searches for New
  searchProbNoNew = 1
  seekerProbNoNew = 1
  vendingProbNoNew = 1
  fountainProbNoNew = 1
  chestProbNoNew = 1
  vacuumProbNoNew = 1
  coinPusherProbNoNew = 1
  for (let i = 1; i <= coinCutoff; i++) {
    if (quantity[i] == 0) {
      searchProbNoNew /= a[i]
      seekerProbNoNew /= b[i]
      fountainProbNoNew /= f[i]
      chestProbNoNew /= c[i]
      vacuumProbNoNew /= vac[i]
      coinPusherProbNoNew /= cp[i]
    }
  }
  for (let i = coinCutoffVector[1]+1; i <= coinCutoffVector[4]; i++) {
    if (quantity[i] == 0) {
      vendingProbNoNew /= v[i]
    }
  }
  searchProbNew = (1 - searchProbNoNew) * 100
  document.getElementById("searchProbNewStat").innerHTML = searchProbNew.toFixed(4) + "%"
  searchExpectedForNew = Math.round(100 / searchProbNew)
  document.getElementById("searchExpNewStat").innerHTML = numberWithCommas(searchExpectedForNew)
  seekerProbNew = (1 - seekerProbNoNew) * 100
  document.getElementById("seekerProbNewStat").innerHTML = seekerProbNew.toFixed(4) + "%"
  seekerExpectedForNew = Math.round(100 / seekerProbNew)
  document.getElementById("seekerExpNewStat").innerHTML = numberWithCommas(seekerExpectedForNew)
  vendingProbNew = (1 - vendingProbNoNew) * 100
  document.getElementById("vending1ProbNewStat").innerHTML = vendingProbNew.toFixed(4) + "%"
  vendingExpectedForNew = Math.round(100 / vendingProbNew)
  document.getElementById("vending1ExpNewStat").innerHTML = numberWithCommas(vendingExpectedForNew)
  document.getElementById("vending2ProbNewStat").innerHTML = vendingProbNew.toFixed(4) + "%"
  document.getElementById("vending2ExpNewStat").innerHTML = numberWithCommas(vendingExpectedForNew)
  fountainProbNew = (1 - fountainProbNoNew) * 100
  document.getElementById("fountainProbNewStat").innerHTML = fountainProbNew.toFixed(4) + "%"
  fountainExpectedForNew = Math.round(100 / fountainProbNew)
  document.getElementById("fountainExpNewStat").innerHTML = numberWithCommas(fountainExpectedForNew)
  chestProbNew = (1 - chestProbNoNew) * 100
  document.getElementById("chestProbNewStat").innerHTML = chestProbNew.toFixed(4) + "%"
  chestExpectedForNew = Math.round(100 / chestProbNew)
  document.getElementById("chestExpNewStat").innerHTML = numberWithCommas(chestExpectedForNew)
  vacuumProbNew = (1 - vacuumProbNoNew) * 100
  document.getElementById("vacuumProbNewStat").innerHTML = vacuumProbNew.toFixed(4) + "%"
  vacuumExpectedForNew = Math.round(100 / vacuumProbNew)
  document.getElementById("vacuumExpNewStat").innerHTML = numberWithCommas(vacuumExpectedForNew)
  coinPusherProbNew = (1 - coinPusherProbNoNew) * 100
  document.getElementById("coinPusherProbNewStat").innerHTML = coinPusherProbNew.toFixed(4) + "%"
  coinPusherExpectedForNew = Math.round(100 / coinPusherProbNew)
  document.getElementById("coinPusherExpNewStat").innerHTML = numberWithCommas(coinPusherExpectedForNew)
}

//This function is called when a find power changes or when a new type of coin is unlocked.
function updateAllStats() { //Updates Find Chance, New Find Chance, Exp # Searches for New, Expected # Coins
  getNoneA = 1
  searchProbNoNew = 1
  searchExpectedCoins = 0
  getNoneB = 1
  seekerProbNoNew = 1
  seekerExpectedCoins = 0
  vendingGetNone = 1
  vendingProbNoNew = 1
  vendingExpectedCoins = 0
  fountainGetNone = 1
  fountainProbNoNew = 1
  fountainExpectedCoins = 0
  chestGetNone = 1
  chestProbNoNew = 1
  chestExpectedCoins = 0
  vacuumGetNone = 1
  vacuumProbNoNew = 1
  vacuumExpectedCoins = 0
  coinPusherGetNone = 1
  coinPusherProbNoNew = 1
  coinPusherExpectedCoins = 0
  for (let i = 1; i <= coinCutoff; i++) {
    a[i] = 1 + searchPower * probability[i] * fudgeFactor
    b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed
    f[i] = 1 + fountainPower * probability[i] * fudgeFactorFixed
    c[i] = 1 + chestPower * probability[i] * fudgeFactorFixed
    vac[i] = 1 + vacuumPower * probability[i] * fudgeFactorFixed
    cp[i] = 1 + searchPower * probability[i] * fudgeFactor
    getNoneA /= a[i]
    getNoneB /= b[i]
    fountainGetNone /= f[i]
    chestGetNone /= c[i]
    vacuumGetNone /= vac[i]
    coinPusherGetNone /= cp[i]
    if (quantity[i] == 0) {
      searchProbNoNew /= a[i]
      seekerProbNoNew /= b[i]
      fountainProbNoNew /= f[i]
      chestProbNoNew /= c[i]
      vacuumProbNoNew /= vac[i]
      coinPusherProbNoNew /= cp[i]
    }
    var cutOff = 100
    if (a[i] < cutOff) {
      for (let j = 1; j <= Math.floor(a[i]); j++) {
        searchExpectedCoins += j * (Math.min(1 , a[i] - j) / a[i]) //Expected value formula
      }
    }
    else {
      searchExpectedCoins += a[i] / 2
    }
    if (b[i] < cutOff) {
      for (let j = 1; j <= Math.floor(b[i]); j++) {
        seekerExpectedCoins += j * (Math.min(1 , b[i] - j) / b[i]) //Expected value formula
      }
    }
    else {
      seekerExpectedCoins += b[i] / 2
    }
    if (f[i] < cutOff) {
      for (let j = 1; j <= Math.floor(f[i]); j++) {
        fountainExpectedCoins += j * (Math.min(1 , f[i] - j) / f[i]) //Expected value formula
      }
    }
    else {
      fountainExpectedCoins += f[i] / 2
    }
    if (c[i] < cutOff) {
      for (let j = 1; j <= Math.floor(c[i]); j++) {
        chestExpectedCoins += j * (Math.min(1 , c[i] - j) / c[i]) //Expected value formula
      }
    }
    else {
      chestExpectedCoins += c[i] / 2
    }
    if (vac[i] < cutOff) {
      for (let j = 1; j <= Math.floor(vac[i]); j++) {
        vacuumExpectedCoins += j * (Math.min(1 , vac[i] - j) / vac[i]) //Expected value formula
      }
    }
    else {
      vacuumExpectedCoins += vac[i] / 2
    }
    if (cp[i] < cutOff) {
      for (let j = 1; j <= Math.floor(cp[i]); j++) {
        coinPusherExpectedCoins += j * (Math.min(1 , cp[i] - j) / cp[i]) //Expected value formula
      }
    }
    else {
      coinPusherExpectedCoins += cp[i] / 2
    }
  }
  for (let i = coinCutoffVector[1]+1; i <= coinCutoffVector[4]; i++) {
    v[i] = 1 + vendingMachinePower * probability[i] * fudgeFactorFixed
    vendingGetNone /= v[i]
    if (quantity[i] == 0) {
      vendingProbNoNew /= v[i]
    }

    if (v[i] < cutOff) {
      for (let j = 1; j <= Math.floor(v[i]); j++) {
        vendingExpectedCoins += j * (Math.min(1 , v[i] - j) / v[i]) //Expected value formula
      }
    }
    else {
      vendingExpectedCoins += v[i] / 2
    }
  }
  getSomethingA = 1 - getNoneA
  findChance = getSomethingA * 100
  document.getElementById("findChance").innerHTML = "Find<br>Chance<br>" + findChance.toFixed(1) + "%"
  document.getElementById("findChanceStat").innerHTML = findChance.toFixed(2) + "%"
  searchProbNew = (1 - searchProbNoNew) * 100
  document.getElementById("searchProbNewStat").innerHTML = searchProbNew.toFixed(4) + "%"
  searchExpectedForNew = Math.round(100 / searchProbNew)
  document.getElementById("searchExpNewStat").innerHTML = numberWithCommas(searchExpectedForNew)
  document.getElementById("searchExpectedCoins").innerHTML = numberWithCommas(searchExpectedCoins.toFixed(0))

  getSomethingB = 1 - getNoneB
  seekerChance = getSomethingB * 100
  document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"
  document.getElementById("seekerChanceStat").innerHTML = seekerChance.toFixed(2) + "%"
  seekerProbNew = (1 - seekerProbNoNew) * 100
  document.getElementById("seekerProbNewStat").innerHTML = seekerProbNew.toFixed(4) + "%"
  seekerExpectedForNew = Math.round(100 / seekerProbNew)
  document.getElementById("seekerExpNewStat").innerHTML = numberWithCommas(seekerExpectedForNew)
  document.getElementById("seekerExpectedCoins").innerHTML = numberWithCommas(seekerExpectedCoins.toFixed(0))

  vendingGetSomething = 1 - vendingGetNone
  vendingChance = vendingGetSomething * 100
  document.getElementById("vending1ChanceStat").innerHTML = vendingChance.toFixed(2) + "%"
  vendingProbNew = (1 - vendingProbNoNew) * 100
  document.getElementById("vending1ProbNewStat").innerHTML = vendingProbNew.toFixed(4) + "%"
  vendingExpectedForNew = Math.round(100 / vendingProbNew)
  document.getElementById("vending1ExpNewStat").innerHTML = numberWithCommas(vendingExpectedForNew)
  document.getElementById("vending1ExpectedCoins").innerHTML = numberWithCommas(vendingExpectedCoins.toFixed(0))
  document.getElementById("vending2ChanceStat").innerHTML = vendingChance.toFixed(2) + "%"
  document.getElementById("vending2ProbNewStat").innerHTML = vendingProbNew.toFixed(4) + "%"
  document.getElementById("vending2ExpNewStat").innerHTML = numberWithCommas(vendingExpectedForNew)
  document.getElementById("vending2ExpectedCoins").innerHTML = numberWithCommas(vendingExpectedCoins.toFixed(0))

  fountainGetSomething = 1 - fountainGetNone
  fountainChance = fountainGetSomething * 100
  document.getElementById("fountainChanceStat").innerHTML = fountainChance.toFixed(2) + "%"
  fountainProbNew = (1 - fountainProbNoNew) * 100
  document.getElementById("fountainProbNewStat").innerHTML = fountainProbNew.toFixed(4) + "%"
  fountainExpectedForNew = Math.round(100 / fountainProbNew)
  document.getElementById("fountainExpNewStat").innerHTML = numberWithCommas(fountainExpectedForNew)
  document.getElementById("fountainExpectedCoins").innerHTML = numberWithCommas(fountainExpectedCoins.toFixed(0))

  chestGetSomething = 1 - chestGetNone
  chestChance = chestGetSomething * 100
  document.getElementById("chestChanceStat").innerHTML = chestChance.toFixed(2) + "%"
  chestProbNew = (1 - chestProbNoNew) * 100
  document.getElementById("chestProbNewStat").innerHTML = chestProbNew.toFixed(4) + "%"
  chestExpectedForNew = Math.round(100 / chestProbNew)
  document.getElementById("chestExpNewStat").innerHTML = numberWithCommas(chestExpectedForNew)
  document.getElementById("chestExpectedCoins").innerHTML = numberWithCommas(chestExpectedCoins.toFixed(0))

  vacuumGetSomething = 1 - vacuumGetNone
  vacuumChance = vacuumGetSomething * 100
  document.getElementById("vacuumChanceStat").innerHTML = vacuumChance.toFixed(2) + "%"
  vacuumProbNew = (1 - vacuumProbNoNew) * 100
  document.getElementById("vacuumProbNewStat").innerHTML = vacuumProbNew.toFixed(4) + "%"
  vacuumExpectedForNew = Math.round(100 / vacuumProbNew)
  document.getElementById("vacuumExpNewStat").innerHTML = numberWithCommas(vacuumExpectedForNew)
  document.getElementById("vacuumExpectedCoins").innerHTML = numberWithCommas(vacuumExpectedCoins.toFixed(0))

  coinPusherGetSomething = 1 - coinPusherGetNone
  coinPusherChance = coinPusherGetSomething * 100
  document.getElementById("coinPusherChanceStat").innerHTML = coinPusherChance.toFixed(2) + "%"
  coinPusherProbNew = (1 - coinPusherProbNoNew) * 100
  document.getElementById("coinPusherProbNewStat").innerHTML = coinPusherProbNew.toFixed(4) + "%"
  coinPusherExpectedForNew = Math.round(100 / coinPusherProbNew)
  document.getElementById("coinPusherExpNewStat").innerHTML = numberWithCommas(coinPusherExpectedForNew)
  document.getElementById("coinPusherExpectedCoins").innerHTML = numberWithCommas(coinPusherExpectedCoins.toFixed(0))

  //Round powers correctly
  if (searchPower < 1000) {
    document.getElementById("searchPowerStat").innerHTML = numberWithCommas(Math.round(10 * searchPower) / 10)
    document.getElementById("coinPusherPowerStat").innerHTML = numberWithCommas(Math.round(10 * searchPower) / 10)
  }
  else {
    document.getElementById("searchPowerStat").innerHTML = numberWithCommas(Math.round(searchPower))
    document.getElementById("coinPusherPowerStat").innerHTML = numberWithCommas(Math.round(searchPower))
  }
  if (seekerPower < 1000) {
    document.getElementById("seekerPowerStat").innerHTML = numberWithCommas(Math.round(10 * seekerPower) / 10)
  }
  else {
    document.getElementById("seekerPowerStat").innerHTML = numberWithCommas(Math.round(seekerPower))
  }
  if (vendingMachinePower < 1000) {
    document.getElementById("vending1PowerStat").innerHTML = numberWithCommas(Math.round(10 * vendingMachinePower) / 10)
    document.getElementById("vending2PowerStat").innerHTML = numberWithCommas(Math.round(10 * vendingMachinePower) / 10)
  }
  else {
    document.getElementById("vending1PowerStat").innerHTML = numberWithCommas(Math.round(vendingMachinePower))
    document.getElementById("vending2PowerStat").innerHTML = numberWithCommas(Math.round(vendingMachinePower))
  }
  if (fountainPower < 1000) {
    document.getElementById("fountainPowerStat").innerHTML = numberWithCommas(Math.round(10 * fountainPower) / 10)
  }
  else {
    document.getElementById("fountainPowerStat").innerHTML = numberWithCommas(Math.round(fountainPower))
  }
  if (vacuumPower < 1000) {
    document.getElementById("vacuumPowerStat").innerHTML = numberWithCommas(Math.round(10 * vacuumPower) / 10)
  }
  else {
    document.getElementById("vacuumPowerStat").innerHTML = numberWithCommas(Math.round(vacuumPower))
  }
  if (chestPower < 1000) {
    document.getElementById("chestPowerStat").innerHTML = numberWithCommas(Math.round(10 * chestPower) / 10)
  }
  else {
    document.getElementById("chestPowerStat").innerHTML = numberWithCommas(Math.round(chestPower))
  }
}

function updateSeekerStatsOnly() { //Updates Find Chance, New Find Chance, Exp # Searches for New, Expected # Coins
  getNoneB = 1
  seekerProbNoNew = 1
  seekerExpectedCoins = 0
  var cutOff = 100
  for (let i = 1; i <= coinCutoff; i++) {
    b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed
    getNoneB /= b[i]
    if (quantity[i] == 0) {
      seekerProbNoNew /= b[i]
    }
    if (b[i] < cutOff) {
      for (let j = 1; j <= Math.floor(b[i]); j++) {
        seekerExpectedCoins += j * (Math.min(1 , b[i] - j) / b[i]) //Expected value formula
      }
    }
    else {
      seekerExpectedCoins += b[i] / 2
    }
  }
  getSomethingB = 1 - getNoneB
  seekerChance = getSomethingB * 100
  document.getElementById("seekerChanceStat").innerHTML = seekerChance.toFixed(2) + "%"
  seekerProbNew = (1 - seekerProbNoNew) * 100
  document.getElementById("seekerProbNewStat").innerHTML = seekerProbNew.toFixed(4) + "%"
  seekerExpectedForNew = Math.round(100 / seekerProbNew)
  document.getElementById("seekerExpNewStat").innerHTML = numberWithCommas(seekerExpectedForNew)
  document.getElementById("seekerExpectedCoins").innerHTML = numberWithCommas(seekerExpectedCoins.toFixed(0))
  if (seekerPower < 1000) {
    document.getElementById("seekerPowerStat").innerHTML = numberWithCommas(Math.round(10 * seekerPower) / 10)
  }
  else {
    document.getElementById("seekerPowerStat").innerHTML = numberWithCommas(Math.round(seekerPower))
  }
}

function claimSeekerPrize() {
  if ((highestSeekerLevel == 70 && fTotal[1]*fTotal[2]*fTotal[3]*fTotal[4]*fTotal[5]*fTotal[6]*fTotal[7] != 0
      && seekerPillActive == 1 && vacuumCollected == true && numberCoinsFlipped == 77
      && dropCount == 3 && coinRollAvail[1]*coinRollAvail[2]*coinRollAvail[3]*coinRollAvail[4]*coinRollAvail[5]*coinRollAvail[6] == 1
      && seekerPrizeClaimed == 0) || (seekerPrizeClaimed == 0 && numberDescensionsComplete[8] == 9)) {
    seekerPrizeClaimed = 1
    extraSeekerFactor *= 5
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    getNoneB = 1
    for (let r = 1; r <= coinCutoff; r++) {
      b[r] = 1 + seekerPower * probability[r] * fudgeFactorFixed
      getNoneB /= b[r]
    }
    getSomethingB = 1 - getNoneB
    seekerChance = getSomethingB * 100
    updateSeekerStatsOnly()
    document.getElementById("seekerChance").innerHTML = "Find Chance: " + seekerChance.toFixed(1) + "%"
    shiftFeed()
    document.getElementById("feedDiv"+feedCount).innerHTML
      = "> <span style='color:purple'>You solved the seeker puzzle! <strong>Reward: Seeker Power x5</strong></span>"
    //feedArea.scrollTo(0,feedArea.scrollHeight)
    if (achHave[115] == 0) {
      achAward(115)
    }
  }
}

function togglePrestige() {
  if (prestigeIsOpen == true) {
    //Shrink the prestige div again
    for (let i = 1; i <= 10; i++) {
      if (specialIsUnlocked[i] == true) {
        document.getElementById("specials"+i+"Unlocked").style.display = "flex"
      }
      else if (specialIsUnlocked[i] == false) {
        document.getElementById("specials"+i+"Locked").style.display = "flex"
      }
    }
    prestigeIsOpen = false
    document.getElementById("specialsContainer").classList.remove("specialsMod3")
    document.getElementById("specialsContainer").classList.add("specials")
    for (let i = 1; i <= 12; i++) {
      var im3 = i - 3
      if (i >= 4) {
        document.getElementById("lockedArea"+i).style.display = "none"
        document.getElementById("unlockedArea"+i).style.display = "none"
        document.getElementById("completedArea"+i).style.display = "none"
      }
      if (i <= 3) {
        document.getElementById("prestigeArea"+i).style.display = "none"
      }
    }
    document.getElementById("prestigeArea2Done").style.display = "none"
    for (let j = 1; j <= 9; j++) {
      cancelDescend(j)
    }
    document.getElementById("prestigeArea2").style.display = "none"

    if (prestigeComplete == false) {
      implementConditions(currentDescensionType,numberDescensionsComplete[currentDescensionType])
    }

    updateSpecialsEnabled()
  }
  else { //If the prestige window is closed
    for (let i = 1; i <= 9; i++) {
      if (numberDescensionsComplete[i] == -1) {
        document.getElementById("rules"+i).style.background = "url('grayBg.jpg')"
        document.getElementById("rules"+i).style.backgroundSize = "cover"
        if (currentDescensionType == i && prestigeComplete == false) {
          document.getElementById("descendButtonMod"+i).innerHTML = "IN PROGRESS"
          document.getElementById("descendButtonMod"+i).style.backgroundColor = "red"
          document.getElementById("descendButtonMod"+i).style.border = "1px solid white"
          document.getElementById("descendButtonMod"+i).style.cursor = "default"
          document.getElementById("descendButtonMod"+i).onclick = ""
        }
      }
      else if (numberDescensionsComplete[i] >= 0) {
        document.getElementById("rules"+i).style.background = "url('darkBlueBg.jpg')"
        document.getElementById("rules"+i).style.backgroundSize = "cover"
        document.getElementById("specProgress"+i).innerHTML = numberDescensionsComplete[i] + "/10 Complete"
        var numDescPlus1 = numberDescensionsComplete[i] + 1
        document.getElementById("fourthRule"+i).style.display = ""
        document.getElementById("fourthRule"+i).innerHTML = fourthRule[i][numDescPlus1]
        document.getElementById("rules"+i+"Rank").innerHTML = specName[i] + "<br>Specialization - Rank " + numDescPlus1
        document.getElementById("secondReward"+i).innerHTML = secondReward[i][numDescPlus1]
        if (currentDescensionType == i && prestigeComplete == false) {
          document.getElementById("descendButton"+i).innerHTML = "IN PROGRESS"
          document.getElementById("descendButton"+i).style.backgroundColor = "red"
          document.getElementById("descendButton"+i).style.border = "1px solid white"
          document.getElementById("descendButton"+i).style.cursor = "default"
          document.getElementById("descendButton"+i).onclick = ""
        }
      }
    }
    document.getElementById("specials1Locked").style.display = "none"
    document.getElementById("specials1LockedMod").style.display = "none"
    document.getElementById("specials1Unlocked").style.display = "none"
    document.getElementById("specials2Locked").style.display = "none"
    document.getElementById("specials2LockedMod").style.display = "none"
    document.getElementById("specials2Unlocked").style.display = "none"
    document.getElementById("specials3Locked").style.display = "none"
    document.getElementById("specials3LockedMod").style.display = "none"
    document.getElementById("specials3Unlocked").style.display = "none"
    document.getElementById("specials4Locked").style.display = "none"
    document.getElementById("specials4LockedMod").style.display = "none"
    document.getElementById("specials4Unlocked").style.display = "none"
    document.getElementById("specials5Locked").style.display = "none"
    document.getElementById("specials5LockedMod").style.display = "none"
    document.getElementById("specials5Unlocked").style.display = "none"
    document.getElementById("specials6Locked").style.display = "none"
    document.getElementById("specials6LockedMod").style.display = "none"
    document.getElementById("specials6Unlocked").style.display = "none"
    document.getElementById("specials7Locked").style.display = "none"
    document.getElementById("specials7LockedMod").style.display = "none"
    document.getElementById("specials7Unlocked").style.display = "none"
    document.getElementById("specials8Locked").style.display = "none"
    document.getElementById("specials8LockedMod").style.display = "none"
    document.getElementById("specials8Unlocked").style.display = "none"
    document.getElementById("specials9Locked").style.display = "none"
    document.getElementById("specials9LockedMod").style.display = "none"
    document.getElementById("specials9Unlocked").style.display = "none"
    document.getElementById("specials10Locked").style.display = "none"
    document.getElementById("specials10Unlocked").style.display = "none"
    for (let i = 1; i <= 12; i++) {
      var im3 = i - 3
      if (i <= 3) {
        document.getElementById("prestigeArea"+i).style.display = ""
      }
      else if (i >= 4 && numberDescensionsComplete[im3] == -1) {
        document.getElementById("lockedArea"+i).style.display = "flex"
      }
      else if (i >= 4 && numberDescensionsComplete[im3] >= 0 && numberDescensionsComplete[im3] < 10) {
        document.getElementById("unlockedArea"+i).style.display = "flex"
      }
      else if (i >= 4 && numberDescensionsComplete[im3] == 10) {
        document.getElementById("completedArea"+i).style.display = "flex"
      }
    }

    prestigeIsOpen = true
    //Maximize the prestige div
    document.getElementById("specialsContainer").classList.remove("specials")
    document.getElementById("specialsContainer").classList.add("specialsMod3")
    if (ascensionLevel == 100) {
      document.getElementById("prestigeArea2").style.display = "none"
      document.getElementById("prestigeArea2Done").style.display = ""
    }
  }
}

function jumpToMessage(i) {
  for (let j = 1; j <= numberOfMessages; j++) {
    document.getElementById("message"+j).style.display = "none"
  }
  document.getElementById("message"+i).style.display = "block"
  document.getElementById("coinMasterMessageLabel").innerHTML = messageLevel[i]
  messageNumber = i
  if (numberMessagesUnlocked == 1) {
    document.getElementById("prevMessageButton").style.visibility = "hidden"
    document.getElementById("nextMessageButton").style.visibility = "hidden"
  }
  else {
    if (i == 1) {
      document.getElementById("prevMessageButton").style.visibility = "hidden"
      document.getElementById("nextMessageButton").style.visibility = "visible"
    }
    else if (i == numberMessagesUnlocked) {
      document.getElementById("prevMessageButton").style.visibility = "visible"
      document.getElementById("nextMessageButton").style.visibility = "hidden"
    }
    else {
      document.getElementById("prevMessageButton").style.visibility = "visible"
      document.getElementById("nextMessageButton").style.visibility = "visible"
    }
  }
  if (i <= 16) {
    document.getElementById("trainerPic").src = "coinMasterPic.jpg"
    document.getElementById("coinMaster").style.background = "url('goldenCoinsBackground.jpg')"
    document.getElementById("coinMaster").style.backgroundSize = "cover"
  }
  else if (i > 16) {
    document.getElementById("trainerPic").src = "theCollectorPic.jpg"
    document.getElementById("coinMaster").style.background = "url('collectorBackground.jpg')"
    document.getElementById("coinMaster").style.backgroundSize = "cover"
  }
}

function backMessage() {
  jumpToMessage(messageNumber - 1)
}

function forwardMessage() {
  jumpToMessage(messageNumber + 1)
}

function hoverRules(i) {
  document.getElementById("prestigeArea2").style.display = "none"
  document.getElementById("rules"+i).style.display = ""
}

function leaveRules(i) {
  document.getElementById("prestigeArea2").style.display = ""
  document.getElementById("rules"+i).style.display = "none"
}

function descend(i) {
  document.getElementById("confirmButtons"+i).style.display = ""
  if (prestigeComplete == false) {
    document.getElementById("warning"+i).style.display = ""
  }
  if (i == 1) { //Vending Machines
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 9) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
    if (numberDescensionsComplete[i] == 9) {
      document.getElementById("chooseSpecials1_2").disabled = true
      document.getElementById("vendingConfirmButton").disabled = true
    }
  }
  else if (i == 2) { //Pills
    if (numberDescensionsComplete[i] >= 3 && numberDescensionsComplete[i] <= 6) {
      document.getElementById("chooseSpecials2_2").checked = true
      document.getElementById("chooseSpecials2_2").disabled = true
      document.getElementById("chooseSpecials2_8").checked = true
      document.getElementById("chooseSpecials2_8").disabled = true
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 6) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 3) { //Wishing Fountain
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 9) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 4) { //Metal Detector
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 9) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 5) { //Bank
    if (numberDescensionsComplete[i] >= 6) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
    if (numberDescensionsComplete[i] == 9) {
      document.getElementById("chooseSpecials5_2").disabled = true
      document.getElementById("bankConfirmButton").disabled = true
    }
  }
  else if (i == 6) { //Coin Vacuum
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 9) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 7) { //Coin Pusher
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 9) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 8) { //Seekers
    if (numberDescensionsComplete[i] >= 1 && numberDescensionsComplete[i] <= 5) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = ""
      if (numberDescensionsComplete[i] == 6) {
        checkChecked(i)
      }
      document.getElementById("chooseSpecialsHeading"+i).innerHTML = chooseSpecialsHeading[i][numberDescensionsComplete[i] + 1]
    }
  }
  else if (i == 9) { //Clicking
    //Nothing needed
  }
  for (let j = 4; j <= 12; j++) {
    document.getElementById("lockedArea"+j).onmouseenter = ""
    document.getElementById("lockedArea"+j).onmouseleave = ""
    document.getElementById("unlockedArea"+j).onmouseenter = ""
    document.getElementById("unlockedArea"+j).onmouseleave = ""
  }
  for (let j = 1; j <= 9; j++) {
    if (typeUnlocked[j] == 0) {
      document.getElementById("descendButtonMod"+j).style.display = "none"
    }
    else {
      document.getElementById("descendButton"+j).style.display = "none"
    }
  }
  document.getElementById("descendButtonMod"+i).style.display = ""
  document.getElementById("descendButton"+i).style.display = ""

}

function cancelDescend(i) {
  document.getElementById("confirmButtons"+i).style.display = "none"
  document.getElementById("warning"+i).style.display = "none"
  document.getElementById("rules"+i).style.display = "none"
  if (numberDescensionsComplete[i] >= 1) {
    document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
  }
  for (let j = 4; j <= 12; j++) {
    document.getElementById("lockedArea"+j).onmouseenter = function(){hoverRules(j-3)}
    document.getElementById("lockedArea"+j).onmouseleave = function(){leaveRules(j-3)}
    document.getElementById("unlockedArea"+j).onmouseenter = function(){hoverRules(j-3)}
    document.getElementById("unlockedArea"+j).onmouseleave = function(){leaveRules(j-3)}
  }
  document.getElementById("prestigeArea2").style.display = ""
  for (let j = 1; j <= 9; j++) {
    if (numberDescensionsComplete[j] == -1) {
      document.getElementById("descendButtonMod"+j).style.display = ""
    }
    else {
      document.getElementById("descendButton"+j).style.display = ""
    }
    if (j != i) {
      document.getElementById("chooseSpecials"+i+"_"+j).checked = false
    }
  }
  checkChecked(i)
}

function confirmDescend(i) {
  prestigeComplete = false
  currentDescensionType = i
  //Provide warning if Lvl 100 upgrade is not bought.
  document.getElementById("confirmButtons"+i).style.display = "none"
  document.getElementById("warning"+i).style.display = "none"
  document.getElementById("rules"+i).style.display = "none"
  if (i == 1) { //Vending Machines
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 2) { //Pills
    if (numberDescensionsComplete[i] >= 3 && numberDescensionsComplete[i] <= 6) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 3) { //Wishing Fountain
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 4) { //Metal Detector
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 5) { //Bank
    if (numberDescensionsComplete[i] >= 6) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 6) { //Coin Vacuum
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 7) { //Coin Pusher
    if (numberDescensionsComplete[i] >= 1) {
      document.getElementById("chooseSpecialsPopup"+i).style.display = "none"
    }
  }
  else if (i == 8) { //Seekers
    
  }
  else if (i == 9) { //Clicking
    
  }
  for (let j = 4; j <= 12; j++) {
    document.getElementById("lockedArea"+j).onmouseenter = function(){hoverRules(j-3)}
    document.getElementById("lockedArea"+j).onmouseleave = function(){leaveRules(j-3)}
    document.getElementById("unlockedArea"+j).onmouseenter = function(){hoverRules(j-3)}
    document.getElementById("unlockedArea"+j).onmouseleave = function(){leaveRules(j-3)}
  }
  document.getElementById("prestigeArea2").style.display = ""
  for (let j = 1; j <= 9; j++) {
    if (numberDescensionsComplete[j] == -1) {
      document.getElementById("descendButtonMod"+j).style.display = ""
    }
    else {
      document.getElementById("descendButton"+j).style.display = ""
    }
  }
  if (ascensionLevel == 1) {
    numberMessagesUnlocked++
    jumpToMessage(numberMessagesUnlocked)
  }
  for (let j = 1; j <= 9; j++) {
    if (document.getElementById("chooseSpecials"+i+"_"+j).checked == true) {
      whichEnabled[j] = 1
      if (i == 5 && numberDescensionsComplete[5] == 9 && j != 5) {
        whichSpecial = j
      }
      if (i == 1 && numberDescensionsComplete[1] == 9 && j != 1) {
        whichSpecial = j
      }
    }
    else {
      whichEnabled[j] = 0
    }
  }

  resetVariablesForDescend()

  location.reload();
  //Conditions get implemented in initialize if current prestige isn't complete
  initialize(false);
}

function resetVariablesForDescend() {
  if (numberDescensionsComplete[5] <= 0) {
    bankAccount = 15
    goldenBuffaloCount = 0
  }
  else if (numberDescensionsComplete[5] == 1) {
    bankAccount = 1000
    goldenBuffaloCount = 10
  }
  else if (numberDescensionsComplete[5] == 2) {
    bankAccount = 5000
    goldenBuffaloCount = 20
  }
  else {
    bankAccount = 10000
    goldenBuffaloCount = 30
  }
  collectionFace = 0
  collectionWorth = 0
  quantity = Array(2298).fill(0)
  binaryCoinSide = Array(2298).fill(0)
  searchPower = 1 * 1.1 ** ascensionLevel
  seekerPower = 0.5 * 1.1 ** ascensionLevel
  vendingMachinePower = 250 * 1.1 ** ascensionLevel
  fountainPower = 10000 * 1.1 ** ascensionLevel
  chestPower = 10000 * 1.1 ** ascensionLevel
  vacuumPower = 4000 * 1.1 ** ascensionLevel
  coinCutoff = coinCutoffVector[6] //All coins available from start of descension
  a = Array(2298).fill(0)
  b = Array(2298).fill(0)
  v = Array(2298).fill(0)
  f = Array(2298).fill(0)
  c = Array(2298).fill(0)
  vac = Array(2298).fill(0)
  cp = Array(2298).fill(0)
  getNoneA = 1
  getNoneB = 1
  getSomethingA = 1
  getSomethingB = 1
  for (let i = 1; i <= coinCutoff; i++) {
    a[i] = 1 + searchPower * probability[i] * fudgeFactor
    b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed
    getNoneA /= a[i]
    getNoneB /= b[i]
  }
  getSomethingA = 1 - getNoneA
  getSomethingB = 1 - getNoneB
  bankAccountIncrease = 0
  collectionFaceDecrease = 0
  collectionWorthDecrease = 0
  typeCount = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
  sumOverX = [0,0,0,0,0,0,0] //How many unique pennies, nickels, dimes, etc. you have
  sumOverY = [0,0,0,0,0] //How many unique commons, uncommons, rares, ultra rares you have
  grandTotalCount = 0
  grandTotalPct = 0
  typePct = [[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]]
  rarityTotal = [0,0,0,0,0]
  denomTotal = [0,0,0,0,0,0,0]
  myLevel = 1
  expRatio = 0
  expPct = 0
  countCurrentLvl = 0
  seekerUnlocked = [0,0,0,0,0,0,0,0,0]
  seekerHired = [0,0,0,0,0,0,0,0,0]
  typesUnlocked = [0,1,1,1,1,1,1]
  highestSeekerLevel = 1
  buffaloUB = 1

  startTime = [0,0,0,0,0,0,0,0,0,0]

  specialsCooldown = [0,1800,1800,3600,300,0,7200,43200,10800,10]
        //Official = [0,1800,1800,3600,300,0,7200,43200,10800,10]
  seekerPillStartTime = 0
  //seekerPillDuration is a saved variable so we shouldn't have to update it.
  if (numberDescensionsComplete[2] < 10) {
    seekerPillActive = 0
  }
  else {
    seekerPillActive = 1
  }
  shovelNumber = 0
  myRef = function(){}
  salesmanPresent = false
  boughtShovel = true
  shopIsOpen = false
  specialIsUnlocked = [0,false,false,false,false,false,false,false,false,false]
  salesmanLevel = 1
  timeSalesmanPresent = 600 //600 for 10 min
  timeSalesmanGone = 3000 //3000 for 50 min
  inventoryIndex = [1,1,1,1]
  bankIsOpen = false
  coinRollPrepTime = [0,1800,2400,2100,1800,7200,9000]
                   //[0,1800,2400,2100,1800,7200,9000]
  coinRollLimit = [0,3,3,3,3,1,1]
  coinRollAvail = [0,0,0,0,0,0,0]
  L = -15
  T = 20
  vacuumSearching = false
  vacuumReady = false
  vacuumCollected = false
  degree = 0
  totalVacuumTime = 0
  totalVacuumRetreatTime = 0
  for (let i = 1; i <= feedCount; i++) {
    var newDiv = document.createElement("div")
    newDiv.setAttribute('id','feedDiv'+i)
    newDiv.innerHTML = ""
    feedArea.appendChild(newDiv)
  }
  seekerName = ["","","","","","","","",""]
  for (let i = 2; i < 101; i++) {
    document.getElementById("lvl"+i+"Upgrade").querySelector("#lvl"+i+"Upgrade :nth-child(3)").innerHTML = "$" + lvlUpgradeCost[i].toFixed(2)
  }
  seekerLevel = [0,1,1,1,1,1,1,1,1]
  seekerFuelTimeUpgrade = 1
  seekerCooldownUpgrade = 1
  seekerFuelLeft = [0,0,0,0,0,0,0,0,0]
  seekerProgress = [0,0,0,0,0,0,0,0,0]
  seekerSearchesToLevel = [0,40,40,40,40,40,40,40,40]
  seekerSearches = [0,0,0,0,0,0,0,0,0]
  seekerReadyToLevel = [0,0,0,0,0,0,0,0,0]
  boughtUpgrade = Array(101).fill(0)
  wTotal = [0,0,0,0,0,0,0,0,0]
  fTotal = [0,0,0,0,0,0,0,0,0]
  metalDetectorStarted = 0 //Might not need
  metalDetectorXFound = 0 //Might not need
  metalDetectorChestFound = 0 //Might not need
  coinRollProgress = [0,0,0,0,0,0,0]
  vacuumCost = 25
  coinPusherCost = 10
  specialReady = [0,0,0,0,0,0,0,0,0,0]
  numberSpecialsReady = 0
  if (numberDescensionsComplete[2] < 3) {
    numberPills = 10
  }
  else if (numberDescensionsComplete[2] >= 3 && numberDescensionsComplete[2] < 5) {
    numberPills = 15
  }
  else if (numberDescensionsComplete[2] >= 5) {
    numberPills = 20
  }
  if (currentDescensionType == 2 && numberDescensionsComplete[2] == 0) {
    numberPills = 6
  }
  else if (currentDescensionType == 2 && numberDescensionsComplete[2] == 1) {
    numberPills = 3
  }
  extraSeekerFactor = 1
  itemBought = [0,0,0,0]
  saveTime = 0
  loadTime = 0
  pusherReady = 1
  pusherCollected = Date.now()
  searchNumSearchesThis = 0
  seekerNumSearchesThis = 0
  vending1NumSearchesThis = 0
  vending2NumSearchesThis = 0
  fountainNumSearchesThis = 0
  chestNumSearchesThis = 0
  vacuumNumSearchesThis = 0
  coinPusherNumSearchesThis = 0
  searchNumCoinsThis = 0
  seekerNumCoinsThis = 0
  vending1NumCoinsThis = 0
  vending2NumCoinsThis = 0
  fountainNumCoinsThis = 0
  chestNumCoinsThis = 0
  vacuumNumCoinsThis = 0
  coinPusherNumCoinsThis = 0
  searchNumNewThis = 0
  seekerNumNewThis = 0
  vending1NumNewThis = 0
  vending2NumNewThis = 0
  fountainNumNewThis = 0
  chestNumNewThis = 0
  vacuumNumNewThis = 0
  coinPusherNumNewThis = 0
  if (numberDescensionsComplete[8] <= 8) {
    seekerPrizeClaimed = 0
  }
  toggleReady = ["",true,true,true,true,true,true,true,true,true]
  // goldenBuffalosFound = 0
  duplicatesWorth = 0

  seekerUnlocked = [0,1,1,1,1,1,1,1,0]
  for (let j = 1; j <= 7; j++) {
    document.getElementById("seekerboxBlank"+j).style.display = ""
  }
}

function disableSalesman() {
  specialIsUnlocked[4] = false
  document.getElementById("specials4Locked").style.display = "none"
  document.getElementById("specials4LockedMod").style.display = "flex"
  document.getElementById("specials4Unlocked").style.display = "none"
  document.getElementById("toggleReady4Badge").style.display = "none"
}

function implementConditions(i,number) {
  if (number == -1) {
    document.getElementById("whichSpecCurrent").innerHTML = "&#9733; " + specName[i] + " Spec. Unlock &#9733;"
  }
  else {
    var numPlus1 = number + 1
    document.getElementById("whichSpecCurrent").innerHTML = "&#9733; " + specName[i] + " Spec. " + numPlus1 + " &#9733;"
  }
  if (i == 1) { //Vending Machines
    //To unlock Vending Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Vending Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable vending machines
      whichEnabled = [0,0,1,1,1,1,1,1,1,1]
    }
    //To do one of the remaining 9 Vending Spec descensions
    else if (prestigeComplete == false && number >= 1) {
      disableSalesman()
    }
  }
  else if (i == 2) { //Pills
    //To unlock Pill Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Pill Spec descension...
    else if (prestigeComplete == false && number == 0) {
      disableSalesman()
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
      //Pill count of 6 is accounted for in resetVariablesForDescend()
    }
    //To do one of the remaining 9 Pill Spec descensions
    else if (prestigeComplete == false && number == 1) {
      disableSalesman()
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
      //Pill count of 3 is accounted for in resetVariablesForDescend()
    }
    else if (prestigeComplete == false && number == 2) {
      disableSalesman()
      whichEnabled = [0,1,0,1,1,1,1,1,1,1]
    }
    else if (prestigeComplete == false && number >= 3 && number <= 6) {
      disableSalesman()
      //Specials enabled are handled in confirmDescend()
    }
    else if (prestigeComplete == false && number == 7) {
      disableSalesman()
      whichEnabled = [0,0,1,0,0,0,0,0,1,0]
      //Limit of 5 seekers implemented at start of initialize()
    }
    else if (prestigeComplete == false && number == 8) {
      disableSalesman()
      whichEnabled = [0,0,1,0,0,0,0,0,1,0]
      //Limit of 3 seekers implemented at start of initialize()
    }
    else if (prestigeComplete == false && number == 9) {
      disableSalesman()
      whichEnabled = [0,0,1,0,0,0,0,0,1,0]
      //Limit of 1 seeker implemented at start of initialize()
    }
  }
  else if (i == 3) { //Wishing Fountain
    //To unlock Wishing Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Wishing Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable wishing fountain
      whichEnabled = [0,1,1,0,1,1,1,1,1,1]
    }
    //To do one of the remaining 9 Wishing Spec descensions
    else if (prestigeComplete == false && number >= 1) {
      disableSalesman()
    }
  }
  else if (i == 4) { //Metal Detector
    //To unlock Metal Detector Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Metal Detector Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable Metal Detector
      whichEnabled = [0,1,1,1,0,1,1,1,1,1]
    }
    //To do one of the remaining 9 Metal Detector Spec descensions
    else if (prestigeComplete == false && number >= 1) {
      disableSalesman()
    }
  }
  else if (i == 5) { //Bank
    //To unlock Bank Spec and do first 5 ascensions
    if (prestigeComplete == false && number <= 4) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    else if (prestigeComplete == false && number == 5) {
      whichEnabled = [0,1,1,1,1,0,1,1,1,1]
    }
    else if (prestigeComplete == false && number >= 6) {
      disableSalesman()
    }
  }
  else if (i == 6) { //Coin Vacuum
    //To unlock Coin Vacuum Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Coin Vacuum Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable Coin Vacuum
      whichEnabled = [0,1,1,1,1,1,0,1,1,1]
    }
    //To do one of the remaining 9 Coin Vacuum Spec descensions
    else if (prestigeComplete == false && number >= 1) {
      disableSalesman()
    }
  }
  else if (i == 7) { //Coin Pusher
    //To unlock Coin Pusher Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Coin Pusher Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable Coin Pusher
      whichEnabled = [0,1,1,1,1,1,1,0,1,1]
    }
    //To do one of the remaining 9 Coin Pusher Spec descensions
    else if (prestigeComplete == false && number >= 1) {
      disableSalesman()
    }
  }
  else if (i == 8) { //Seekers
    //To unlock Seeker Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do the first Seeker Spec descension...
    else if (prestigeComplete == false && number == 0) {
      //Disable Seekers
      whichEnabled = [0,1,1,1,1,1,1,1,0,1]
    }
    else if (prestigeComplete == false && number >= 1 && number <= 5) {
      disableSalesman()
    }
    else if (prestigeComplete == false && number == 6) {
      disableSalesman()
      whichEnabled = [0,0,0,0,0,0,0,0,1,0]
    }
    else if (prestigeComplete == false && number == 7) {
      disableSalesman()
      whichEnabled = [0,0,0,0,0,0,0,0,1,0]
      //Limit of 5 seekers done at beginning of implement()
    }
    else if (prestigeComplete == false && number == 8) {
      disableSalesman()
      whichEnabled = [0,0,0,0,0,0,0,0,1,0]
      //Limit of 3 seekers done at beginning of implement()
    }
    else if (prestigeComplete == false && number == 9) {
      disableSalesman()
      whichEnabled = [0,0,0,0,0,0,0,0,1,0]
      //Limit of 1 seeker done at beginning of implement()
    }
  }
  else if (i == 9) { //Clicking
    //To unlock Clicking Spec
    if (prestigeComplete == false && number == -1) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
    }
    //To do first Clicking Spec descension...
    else if (prestigeComplete == false && number == 0) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,0]
    }
    else if (prestigeComplete == false && number >= 1 && number <= 9) {
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
      var unlockLevel = (number + 1) * 10
      if (number <= 8) {
        if (myLevel < unlockLevel) {
          document.getElementById("coinmasterButton").style.display = "none"
          document.getElementById("coinmasterButtonBlank").style.display = ""
          document.getElementById("coinmasterButtonBlank").innerHTML = "<b>Reach Level " + unlockLevel + "</b>"
        }
        else {
          document.getElementById("coinmasterButton").style.display = ""
          document.getElementById("coinmasterButtonBlank").style.display = "none"
          document.getElementById("coinmasterButtonBlank").innerHTML = "<b>Reach Level 2</b>"
        }
      }
    }
  }
}

function updatePowers() {
  if (ascensionLevel >= 1) {
    if (myLevel <= 25) {
      vendingMachinePower = (250 / 12) * 12 ** ((myLevel - 1) / 24) * 1.1 ** ascensionLevel
    }
    if (myLevel <= 50) {
      fountainPower = 250 * 40 ** ((myLevel - 1) / 49) * 1.1 ** ascensionLevel
    }
    if (myLevel <= 60) {
      chestPower = (10000 / 60) * 60 ** ((myLevel - 1) / 59) * 1.1 ** ascensionLevel
    }
    if (myLevel <= 70) {
      vacuumPower = (8000 / 70) * 70 ** ((myLevel - 1) / 69) * 1.1 ** ascensionLevel
    }
  }
}

function updateSpecialsEnabled() {
  if (whichEnabled[1] == 1) { //If Vending Machines are enabled
    document.getElementById("specials1Locked").style.display = "none"
    document.getElementById("specials1LockedMod").style.display = "none"
    document.getElementById("specials1Unlocked").style.display = "flex"
    document.getElementById("toggleReady1Badge").style.display = ""
    document.getElementById("vending1StatRow").style.display = ""
    document.getElementById("specials2Locked").style.display = "none"
    document.getElementById("specials2LockedMod").style.display = "none"
    document.getElementById("specials2Unlocked").style.display = "flex"
    document.getElementById("toggleReady2Badge").style.display = ""
    document.getElementById("vending2StatRow").style.display = ""

  }
  else { //If Vending Machines are disabled
    document.getElementById("specials1Locked").style.display = "none"
    document.getElementById("specials1LockedMod").style.display = "flex"
    document.getElementById("specials1Unlocked").style.display = "none"
    document.getElementById("toggleReady1Badge").style.display = "none"
    document.getElementById("vending1StatRow").style.display = "none"
    document.getElementById("specials2Locked").style.display = "none"
    document.getElementById("specials2LockedMod").style.display = "flex"
    document.getElementById("specials2Unlocked").style.display = "none"
    document.getElementById("toggleReady2Badge").style.display = "none"
    document.getElementById("vending2StatRow").style.display = "none"
    specialIsUnlocked[1] = false
    specialIsUnlocked[2] = false
  }
  if (whichEnabled[2] == 1) { //If seeker pills are enabled
    document.getElementById("specials3Locked").style.display = "none"
    document.getElementById("specials3LockedMod").style.display = "none"
    document.getElementById("specials3Unlocked").style.display = "flex"
    document.getElementById("toggleReady3Badge").style.display = ""
  }
  else { //If seeker pills are disabled
    document.getElementById("specials3Locked").style.display = "none"
    document.getElementById("specials3LockedMod").style.display = "flex"
    document.getElementById("specials3Unlocked").style.display = "none"
    document.getElementById("toggleReady3Badge").style.display = "none"
    specialIsUnlocked[3] = false
  }
  if (whichEnabled[3] == 1) { //If fountain is enabled
    document.getElementById("specials7Locked").style.display = "none"
    document.getElementById("specials7LockedMod").style.display = "none"
    document.getElementById("specials7Unlocked").style.display = "flex"
    document.getElementById("toggleReady7Badge").style.display = ""
    document.getElementById("fountainStatRow").style.display = ""
  }
  else { //If fountain is disabled
    document.getElementById("specials7Locked").style.display = "none"
    document.getElementById("specials7LockedMod").style.display = "flex"
    document.getElementById("specials7Unlocked").style.display = "none"
    document.getElementById("toggleReady7Badge").style.display = "none"
    document.getElementById("fountainStatRow").style.display = "none"
    specialIsUnlocked[7] = false
  }
  if (whichEnabled[4] == 1) { //If metal detector is enabled
    document.getElementById("specials8Locked").style.display = "none"
    document.getElementById("specials8LockedMod").style.display = "none"
    document.getElementById("specials8Unlocked").style.display = "flex"
    document.getElementById("toggleReady8Badge").style.display = ""
    document.getElementById("chestStatRow").style.display = ""
  }
  else { //If metal detector is disabled
    document.getElementById("specials8Locked").style.display = "none"
    document.getElementById("specials8LockedMod").style.display = "flex"
    document.getElementById("specials8Unlocked").style.display = "none"
    document.getElementById("toggleReady8Badge").style.display = "none"
    document.getElementById("chestStatRow").style.display = "none"
    specialIsUnlocked[8] = false
  }
  if (whichEnabled[5] == 1) { //If bank is enabled
    if (specialIsUnlocked[5] == true) {
      document.getElementById("specials5Locked").style.display = "none"
      document.getElementById("specials5LockedMod").style.display = "none"
      document.getElementById("specials5Unlocked").style.display = "flex"
      document.getElementById("toggleReady5Badge").style.display = ""
    }
  }
  else { //If bank is disabled
    document.getElementById("specials5Locked").style.display = "none"
    document.getElementById("specials5LockedMod").style.display = "flex"
    document.getElementById("specials5Unlocked").style.display = "none"
    document.getElementById("toggleReady5Badge").style.display = "none"
    specialIsUnlocked[5] = false
  }
  if (whichEnabled[6] == 1) { //If coin vacuum is enabled
    document.getElementById("specials6Locked").style.display = "none"
    document.getElementById("specials6LockedMod").style.display = "none"
    document.getElementById("specials6Unlocked").style.display = "flex"
    document.getElementById("toggleReady6Badge").style.display = ""
    document.getElementById("vacuumStatRow").style.display = ""
  }
  else { //If coin vacuum is disabled
    document.getElementById("specials6Locked").style.display = "none"
    document.getElementById("specials6LockedMod").style.display = "flex"
    document.getElementById("specials6Unlocked").style.display = "none"
    document.getElementById("toggleReady6Badge").style.display = "none"
    document.getElementById("vacuumStatRow").style.display = "none"
    specialIsUnlocked[6] = false
  }
  if (whichEnabled[7] == 1) { //If coin pusher is enabled
    document.getElementById("specials9Locked").style.display = "none"
    document.getElementById("specials9LockedMod").style.display = "none"
    document.getElementById("specials9Unlocked").style.display = "flex"
    document.getElementById("toggleReady9Badge").style.display = ""
    document.getElementById("coinPusherStatRow").style.display = ""
  }
  else { //If coin pusher is disabled
    document.getElementById("specials9Locked").style.display = "none"
    document.getElementById("specials9LockedMod").style.display = "flex"
    document.getElementById("specials9Unlocked").style.display = "none"
    document.getElementById("toggleReady9Badge").style.display = "none"
    document.getElementById("coinPusherStatRow").style.display = "none"
    specialIsUnlocked[9] = false
  }
  if (whichEnabled[8] == 1) { //If seekers are enabled
    document.getElementById("seekerArea").style.display = "flex"
    document.getElementById("lockedSeekerArea").style.display = "none"
    document.getElementById("seekerStatRow").style.display = ""
    document.getElementById("seekerStatTableLockedMod").style.display = "none"
    document.getElementById("seekerStatTable").style.display = ""
  }
  else { //If seekers are disabled
    document.getElementById("seekerArea").style.display = "none"
    document.getElementById("unlockSeekerAtLevel").style.display = "none"
    document.getElementById("lockedSeekerArea").style.display = "flex"
    document.getElementById("seekerStatRow").style.display = "none"
    document.getElementById("seekerStatTableLockedMod").style.display = ""
    document.getElementById("seekerStatTableLocked").style.display = "none"
    document.getElementById("seekerStatTable").style.display = "none"
  }
  if (whichEnabled[9] == 1) { //If clicking is enabled
    document.getElementById("searchStatRow").style.display = ""
    document.getElementById("magnifyingGlassDiv").style.display = ""
    document.getElementById("magnifyingGlassDivLocked").style.display = "none"
    document.getElementById("findChance").style.display = ""
  }
  else { //If clicking is disabled
    document.getElementById("searchStatRow").style.display = "none"
    document.getElementById("magnifyingGlassDiv").style.display = "none"
    document.getElementById("magnifyingGlassDivLocked").style.display = ""
    document.getElementById("findChance").style.display = "none"
  }
}

function checkChecked(i) {
  var count = 0
  var tot = [0,10,8,10,10,10,10,10,7,10]
  if (i == 1 && numberDescensionsComplete[1] == 9) {
    tot[1] = 11
  }
  if (i == 5 && numberDescensionsComplete[5] == 9) {
    tot[5] = 11
  }
  for (let j = 1; j <= 9; j++) {
    if (document.getElementById("chooseSpecials"+i+"_"+j).checked == true) {
      count++
    }
  }
  if (count == tot[i] - numberDescensionsComplete[i]) {
    for (let j = 1; j <= 9; j++) {
      if (document.getElementById("chooseSpecials"+i+"_"+j).checked == false) {
        document.getElementById("chooseSpecials"+i+"_"+j).disabled = true
      }
    }
    if (i == 1 && numberDescensionsComplete[1] == 9) {
      document.getElementById("vendingConfirmButton").disabled = false
    }
    if (i == 5 && numberDescensionsComplete[5] == 9) {
      document.getElementById("bankConfirmButton").disabled = false
    }
  }
  else {
    for (let j = 1; j <= 9; j++) {
      if (document.getElementById("chooseSpecials"+i+"_"+j).checked == false && !(i == 5 && j == 2) && !(i == 1 && j == 2)) {
        document.getElementById("chooseSpecials"+i+"_"+j).disabled = false
      }
    }
    if (i == 1 && numberDescensionsComplete[1] == 9) {
      document.getElementById("vendingConfirmButton").disabled = true
    }
    if (i == 5 && numberDescensionsComplete[5] == 9) {
      document.getElementById("bankConfirmButton").disabled = true
    }
  }
}

function unlockBank() {
  coinRollPrepTime = [0,1800,2400,2100,1800,7200,9000]
  coinRollLimit = [0,3,3,3,3,1,1]
  if (specialIsUnlocked[5] == false) {
    specialIsUnlocked[5] = true
    if (achHave[155] == 0) {
      achAward(155)
    }
    for (let i = 1; i <= 6; i++) {
      startTimeRoll[i] = Date.now()
    }
  }
  document.getElementById("specials5Locked").style.display = "none"
  document.getElementById("specials5Unlocked").style.display = "flex"
  document.getElementById("toggleReady5Badge").style.display = ""
}

function upgradeBankToII() {
  coinRollLimit = [0,4,4,4,4,2,1]
  coinRollPrepTime = [0,1500,2100,1800,1500,6300,8100]
  if (achHave[156] == 0) {
    achAward(156)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange II"
  if (numberDescensionsComplete[5] <= 6) {thisLevel = 75}
  else if (numberDescensionsComplete[5] == 7) {thisLevel = 65}
  else if (numberDescensionsComplete[5] == 8) {thisLevel = 55}
  else if (numberDescensionsComplete[5] >= 9) {thisLevel = 45}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function upgradeBankToIII() {
  coinRollLimit = [0,5,5,5,5,2,2]
  coinRollPrepTime = [0,900,1500,1200,900,5400,7200]
  if (achHave[157] == 0) {
    achAward(157)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange III"
  if (numberDescensionsComplete[5] <= 6) {thisLevel = 85}
  else if (numberDescensionsComplete[5] == 7) {thisLevel = 75}
  else if (numberDescensionsComplete[5] == 8) {thisLevel = 65}
  else if (numberDescensionsComplete[5] >= 9) {thisLevel = 55}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function upgradeBankToIV() {
  coinRollLimit = [0,6,6,6,6,3,3]
  coinRollPrepTime = [0,600,1200,900,720,3600,4500]
  if (achHave[158] == 0) {
    achAward(158)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange IV"
  if (numberDescensionsComplete[5] <= 6) {thisLevel = 90}
  else if (numberDescensionsComplete[5] == 7) {thisLevel = 85}
  else if (numberDescensionsComplete[5] == 8) {thisLevel = 75}
  else if (numberDescensionsComplete[5] >= 9) {thisLevel = 65}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function upgradeBankToV() {
  coinRollPrepTime = [0,450,900,675,540,2700,3375]
  if (achHave[159] == 0) {
    achAward(159)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange V"
  if (numberDescensionsComplete[5] == 7) {thisLevel = 90}
  else if (numberDescensionsComplete[5] == 8) {thisLevel = 85}
  else if (numberDescensionsComplete[5] >= 9) {thisLevel = 75}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function upgradeBankToVI() {
  coinRollPrepTime = [0,338,675,506,405,2025,2531]
  if (achHave[160] == 0) {
    achAward(160)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange VI"
  if (numberDescensionsComplete[5] == 8) {thisLevel = 90}
  else if (numberDescensionsComplete[5] >= 9) {thisLevel = 85}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function upgradeBankToVII() {
  coinRollPrepTime = [0,254,506,380,304,1519,1898]
  if (achHave[161] == 0) {
    achAward(161)
  }
  var thisLevel = 0
  document.getElementById("bankExchangeName").innerHTML = "Bank Exchange VII"
  if (numberDescensionsComplete[5] >= 9) {thisLevel = 90}
  if (boughtUpgrade[thisLevel] == 0) {
    for (let i = 1; i <= 6; i++) { //Automatically fill up bank with rolls
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
         (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
         (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
      
        coinRollAvail[i] = coinRollLimit[i]
        coinRollProgress[i] = 0
        document.getElementById("rollProgress"+i).value = 0
        document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
        for (let j = 1; j <= coinRollLimit[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
        specialReady[5] = 1
        if (bankIsOpen == false) {
          document.getElementById("bankPic").src = "bankOn.png"
        }
        updateSpecialsBadge()
        startTimeRoll[i] = Date.now()
        elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
        remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
        hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
        mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
        ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
        hhModRoll[i] = hhRoll[i]
        mmModRoll[i] = mmRoll[i]
        ssModRoll[i] = ssRoll[i]
        if (hhRoll[i] < 10) {
          hhModRoll[i] = "0" + hhRoll[i].toString()
        }
        if (mmRoll[i] < 10) {
          mmModRoll[i] = "0" + mmRoll[i].toString()
        }
        if (ssRoll[i] < 10) {
          ssModRoll[i] = "0" + ssRoll[i].toString()
        }
        document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
      }
    }
  }
}

function whichSpecialEnableDisable() {
  //Final Vending Descension - extra ability temporarily locked
  if (currentDescensionType == 1 && numberDescensionsComplete[1] == 9) {
    if (myLevel == 50) {
      whichEnabled[whichSpecial] = 1
      updateSpecialsEnabled()
    }
  }
  //Final Bank Descension - extra ability temporarily locked
  if (currentDescensionType == 5 && numberDescensionsComplete[5] == 9) {
    if (myLevel == 35 || myLevel == 45 || myLevel == 55 || myLevel == 65) {
      whichEnabled = [0,0,0,0,0,1,0,0,0,0]
      if (bankIsOpen == true) {
        toggleBank()
      }
      else if (prestigeIsOpen == true) {
        togglePrestige()
      }
      updateSpecialsEnabled()
    }
    else if (myLevel == 39 || myLevel == 48 || myLevel == 57 || myLevel == 66) {
      whichEnabled[whichSpecial] = 1
      if (whichSpecial == 9) {
        document.getElementById("searchStatRow").style.display = ""
        document.getElementById("magnifyingGlassDiv").style.display = ""
        document.getElementById("magnifyingGlassDivLocked").style.display = "none"
        document.getElementById("findChance").style.display = ""
      }
    }
  }
  //Enable level upgrades again if doing a Clicking Spec descension
  if (currentDescensionType == 9 && numberDescensionsComplete[9] >= 0 && numberDescensionsComplete[9] <= 8) {
    var unlockLevel = (numberDescensionsComplete[9] + 1) * 10
    if (myLevel >= unlockLevel) {
      document.getElementById("coinmasterButton").style.display = ""
      document.getElementById("coinmasterButtonBlank").style.display = "none"
      document.getElementById("coinmasterButtonBlank").innerHTML = "<b>Reach Level 2</b>"
    }
  }
  //For final Clicking desc, disable Level upgrades 51-100 until Level 100
}

function autoBuyUpgrades() {
  //If you have an autoBuy reward from one of the Clicking Spec descs but you aren't working on the last one...
  if (numberDescensionsComplete[9] >= 2) { 
    if (prestigeComplete == false && currentDescensionType == 9 && numberDescensionsComplete[9] <= 8) { //If you're working on another Clicking Spec desc...
      var unlockLevel = (numberDescensionsComplete[9] + 1) * 10
      if (myLevel >= unlockLevel) { //If you have reached at least the level where the upgrades get unlocked...
        for (let i = 2; i <= unlockLevel - 10; i++) {
          if (boughtUpgrade[i] == 0 && bankAccount >= lvlUpgradeCost[i]) {
            var lvlFast = window["lvl"+i+"Upgrade"]
            lvlFast()
          }
        }
      }
    }
    else if (prestigeComplete == false && currentDescensionType == 9 && numberDescensionsComplete[9] == 9) {
      if (myLevel <= 99) {
        for (let i = 2; i <= Math.min(myLevel,50); i++) {
          if (boughtUpgrade[i] == 0 && bankAccount >= lvlUpgradeCost[i]) {
            var lvlFast = window["lvl"+i+"Upgrade"]
            lvlFast()
          }
        }
      }
      else {
        for (let i = 2; i <= 90; i++) {
          if (boughtUpgrade[i] == 0 && bankAccount >= lvlUpgradeCost[i]) {
            var lvlFast = window["lvl"+i+"Upgrade"]
            lvlFast()
          }
        }
      }
    }
    else { //If you're not currently working on a Clicking Spec desc, then there isn't an unlock level to worry about...
      for (let i = 2; i <= Math.min(myLevel,numberDescensionsComplete[9] * 10); i++) {
        if (boughtUpgrade[i] == 0 && bankAccount >= lvlUpgradeCost[i]) {
          var lvlFast = window["lvl"+i+"Upgrade"]
          lvlFast()
        }
      }
    }
  }
}

function summon() {
  document.getElementById("endingDiv").style.display = "grid"
  document.getElementById("summonButton").style.display = "none"
  var lastUpdate4 = Date.now()
  var tTotal4 = 0
  window.requestAnimationFrame(increment4)
  function increment4() {
    var now4 = Date.now()
    var dt4 = (now4 - lastUpdate4) / 1000
    lastUpdate4 = now4
    tTotal4 += dt4
    document.getElementById("gridContainer").style.opacity = Math.max(3 - tTotal4,0) / 3
    document.getElementById("endingDiv").style.opacity = Math.max(0,Math.min(tTotal4 - 4,3)) / 3
    if (tTotal4 <= 7) {
      window.requestAnimationFrame(increment4)
    }
    else {
      document.getElementById("gridContainer").style.display = "none"
      return
    }
  }
}

function coalesce() {
  document.getElementById("coalesceButton").style.display = "none"
  document.getElementById("masterCoinDiv").style.visibility = "visible"
  document.getElementById("masterCoinDivText").style.visibility = "visible"
  document.getElementById("coalesceText").style.visibility = "visible"
  document.getElementById("rememberButton").style.visibility = "visible"
  var lastUpdate5 = Date.now()
  var tTotal5 = 0
  window.requestAnimationFrame(increment5)
  function increment5() {
    var now5 = Date.now()
    var dt5 = (now5 - lastUpdate5) / 1000
    lastUpdate5 = now5
    tTotal5 += dt5
    document.getElementById("masterCoinDiv").style.opacity = Math.min(tTotal5 ** 2,25) / 25
    document.getElementById("masterCoinDivText").style.opacity = Math.min(tTotal5 ** 2,25) / 25
    document.getElementById("coalesceText").style.opacity = Math.min(tTotal5 ** 2,25) / 25
    document.getElementById("rememberButton").style.opacity = Math.max(0,Math.min(tTotal5 - 7,3)) / 3
    document.getElementById("familiarCoin").style.opacity = Math.max(0,Math.min(tTotal5 - 7,3)) / 3
    if (tTotal5 <= 10) {
      window.requestAnimationFrame(increment5)
    }
    else {return}
  }
}

function remember() {
  document.getElementById("rememberButton").style.display = "none"
  var lastUpdate6 = Date.now()
  var tTotal6 = 0
  window.requestAnimationFrame(increment6)
  function increment6() {
    var now6 = Date.now()
    var dt6 = (now6 - lastUpdate6) / 1000
    lastUpdate6 = now6
    tTotal6 += dt6
    document.getElementById("rememberDiv").style.opacity = Math.min(tTotal6 ** 2,25) / 25
    if (tTotal6 <= 5) {
      window.requestAnimationFrame(increment6)
    }
    else {return}
  }
}

function returnFn() {
  document.getElementById("gridContainer").style.display = "grid"
  document.getElementById("summonButton").style.display = ""
  var lastUpdate7 = Date.now()
  var tTotal7 = 0
  window.requestAnimationFrame(increment7)
  function increment7() {
    var now7 = Date.now()
    var dt7 = (now7 - lastUpdate7) / 1000
    lastUpdate7 = now7
    tTotal7 += dt7
    document.getElementById("endingDiv").style.opacity = Math.max(3 - tTotal7,0) / 3
    document.getElementById("gridContainer").style.opacity = Math.max(0,Math.min(tTotal7 - 4,3)) / 3
    if (tTotal7 <= 7) {
      window.requestAnimationFrame(increment7)
    }
    else {
      document.getElementById("endingDiv").style.display = "none"
      return
    }
  }
}

function openingStory(i) {
  if (i == 1) {
    document.getElementById("openingButton1").style.display = "none"
    document.getElementById("openingDiv2").style.display = ""
    document.getElementById("openingButton2").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv2").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton2").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else if (i == 2) {
    document.getElementById("openingButton2").style.display = "none"
    document.getElementById("openingDiv3").style.display = ""
    document.getElementById("openingButton3").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv3").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton3").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else if (i == 3) {
    document.getElementById("openingButton3").style.display = "none"
    document.getElementById("openingDiv4").style.display = ""
    document.getElementById("openingButton4").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv4").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton4").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else if (i == 4) {
    document.getElementById("openingButton4").style.display = "none"
    document.getElementById("openingDiv5").style.display = ""
    document.getElementById("openingButton5").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv5").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton5").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else if (i == 5) {
    document.getElementById("openingButton5").style.display = "none"
    document.getElementById("openingSadLady").style.display = ""
    document.getElementById("openingDiv6").style.display = ""
    document.getElementById("openingButton6").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv6").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton6").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingSadLady").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else if (i == 6) {
    document.getElementById("openingButton6").style.display = "none"
    document.getElementById("openingDiv7").style.display = ""
    document.getElementById("openingButton7").style.display = ""
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv7").style.opacity = Math.min(tTotal7,2) / 2
      document.getElementById("openingButton7").style.opacity = Math.min(tTotal7,2) / 2
      if (tTotal7 <= 2) {
        window.requestAnimationFrame(increment7)
      }
      else {
        return
      }
    }
  }
  else {
    openingDone = true
    document.getElementById("gridContainer").style.display = "grid"
    document.getElementById("openingButton7").style.visibility = "hidden"
    var lastUpdate7 = Date.now()
    var tTotal7 = 0
    window.requestAnimationFrame(increment7)
    function increment7() {
      var now7 = Date.now()
      var dt7 = (now7 - lastUpdate7) / 1000
      lastUpdate7 = now7
      tTotal7 += dt7
      document.getElementById("openingDiv").style.opacity = Math.max(3 - tTotal7,0) / 3
      document.getElementById("gridContainer").style.opacity = Math.max(0,Math.min(tTotal7 - 4,3)) / 3
      if (tTotal7 <= 7) {
        window.requestAnimationFrame(increment7)
      }
      else {
        document.getElementById("openingDiv").style.display = "none"
        return
      }
    }
  }
  document.getElementById("openingDivContainer").scrollTo(0,document.getElementById("openingDivContainer").scrollHeight)
}

function freeAchClick() {
  if (achHave[203] == 0) {
    achAward(203)
  }
}

function countGoldenClicks() {
  if (achHave[217] == 0) {
    goldenClicks++
    if (goldenClicks >= 10) {
      achAward(217)
    }
  }
}

function achUnlock(i) { //This just updates the UI to show the achievement
  document.getElementById("achievement"+i).style.background = 'url('+achPic[i]+')'
  document.getElementById("achievement"+i).style.backgroundSize = "contain"
  document.getElementById("achievement"+i).style.backgroundRepeat = "no-repeat"
  document.getElementById("achievement"+i).style.backgroundPositionX = "center"
  document.getElementById("achievement"+i).style.backgroundPositionY = "center"
  document.getElementById("achievement"+i).style.backgroundColor = achColor[i]
  document.getElementById("tip"+i).innerHTML = "<strong style='color:yellow'>" + achName[i] + "</strong><br>" + "~-~-~-~-~-~-~<br>" + achTip[i]
}

for (let i = 1; i <= 232; i++) {
  document.getElementById("tip"+i).innerHTML = "<strong style='color:yellow'>" + achName[i] + "</strong><br>" + "~-~-~-~-~-~-~<br> ???"
  // achUnlock(i)
}

var achDiv = [""]
for (let i = 1; i <= numAch; i++) {
  const newDiv = document.createElement("div")
  achDiv.push(newDiv)
  document.body.appendChild(newDiv)
  achDiv[i].style.display = "none"
}

function achMoveOffScreen(i) {
  if (achBoxClicked[i] == false) {
    achBoxClicked[i] = true
    var timeBeg = Date.now()
    var timeSince = 0
    var newBottom = 5
    window.requestAnimationFrame(increment8)
    function increment8() {
      timeSince = (Date.now() - timeBeg) / 1000
      newBottom = 5 - 105 / 2 * timeSince
      achDiv[i].style.bottom = newBottom + "%"
      if (timeSince <= 2) {
        window.requestAnimationFrame(increment8)
      }
      else {
        achDiv[i].style.display = "none"
        return
      }
    }
  }
}

function achAward(i) { //This awards the achievement for the first time, including a pop-up notification
  achUnlock(i)
  achDiv[i].style.display = ""
  achDiv[i].classList.add("achPopup")
  achDiv[i].innerHTML = "&starf;&nbsp;<strong style='color:cyan; border-bottom:1px solid white; line-height:2vmax'>ACHIEVEMENT EARNED!</strong>&nbsp;&starf;<br>"
    + "<strong style='color:yellow'>" + achName[i] + "</strong><br>" + "~-~-~-~-~-~-~<br>" + achTip[i]
  achDiv[i].addEventListener("click",function(){achMoveOffScreen(i)})
  achDiv[i].tabIndex = "1"
  achHave[i] = 1
  achievementSound.pause()
  achievementSound.currentTime = 0
  achievementSound.play()
  var numAchHave = 0
  for (let j = 1; j <= numAch; j++) {
    if (achHave[j] == 1) {
      numAchHave++
    }
  }
  document.getElementById("achHeader").innerHTML = "Achievements (" + numAchHave + "/" + numAch + ")"
}

function faceUp() {
  for (let i = 1; i <= coinCutoff; i++) {
    if (quantity[i] > 0) {
      document.getElementById("qty"+i).previousElementSibling.previousElementSibling
        .previousElementSibling.firstElementChild.src = "Coin Pictures/" + i + "front.jpg"
    }
  }
  binaryCoinSide = Array(2298).fill(0)
}

function updateCoinAmts() {
  for (let i = 1; i <= coinCutoff; i++) {
    if (quantity[i] > 0) {
      document.getElementById("qty"+i).innerHTML = numberWithCommas(quantity[i])
    }
  }
}


function increment() {
  var now = Date.now()
  var dt = (now - lastUpdate) / 1000
  lastUpdate = now

  //News ticker
  oldWhichTicker = whichTicker
  if (Math.floor((Date.now() - firstTickerTime) / 1000 / 10) % 2 == 0) { //If time since first is between 0-10, 20-30, 40-50, etc.
    whichTicker = 0
  }
  else { //If time since first is between 10-20, 30-40, 50-60, etc.
    whichTicker = 1
  }
  if (oldWhichTicker != whichTicker) {
    u = Math.ceil((ticker.length - 1) * Math.random())
    newTicker[whichTicker].innerHTML = ticker[u]
    newTicker[whichTicker].style.top = "100%"
    var timeBeg = Date.now()
    var timeSince = 0
    var newTop = 0

    window.requestAnimationFrame(increment9)
    function increment9() {
      timeSince = (Date.now() - timeBeg) / 1000
      newTop = - 100 * timeSince
      newTicker[1-whichTicker].style.top = newTop + "%"
      newTicker[1-whichTicker].style.opacity = Math.max(1 - 2 * timeSince,0)
      newTicker[whichTicker].style.top = 100 + newTop + "%"
      newTicker[whichTicker].style.opacity = Math.min(1 - (1 - timeSince) ** 0.5,1)
      if (timeSince < 1) {
        window.requestAnimationFrame(increment9)
      }
      else {
        newTicker[whichTicker].style.opacity = 1
        newTicker[1-whichTicker].style.opacity = 1
        return
      }
    }
  }


  //Updates all specials timers
  for (let i = 1; i <= 8; i++) {
    if (i != 5) {
      elapsedTime[i] = Math.floor((Date.now() - startTime[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
      remainingTime[i] = specialsCooldown[i] - elapsedTime[i]
      hh[i] = Math.floor(remainingTime[i] / 3600)
      mm[i] = Math.floor((remainingTime[i] % 3600) / 60)
      ss[i] = Math.floor((remainingTime[i] % 60))
      hhMod[i] = hh[i]
      mmMod[i] = mm[i]
      ssMod[i] = ss[i]
      if (hh[i] < 10) {
        hhMod[i] = "0" + hh[i].toString()
      }
      if (mm[i] < 10) {
        mmMod[i] = "0" + mm[i].toString()
      }
      if (ss[i] < 10) {
        ssMod[i] = "0" + ss[i].toString()
      }
      document.getElementById("timer"+i).innerHTML = hhMod[i] + ":" + mmMod[i] + ":" + ssMod[i]
    }
    if (remainingTime[i] < 1 && i != 4 && i != 5 && i != 6 && !(i == 3 && numberDescensionsComplete[2] == 10)) {
      document.getElementById("timer"+i).style.display = "none"
      document.getElementById("ready"+i).style.display = ""
      specialReady[i] = 1
      updateSpecialsBadge()
      if (i == 7) {
        document.getElementById("fountainPic").src = "waterFountainFull.jpg"
      }
      if (i <= 2 && numberDescensionsComplete[1] == 10 && whichEnabled[1] == 1) {
        vendingMachine1Collect()
        vendingMachine2Collect()
      }
      if (i == 7 && numberDescensionsComplete[3] == 10 && whichEnabled[3] == 1) {
        fountainCollect()
      }
      if (i == 8 && numberDescensionsComplete[4] >= 9) {
        metalDetectorStart()
        specialReady[8] = 1
        updateSpecialsBadge()
        if (numberDescensionsComplete[4] == 10 && whichEnabled[4] == 1) {
          openChest()
          metalDetectorStarted = 0
        }
      }
    }
  }
  if (remainingTime[6] < 1 && vacuumSearching == false && vacuumReady == false && vacuumCollected == false) {
    document.getElementById("timer6").style.display = "none"
    document.getElementById("ready6").style.display = ""
    specialReady[6] = 1
    updateSpecialsBadge()
    if (numberDescensionsComplete[6] == 10) {
      startVacuum()
    }
  }
  if (numberDescensionsComplete[4] == 10) {
    document.getElementById("ready8").style.display = "none"
    document.getElementById("timer8").style.display = ""
  }

  //Traveling salesman
  if ((Date.now() / 60000) % 60 < 10) {
    if (salesmanPresent == false) {
      travelingSalesmanArrive()
    }
    mm[4] = Math.floor(10 - (Date.now() / 60000) % 60)
    ss[4] = Math.floor(60 * (10 - (Date.now() / 60000) % 60 - mm[4]))
    document.getElementById("timer4").style.backgroundColor = "lightgreen"
  }
  else if ((Date.now() / 60000) % 60 >= 10) {
    if (salesmanPresent == true) {
      travelingSalesmanDepart()
    }
    mm[4] = Math.floor(60 - (Date.now() / 60000) % 60)
    ss[4] = Math.floor(60 * (60 - (Date.now() / 60000) % 60 - mm[4]))
    document.getElementById("timer4").style.backgroundColor = "pink"
  }
  hhMod[4] = "00"
  mmMod[4] = mm[4]
  ssMod[4] = ss[4]
  if (mm[4] < 10) {
    mmMod[4] = "0" + mm[4].toString()
  }
  if (ss[4] < 10) {
    ssMod[4] = "0" + ss[4].toString()
  }
  document.getElementById("timer4").innerHTML = hhMod[4] + ":" + mmMod[4] + ":" + ssMod[4]

  //Seeker pills
  if (seekerPillActive == 1 && (Date.now() - seekerPillStartTime) / 1000 > seekerPillDuration && numberDescensionsComplete[2] < 10) {
    seekerPillStop()
  }

  //Coin roll generation + timer progress
  if (specialIsUnlocked[5] == true) {
    for (let i = 1; i <= 6; i++) {
      //If we aren't currently in one of the first 5 bank descensions...
      if (!(prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] <= 4 &&
        ((i == 1 && numberDescensionsComplete[5] >= 0) || (i == 2 && numberDescensionsComplete[5] >= 1) ||
        (i == 3 && numberDescensionsComplete[5] >= 2) || (i == 4 && numberDescensionsComplete[5] >= 3) ||
        (i == 5 && numberDescensionsComplete[5] >= 4))
        )) {
        if (coinRollAvail[i] < coinRollLimit[i]) {
          elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
          var numNewRolls = Math.min(coinRollLimit[i] - coinRollAvail[i] , Math.floor(elapsedTimeRoll[i] / coinRollPrepTime[i]))
          if (numNewRolls >= 1) { //If a new roll is to appear
            if (coinRollAvail[i] + numNewRolls == coinRollLimit[i]) {
              coinRollProgress[i] = 0
              document.getElementById("rollProgress"+i).value = 0
            }
            else {
              coinRollProgress[i] = (elapsedTimeRoll[i] / coinRollPrepTime[i]) % 1
              document.getElementById("rollProgress"+i).value = coinRollProgress[i]
            }
            coinRollAvail[i] += numNewRolls
            document.getElementById("rollHeader"+i).innerHTML = coinWord[i] + " (" + coinRollAvail[i] + "/" + coinRollLimit[i] + ")"
            specialReady[5] = 1
            if (bankIsOpen == false) {
              document.getElementById("bankPic").src = "bankOn.png"
            }
            else if (achHave[186] == 0) { //If bank is open and coin roll appears while you watch, get achievement
              achAward(186)
            }
            if (achHave[187] == 0 && coinRollAvail[1] * coinRollAvail[2] * coinRollAvail[3] * coinRollAvail[4] * coinRollAvail[5] * coinRollAvail[6] == 1) {
              achAward(187)
            }
            if (achHave[188] == 0 && coinRollAvail[1] == 6 && coinRollAvail[2] == 5 && coinRollAvail[3] == 4 && coinRollAvail[4] == 3 && coinRollAvail[5] == 2 && coinRollAvail[6] == 1) {
              achAward(188)
            }
            updateSpecialsBadge()
            //Redefine start time back in the past so that elapsed time is exactly the leftover portion of time since catch-up
            startTimeRoll[i] = Date.now() - coinRollProgress[i] * coinRollPrepTime[i]
          }
          else { //If no new rolls are to appear
            coinRollProgress[i] = elapsedTimeRoll[i] / coinRollPrepTime[i]
            document.getElementById("rollProgress"+i).value = coinRollProgress[i]
          }
          elapsedTimeRoll[i] = Math.floor((Date.now() - startTimeRoll[i]) / 1000) //elapsed time since timer started, in seconds, rounded down
          remainingTimeRoll[i] = coinRollPrepTime[i] - elapsedTimeRoll[i]
          hhRoll[i] = Math.floor(remainingTimeRoll[i] / 3600)
          mmRoll[i] = Math.floor((remainingTimeRoll[i] % 3600) / 60)
          ssRoll[i] = Math.floor((remainingTimeRoll[i] % 60))
          hhModRoll[i] = hhRoll[i]
          mmModRoll[i] = mmRoll[i]
          ssModRoll[i] = ssRoll[i]
          if (hhRoll[i] < 10) {
            hhModRoll[i] = "0" + hhRoll[i].toString()
          }
          if (mmRoll[i] < 10) {
            mmModRoll[i] = "0" + mmRoll[i].toString()
          }
          if (ssRoll[i] < 10) {
            ssModRoll[i] = "0" + ssRoll[i].toString()
          }
          document.getElementById("rollTimer"+i).innerHTML = hhModRoll[i] + ":" + mmModRoll[i] + ":" + ssModRoll[i]
          if (coinRollAvail[i] == coinRollLimit[i]) {
            remainingTimeRoll[i] = 1000000000
          }
        }
        for (let j = 1; j <= coinRollAvail[i]; j++) {
          document.getElementById("roll"+i+"_"+j).style.display = ""
        }
      }
    }
    hh[5] = Math.floor(Math.min(remainingTimeRoll[1],remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) / 3600)
    mm[5] = Math.floor((Math.min(remainingTimeRoll[1],remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 3600) / 60)
    ss[5] = Math.floor((Math.min(remainingTimeRoll[1],remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 60))
    if (prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] == 0) {
      hh[5] = Math.floor(Math.min(remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) / 3600)
      mm[5] = Math.floor((Math.min(remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 3600) / 60)
      ss[5] = Math.floor((Math.min(remainingTimeRoll[2],remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 60))
    }
    else if (prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] == 1) {
      hh[5] = Math.floor(Math.min(remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) / 3600)
      mm[5] = Math.floor((Math.min(remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 3600) / 60)
      ss[5] = Math.floor((Math.min(remainingTimeRoll[3],remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 60))
    }
    else if (prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] == 2) {
      hh[5] = Math.floor(Math.min(remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) / 3600)
      mm[5] = Math.floor((Math.min(remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 3600) / 60)
      ss[5] = Math.floor((Math.min(remainingTimeRoll[4],remainingTimeRoll[5],remainingTimeRoll[6]) % 60))
    }
    else if (prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] == 3) {
      hh[5] = Math.floor(Math.min(remainingTimeRoll[5],remainingTimeRoll[6]) / 3600)
      mm[5] = Math.floor((Math.min(remainingTimeRoll[5],remainingTimeRoll[6]) % 3600) / 60)
      ss[5] = Math.floor((Math.min(remainingTimeRoll[5],remainingTimeRoll[6]) % 60))
    }
    else if (prestigeComplete == false && currentDescensionType == 5 && numberDescensionsComplete[5] == 4) {
      hh[5] = Math.floor(remainingTimeRoll[6] / 3600)
      mm[5] = Math.floor((remainingTimeRoll[6] % 3600) / 60)
      ss[5] = Math.floor(remainingTimeRoll[6] % 60)
    }

    if (coinRollAvail[1] == coinRollLimit[1] && coinRollAvail[2] == coinRollLimit[2] && coinRollAvail[3] == coinRollLimit[3] && 
        coinRollAvail[4] == coinRollLimit[4] && coinRollAvail[5] == coinRollLimit[5] && coinRollAvail[6] == coinRollLimit[6]) {
      hh[5] = 0
      mm[5] = 0
      ss[5] = 0
    }
    hhMod[5] = hh[5]
    mmMod[5] = mm[5]
    ssMod[5] = ss[5]
    if (hh[5] < 10) {
      hhMod[5] = "0" + hh[5].toString()
    }
    if (mm[5] < 10) {
      mmMod[5] = "0" + mm[5].toString()
    }
    if (ss[5] < 10) {
      ssMod[5] = "0" + ss[5].toString()
    }
    document.getElementById("timer5").innerHTML = hhMod[5] + ":" + mmMod[5] + ":" + ssMod[5]
    if (numberDescensionsComplete[5] == 10 && whichEnabled[5] == 1 && toggleAutoBuyRolls == true) {
      for (let i = 1; i <= 6; i++) {
        for (let j = 1; j <= coinRollAvail[i]; j++) {
          buyCoinRoll(i)
        }
      }
    }
  }

  //Coin Vacuum animation
  if (vacuumSearching == true || vacuumReady == true || vacuumCollected == true) {
    totalVacuumTime += dt
    totalVacuumRetreatTime += dt
    if (totalVacuumTime < time1) { //going right
      L = -15 + totalVacuumTime * vacuumSpeed
      T = 20
      degree = 0
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time1 < totalVacuumTime && totalVacuumTime <= time2) { //rotating down
      L = 90
      T = 20
      degree = 0 + (totalVacuumTime - time1) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time2 < totalVacuumTime && totalVacuumTime <= time3) { //going down
      L = 90
      T = 20 + (totalVacuumTime - time2) * vacuumSpeed
      degree = 90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time3 < totalVacuumTime && totalVacuumTime <= time4) { //rotating left
      L = 90
      T = 30
      degree = 90 + (totalVacuumTime - time3) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time4 < totalVacuumTime && totalVacuumTime <= time5) { //going left
      L = 90 - (totalVacuumTime - time4) * vacuumSpeed
      T = 30
      degree = 180
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time5 < totalVacuumTime && totalVacuumTime <= time6) { //rotating down
      L = 0
      T = 30
      degree = 180 - (totalVacuumTime - time5) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time6 < totalVacuumTime && totalVacuumTime <= time7) { //going down
      L = 0
      T = 30 + (totalVacuumTime - time6) * vacuumSpeed
      degree = 90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time7 < totalVacuumTime && totalVacuumTime <= time8) { //rotating right
      L = 0
      T = 40
      degree = 90 - (totalVacuumTime - time7) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time8 < totalVacuumTime && totalVacuumTime <= time9) { //going right
      L = 0 + (totalVacuumTime - time8) * vacuumSpeed
      T = 40
      degree = 0
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time9 < totalVacuumTime && totalVacuumTime <= time10) { //rotating down
      L = 90
      T = 40
      degree = 0 + (totalVacuumTime - time9) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time10 < totalVacuumTime && totalVacuumTime <= time11) { //going down
      L = 90
      T = 40 + (totalVacuumTime - time10) * vacuumSpeed
      degree = 90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time11 < totalVacuumTime && totalVacuumTime <= time12) { //rotating left
      L = 90
      T = 50
      degree = 90 + (totalVacuumTime - time11) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time12 < totalVacuumTime && totalVacuumTime <= time13) { //going left
      L = 90 - (totalVacuumTime - time12) * vacuumSpeed
      T = 50
      degree = 180
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time13 < totalVacuumTime && totalVacuumTime <= time14) { //rotating down
      L = 0
      T = 50
      degree = 180 - (totalVacuumTime - time13) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time14 < totalVacuumTime && totalVacuumTime <= time15) { //going down
      L = 0
      T = 50 + (totalVacuumTime - time14) * vacuumSpeed
      degree = 90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time15 < totalVacuumTime && totalVacuumTime <= time16) { //rotating right
      L = 0
      T = 60
      degree = 90 - (totalVacuumTime - time15) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time16 < totalVacuumTime && totalVacuumTime <= time17) { //going right
      L = 0 + (totalVacuumTime - time16) * vacuumSpeed
      T = 60
      degree = 0
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time17 < totalVacuumTime && totalVacuumTime <= time18) { //rotating down
      L = 90
      T = 60
      degree = 0 + (totalVacuumTime - time17) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time18 < totalVacuumTime && totalVacuumTime <= time19) { //going down
      L = 90
      T = 60 + (totalVacuumTime - time18) * vacuumSpeed
      degree = 90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time19 < totalVacuumTime && totalVacuumTime <= time20) { //rotating left
      L = 90
      T = 70
      degree = 90 + (totalVacuumTime - time19) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time20 < totalVacuumTime && totalVacuumTime <= time21) { //going left
      L = 90 - (totalVacuumTime - time20) * vacuumSpeed
      T = 70
      degree = 180
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time21 < totalVacuumTime && totalVacuumTime <= time22) { //rotate up
      L = 0
      T = 70
      degree = 180 + (totalVacuumTime - time21) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time22 < totalVacuumTime && totalVacuumTime <= time23) { //going up halfway
      L = 0
      T = 70 - (totalVacuumTime - time22) * vacuumSpeed
      degree = -90
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time23 < totalVacuumTime && totalVacuumTime <= time24) { //rotating right
      L = 0
      T = 45
      degree = -90 + (totalVacuumTime - time23) * vacuumRotateSpeed
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (time24 < totalVacuumTime && totalVacuumTime <= time25) { //going right halfway
      L = 0 + (totalVacuumTime - time24) * vacuumSpeed
      T = 45
      degree = 0
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (totalVacuumTime > time25 && vacuumCollected == false) {
      vacuumReady = true
      L = 47
      T = 45
      degree = 0
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
      vacDiv.style.cursor = "pointer"
      vacDiv.addEventListener("click",vacuumCollect)
      document.getElementById("searching6").innerHTML = "READY TO COLLECT"
      document.getElementById("searching6").style.backgroundColor = "lightgreen"
      specialReady[6] = 1
      updateSpecialsBadge()
      if (numberDescensionsComplete[6] == 10 && whichEnabled[6] == 1) {
        vacuumCollect()
      }
    }
    else if (vacuumCollected == false) {
      //Do nothing. Waiting until clicked to begin retreat.
    }
    else if (totalVacuumRetreatTime <= retreatTime1) { //rotate 180 back to left, twice as fast
      L = 47
      T = 45
      degree = 0 + totalVacuumRetreatTime * vacuumRotateSpeed * 2
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
    }
    else if (retreatTime1 < totalVacuumRetreatTime && totalVacuumRetreatTime <= retreatTime2) { //going left, disappearing offscreen
      L = 47 - (totalVacuumRetreatTime - retreatTime1) * vacuumSpeed
      T = 45
      degree = 180
      vacDiv.style.left = L + "%"
      vacDiv.style.top = T + "%"
      rotateImage(degree)
      if (achHave[195] == 0 && stalking == true && L <= 0) {
        achAward(195)
      }
    }
    else if (totalVacuumRetreatTime >= retreatTime2) {
      vacDiv.style.display = "none"
      vacuumSearching = false
      vacuumCollected = false
      specialReady[6] = 0
      document.getElementById("searching6").style.display = "none"
      document.getElementById("searching6").innerHTML = "SCANNING"
      document.getElementById("timer6").style.display = ""
      document.getElementById("ready6").style.display = "none"
      startTime[6] = Date.now()
    }
  }

  //Coin Pusher
  if (specialIsUnlocked[9] == true) {
    if (remainingTime[9] > 0) {
      var remainingTimePrior = remainingTime[9] //Remaining time at end of previous frame
      elapsedTime[9] = Math.floor(1 * (Date.now() - startTime[9]) / 1000)
      remainingTime[9] = Math.max(0 , specialsCooldown[9] - elapsedTime[9])
      document.getElementById("coinPusherPic").src = "coinPusher.png"
      document.getElementById("coinPusherShelfPic").src = "coinPusherShelf.png"
      if (document.getElementById("specials9Unlocked").style.display == "flex") {
        const h = 0.55 * document.getElementById("coinPusherShelf").offsetHeight / document.getElementById("specials9Unlocked").offsetHeight * 100
        var top = -h/2 + h/2 * Math.cos(2 * Math.PI * (Date.now()-startTime[9]) / 1000 / 5)
        document.getElementById("coinPusherShelf").style.top = top + "%"
      }
      specialReady[9] = 0
      updateSpecialsBadge()
    }
    else if (remainingTime[9] == 0) {
      document.getElementById("coinPusherShelf").style.top = "0%"
      document.getElementById("coinPusherPic").src = "coinPusherDark.png"
      document.getElementById("coinPusherShelfPic").src = "coinPusherShelfDark.png"
      specialReady[9] = 1
      updateSpecialsBadge()
    }
    hh[9] = Math.floor(remainingTime[9] / 3600)
    mm[9] = Math.floor((remainingTime[9] % 3600) / 60)
    ss[9] = Math.floor((remainingTime[9] % 60))
    hhMod[9] = hh[9]
    mmMod[9] = mm[9]
    ssMod[9] = ss[9]
    if (hh[9] < 10) {
      hhMod[9] = "0" + hh[9].toString()
    }
    if (mm[9] < 10) {
      mmMod[9] = "0" + mm[9].toString()
    }
    if (ss[9] < 10) {
      ssMod[9] = "0" + ss[9].toString()
    }
    document.getElementById("timer9").innerHTML = hhMod[9] + ":" + mmMod[9] + ":" + ssMod[9]
    if (Math.floor(remainingTime[9]) % 5 == 0 && pusherReady == 0) { //When remainingTime[9] is first a multiple of 5 seconds
      //Set the time of collection
      var pusherCollecting = Date.now()
      //Determine the time since the last collection or the last loading of a coin when empty, whichever came later
      var timeSince = (pusherCollecting - pusherCollected) / 1000 //Initially, pusherCollected = 0, so it's catching up since 1970
      //Determine the number of collections to catch up on.
      //"timeSince / 5" is the number of 5-second intervals since the last collection or loading when empty
      //"Math.ceil(remainingTimePrior / 5)" is how many collections you would have left based on remaining time
      var numberOfCollections = Math.round(Math.min(timeSince / 5 , Math.ceil(remainingTimePrior / 5)))
      coinPusherCollect(numberOfCollections)
      pusherCollected = Date.now()
      pusherReady = 1
    }
    else if (Math.floor(remainingTime[9]) % 5 != 0) {
      pusherReady = 0
    }
    if (remainingTime[9] + coinLoadSec <= pusherMaxTime) {
      document.getElementById("ready9").style.backgroundColor = "lightgreen"
      document.getElementById("ready9").style.cursor = "pointer"
    }
    else {
      document.getElementById("ready9").style.backgroundColor = "pink"
      document.getElementById("ready9").style.cursor = "default"
    }
    if (achHave[197] == 0 && remainingTime[9] >= pusherMaxTime - 0.5) {
      achAward(197)
    }
  }

  //Seeker update
  for (let i = 1; i <= 8; i++) {
    if (seekerHired[i] == 1 && (fTotal[i] > 0 || numberDescensionsComplete[8] == 10)) { //If this seeker is hired and it still has fuel,
      var timeLeft = Math.max(seekerFuelLeft[i],0) //Time that seeker had left last time window was loaded

      //Fuel bar going down
      var maxHeight = document.getElementById("seeker"+i+"fuel").parentElement.offsetHeight
      if (numberDescensionsComplete[8] <= 9) {
        seekerFuelLeft[i] -= dt
        fTotal[i] = maxHeight * Math.max(seekerFuelLeft[i],0) / seekerFuelTime[seekerFuelTimeUpgrade]
      }
      else {
        fTotal[i] = maxHeight
      }
      
      //Search progress bar going right
      seekerProgress[i] += dt
      var maxWidth = document.getElementById("seeker"+i+"cooldown").parentElement.offsetWidth
      wTotal[i] = maxWidth * seekerProgress[i] / seekerCooldown[seekerCooldownUpgrade]

      //If search progress bar has filled up at least once, possibly while tab not active,
      if (wTotal[i] > maxWidth) {
        //Allow only as many searches as fuel will allow
        var numberOfSearches //Number of searches performed since last frame, limited by fuel present at end of last frame
          = Math.round(Math.min(Math.floor(wTotal[i] / maxWidth), timeLeft / seekerCooldown[seekerCooldownUpgrade]))
        seekerProgress[i] -= Math.floor(wTotal[i] / maxWidth) * seekerCooldown[seekerCooldownUpgrade]
        wTotal[i] -= Math.floor(wTotal[i] / maxWidth) * maxWidth //Used to be wTotal[i] -= numberOfSearches * maxWidth
        if (seekerReadyToLevel[i] == 0) { //If not prepared to level up yet,
          if (seekerLevel[i] < 10) {
            seekerSearches[i] += numberOfSearches
            if (seekerSearches[i] >= seekerSearchesToLevel[i]) {
              seekerSearches[i] = seekerSearchesToLevel[i]
            }
            document.getElementById("seeker"+i+"expbar").value = seekerSearches[i] / seekerSearchesToLevel[i]
            document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerSearches[i]
            document.getElementById("statSeeker"+i+"ProgressToLvl").innerHTML
              = Math.round(1000 * seekerSearches[i] / seekerSearchesToLevel[i]) / 10 + "%"
            document.getElementById("statSeeker"+i+"ChanceNextLvl").innerHTML
              = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])) / 10 + "%"
            document.getElementById("statSeeker"+i+"ChanceLvl10").innerHTML
              = Math.round(1000 * (1 - 1 / (3 * seekerSearchesToLevel[i])) ** (seekerSearchesToLevel[i] - seekerSearches[i])
                * 0.7164 ** (9 - seekerLevel[i])) / 10 + "%"
          }

          //If a small-probability event happens and if not level 10 yet, the seeker will retire.
          //If e is this tiny probability, then 1-(1-e)^numberOfSearches is the probability it will happen at least once
          //But we only factor in the searches until preparing to level because if waiting to level, the seeker won't retire.
          var numberOfSearchesCounted = Math.min(numberOfSearches,seekerSearchesToLevel[i]-seekerSearches[i])
          if (Math.random() < 1 - (1 - 1 / (3 * seekerSearchesToLevel[i])) ** numberOfSearchesCounted && seekerLevel[i] < 10
              && numberDescensionsComplete[8] <= 0) {
            seekerSearch(i,Math.round(Math.random() * numberOfSearchesCounted))
            retireSeeker(i)
          }
          //If it has searched enough to level and hasn't retired, the button to level up will appear.
          else if (seekerSearches[i] >= seekerSearchesToLevel[i] && seekerLevel[i] < 10) {
            seekerSearch(i,numberOfSearches)
            prepareToLevelSeeker(i,seekerLevel[i])
          }
          //If it hasn't retired and isn't ready to level yet,
          else {
            seekerSearch(i,numberOfSearches)
          }
        }
        else {
          seekerSearch(i,numberOfSearches)
          document.getElementById("statSeeker"+i+"SearchesInLvl").innerHTML = seekerSearches[i]
        }
      }
      document.getElementById("seeker"+i+"cooldown").style.width = wTotal[i] + "px"
      document.getElementById("seeker"+i+"fuel").style.height = fTotal[i] + "px"
    }
  }

  window.requestAnimationFrame(increment)
}

function lvl2Upgrade() { //--> Search power = 1.5
  if (myLevel >= 2 && bankAccount >= lvlUpgradeCost[2]) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked = 1
      jumpToMessage(numberMessagesUnlocked)
    }
    boughtUpgrade[2] = 1
    searchPower *= 1.5
    document.getElementById("lvl2Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[2]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl3Upgrade() { //--> Search power = 2
  if (myLevel >= 3 && bankAccount >= lvlUpgradeCost[3] && boughtUpgrade[2] == 1) {
    boughtUpgrade[3] = 1
    searchPower *= 4/3
    document.getElementById("lvl3Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[3]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl4Upgrade() { //--> Search power = 3
  if (myLevel >= 4 && bankAccount >= lvlUpgradeCost[4] && boughtUpgrade[3] == 1) {
    boughtUpgrade[4] = 1
    searchPower *= 1.5
    document.getElementById("lvl4Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[4]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl5Upgrade() { //--> Search power = 4
  if (myLevel >= 5 && bankAccount >= lvlUpgradeCost[5] && boughtUpgrade[4] == 1) {
    boughtUpgrade[5] = 1
    searchPower *= 4/3
    document.getElementById("lvl5Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[5]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl6Upgrade() { //--> Unleash the Golden Buffalo
  if (myLevel >= 6 && bankAccount >= lvlUpgradeCost[6] && boughtUpgrade[5] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[6] = 1
      goldenBuffaloSpawnTime = 360000
      document.getElementById("goldenBuffaloPic").style.display = "block"
      document.getElementById("goldenBuffaloAmount").style.display = "block"
      document.getElementById("goldenBuffaloStatRow").style.display = ""
    }
    else if (boughtUpgrade[6] == 0) {
      boughtUpgrade[6] = 1
      goldenBuffaloCount += 1
      goldenBuffalosFound += 1
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "1" + " Golden Buffalo nickel!")
    }
    bankAccount -= lvlUpgradeCost[6]
    document.getElementById("lvl6Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl7Upgrade() { //--> Unlock Seeker 1
  if (myLevel >= 7 && bankAccount >= lvlUpgradeCost[7] && boughtUpgrade[6] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[7] = 1
      seekerUnlocked[1] = 1
      document.getElementById("seekerboxBlank1").style.display = "block"
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      document.getElementById("statSeeker1Row").style.display = ""
      document.getElementById("seekerStatTable").style.display = ""
      document.getElementById("seekerStatTableLocked").style.display = "none"
      getNoneB = 1
      for (let i = 1; i <= coinCutoff; i++) {
        b[i] = 1 + seekerPower * probability[i] * fudgeFactorFixed
        getNoneB /= b[i]
      }
      getSomethingB = 1 - getNoneB
      seekerChance = getSomethingB * 100
      document.getElementById("seekerStatRow").style.display = ""
      document.getElementById("seekerArea").style.display = "flex"
      document.getElementById("unlockSeekerAtLevel").style.display = "none"
    }
    else if (boughtUpgrade[7] == 0) {
      boughtUpgrade[7] = 1
      goldenBuffaloCount += 2
      goldenBuffalosFound += 2
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "2" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[7]
    document.getElementById("lvl7Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl8Upgrade() { //--> Search power = 6
  if (myLevel >= 8 && bankAccount >= lvlUpgradeCost[8] && boughtUpgrade[7] == 1) {
    boughtUpgrade[8] = 1
    searchPower *= 1.5
    document.getElementById("lvl8Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[8]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl9Upgrade() { //--> Search power = 8
  if (myLevel >= 9 && bankAccount >= lvlUpgradeCost[9] && boughtUpgrade[8] == 1) {
    boughtUpgrade[9] = 1
    searchPower *= 4/3
    document.getElementById("lvl9Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[9]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl10Upgrade() { //--> Unlock nickels
  if (myLevel >= 10 && bankAccount >= lvlUpgradeCost[10] && boughtUpgrade[9] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[10] = 1
      typesUnlocked[2] = 1
      coinCutoff = coinCutoffVector[2]
  
      document.getElementById("nickelHeader").style.display = ""
      document.getElementById("nickels18661883").style.display = "block"
      document.getElementById("nickelGroup1").style.display = "block"
      document.getElementById("nickels18831912").style.display = "block"
      document.getElementById("nickelGroup2").style.display = "block"
      document.getElementById("nickels19131938").style.display = "block"
      document.getElementById("nickelGroup3").style.display = "block"
      document.getElementById("nickels19382003").style.display = "block"
      document.getElementById("nickelGroup4").style.display = "block"
      document.getElementById("nickels20042005").style.display = "block"
      document.getElementById("nickelGroup5").style.display = "block"
      document.getElementById("nickels2006pres").style.display = "block"
      document.getElementById("nickelGroup6").style.display = "block"
    }
    else if (boughtUpgrade[10] == 0) {
      boughtUpgrade[10] = 1
      goldenBuffaloCount += 3
      goldenBuffalosFound += 3
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "3" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl10Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[10]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl11Upgrade() { //--> Search power = 10
  if (myLevel >= 11 && bankAccount >= lvlUpgradeCost[11] && boughtUpgrade[10] == 1) {
    boughtUpgrade[11] = 1
    searchPower *= 5/4
    document.getElementById("lvl11Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[11]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl12Upgrade() { //--> Unlock Seeker 2
  if (myLevel >= 12 && bankAccount >= lvlUpgradeCost[12] && boughtUpgrade[11] == 1) {
    if (ascensionLevel == 0) {
      seekerUnlocked[2] = 1
      document.getElementById("statSeeker2Row").style.display = ""
      boughtUpgrade[12] = 1
      document.getElementById("seekerboxBlank2").style.display = "block"
    }
    else if (boughtUpgrade[12] == 0) {
      boughtUpgrade[12] = 1
      goldenBuffaloCount += 4
      goldenBuffalosFound += 4
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "4" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[12]
    document.getElementById("lvl12Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl13Upgrade() { //--> Search power = 12
  if (myLevel >= 13 && bankAccount >= lvlUpgradeCost[13] && boughtUpgrade[12] == 1) {
    boughtUpgrade[13] = 1
    searchPower *= 1.2
    document.getElementById("lvl13Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[13]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl14Upgrade() { //--> Seeker duration = 5min
  if (myLevel >= 14 && bankAccount >= lvlUpgradeCost[14] && boughtUpgrade[13] == 1) {
    boughtUpgrade[14] = 1
    seekerFuelTimeUpgrade = 2
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl14Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[14]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl15Upgrade() { //--> Unlock dimes
  if (myLevel >= 15 && bankAccount >= lvlUpgradeCost[15] && boughtUpgrade[14] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[15] = 1
      typesUnlocked[3] = 1
      coinCutoff = coinCutoffVector[3]

      document.getElementById("dimeHeader").style.display = ""
      document.getElementById("dimes18371891").style.display = "block"
      document.getElementById("dimeGroup1").style.display = "block"
      document.getElementById("dimes18921916").style.display = "block"
      document.getElementById("dimeGroup2").style.display = "block"
      document.getElementById("dimes19161945").style.display = "block"
      document.getElementById("dimeGroup3").style.display = "block"
      document.getElementById("dimes1946pres").style.display = "block"
      document.getElementById("dimeGroup4").style.display = "block"
    }
    else if (boughtUpgrade[15] == 0) {
      boughtUpgrade[15] = 1
      goldenBuffaloCount += 5
      goldenBuffalosFound += 5
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "5" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl15Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[15]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl16Upgrade() { //--> Seeker interval = 4.5s
  if (myLevel >= 16 && bankAccount >= lvlUpgradeCost[16] && boughtUpgrade[15] == 1) {
    boughtUpgrade[16] = 1
    seekerCooldownUpgrade = 2
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl16Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[16]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl17Upgrade() { //--> Increase golden buffalo yield (1-2 per click)
  if (myLevel >= 17 && bankAccount >= lvlUpgradeCost[17] && boughtUpgrade[16] == 1) {
    boughtUpgrade[17] = 1
    buffaloUB = 2 //Now for buffalo amount per click, a random number will be taken from (0,2) and rounded up
    document.getElementById("lvl17Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[17]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl18Upgrade() { //--> Unlock Seeker 3
  if (myLevel >= 18 && bankAccount >= lvlUpgradeCost[18] && boughtUpgrade[17] == 1) {
    if (ascensionLevel == 0) {
      seekerUnlocked[3] = 1
      document.getElementById("statSeeker3Row").style.display = ""
      boughtUpgrade[18] = 1
      document.getElementById("seekerboxBlank3").style.display = "block"
    }
    else if (boughtUpgrade[18] == 0) {
      boughtUpgrade[18] = 1
      goldenBuffaloCount += 6
      goldenBuffalosFound += 6
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "6" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[18]
    document.getElementById("lvl18Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl19Upgrade() { //--> More Stats
  if (myLevel >= 19 && bankAccount >= lvlUpgradeCost[19] && boughtUpgrade[18] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[19] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      document.getElementById("moreStatBuyToUnlock").style.display = "none"
      document.getElementById("moreStatHeader1").style.display = ""
      document.getElementById("moreStatHeader2").style.display = ""
      document.getElementById("moreStatHeader3").style.display = ""
      document.getElementById("moreStatHeader4").style.display = ""
      document.getElementById("moreStatHeader5").style.display = ""
      document.getElementById("moreStatHeader6").style.display = ""
      document.getElementById("searchProbNewStat").style.display = ""
      document.getElementById("searchExpNewStat").style.display = ""
      document.getElementById("searchExpectedCoins").style.display = ""
      document.getElementById("searchNumSearches").style.display = ""
      document.getElementById("searchNumCoins").style.display = ""
      document.getElementById("searchNumNew").style.display = ""
      document.getElementById("seekerProbNewStat").style.display = ""
      document.getElementById("seekerExpNewStat").style.display = ""
      document.getElementById("seekerExpectedCoins").style.display = ""
      document.getElementById("seekerNumSearches").style.display = ""
      document.getElementById("seekerNumCoins").style.display = ""
      document.getElementById("seekerNumNew").style.display = ""
    }
    else if (boughtUpgrade[19] == 0) {
      boughtUpgrade[19] = 1
      goldenBuffaloCount += 7
      goldenBuffalosFound += 7
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "7" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl19Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[19]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl20Upgrade() { //--> Unlock quarters
  if (myLevel >= 20 && bankAccount >= lvlUpgradeCost[20] && boughtUpgrade[19] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[20] = 1
      typesUnlocked[4] = 1
      coinCutoff = coinCutoffVector[4]

      document.getElementById("quarterHeader").style.display = ""
      document.getElementById("quarters18381891").style.display = "block"
      document.getElementById("quarterGroup1").style.display = "block"
      document.getElementById("quarters18921916").style.display = "block"
      document.getElementById("quarterGroup2").style.display = "block"
      document.getElementById("quarters19161930").style.display = "block"
      document.getElementById("quarterGroup3").style.display = "block"
      document.getElementById("quarters19321998").style.display = "block"
      document.getElementById("quarterGroup4").style.display = "block"
      document.getElementById("quarters19992008").style.display = "block"
      document.getElementById("quarterGroup5").style.display = "block"
      document.getElementById("quarters2009").style.display = "block"
      document.getElementById("quarterGroup6").style.display = "block"
      document.getElementById("quarters20102021").style.display = "block"
      document.getElementById("quarterGroup7").style.display = "block"
  
      document.getElementById("specialsButtonLocked").style.display = "none"
      document.getElementById("specialsButton").style.display = ""
    }
    else if (boughtUpgrade[20] == 0) {
      boughtUpgrade[20] = 1
      goldenBuffaloCount += 8
      goldenBuffalosFound += 8
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "8" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl20Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[20]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl21Upgrade() { //--> Seeker duration = 10min
  if (myLevel >= 21 && bankAccount >= lvlUpgradeCost[21] && boughtUpgrade[20] == 1) {
    boughtUpgrade[21] = 1
    seekerFuelTimeUpgrade = 3
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl21Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[21]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl22Upgrade() { //--> Seeker interval = 4s
  if (myLevel >= 22 && bankAccount >= lvlUpgradeCost[22] && boughtUpgrade[21] == 1) {
    boughtUpgrade[22] = 1
    seekerCooldownUpgrade = 3
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl22Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[22]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl23Upgrade() { //--> Unlock garbage filter
  if (myLevel >= 23 && bankAccount >= lvlUpgradeCost[23] && boughtUpgrade[22] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[23] = 1
      document.getElementById("dupFilterText").style.display = ""
      document.getElementById("toggleGarbage").style.display = ""
    }
    else if (boughtUpgrade[23] == 0) {
      boughtUpgrade[23] = 1
      goldenBuffaloCount += 9
      goldenBuffalosFound += 9
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "9" + " Golden Buffalo nickels!")
    }

    document.getElementById("lvl23Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[23]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl24Upgrade() { //--> Increase golden buffalo yield (1-3 per click)
  if (myLevel >= 24 && bankAccount >= lvlUpgradeCost[24] && boughtUpgrade[23] == 1) {
    boughtUpgrade[24] = 1
    buffaloUB = 3 //Now for buffalo amount per click, a random number will be taken from (0,3) and rounded up
    document.getElementById("lvl24Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[24]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl25Upgrade() { //--> Unlock Vending Machine 1
  if (myLevel >= 25 && bankAccount >= lvlUpgradeCost[25] && boughtUpgrade[24] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[25] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      vendingMachinePower = 250 //Initial value
      specialIsUnlocked[1] = true
      if (achHave[121] == 0) {
        achAward(121)
      }
      document.getElementById("specials1Locked").style.display = "none"
      document.getElementById("specials1Unlocked").style.display = "flex"
      document.getElementById("toggleReady1Badge").style.display = ""
      document.getElementById("vending1StatRow").style.display = ""
    }
    else if (boughtUpgrade[25] == 0) {
      boughtUpgrade[25] = 1
      goldenBuffaloCount += 10
      goldenBuffalosFound += 10
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "10" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl25Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[25]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl26Upgrade() { //--> Unlock Seeker 4
  if (myLevel >= 26 && bankAccount >= lvlUpgradeCost[26] && boughtUpgrade[25] == 1) {
    if (ascensionLevel == 0) {
      seekerUnlocked[4] = 1
      document.getElementById("statSeeker4Row").style.display = ""
      boughtUpgrade[26] = 1
      document.getElementById("seekerboxBlank4").style.display = "block"
    }
    else if (boughtUpgrade[26] == 0) {
      boughtUpgrade[26] = 1
      goldenBuffaloCount += 11
      goldenBuffalosFound += 11
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "11" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[26]
    document.getElementById("lvl26Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl27Upgrade() { //--> Seeker duration = 15min
  if (myLevel >= 27 && bankAccount >= lvlUpgradeCost[27] && boughtUpgrade[26] == 1) {
    boughtUpgrade[27] = 1
    seekerFuelTimeUpgrade = 4
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl27Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[27]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl28Upgrade() { //--> Seeker interval = 3.5s
  if (myLevel >= 28 && bankAccount >= lvlUpgradeCost[28] && boughtUpgrade[27] == 1) {
    boughtUpgrade[28] = 1
    seekerCooldownUpgrade = 4
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl28Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[28]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl29Upgrade() { //--> Increase Vending Machine Power (250 -> 500)
  if (myLevel >= 29 && bankAccount >= lvlUpgradeCost[29] && boughtUpgrade[28] == 1) {
    boughtUpgrade[29] = 1
    vendingMachinePower *= 2
    document.getElementById("lvl29Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[29]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl30Upgrade() { //--> Unlock half dollars
  if (myLevel >= 30 && bankAccount >= lvlUpgradeCost[30] && boughtUpgrade[29] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[30] = 1
      typesUnlocked[5] = 1
      coinCutoff = coinCutoffVector[5]
      
      document.getElementById("halfDollarHeader").style.display = ""
      document.getElementById("half18391891").style.display = "block"
      document.getElementById("halfDollarGroup1").style.display = "block"
      document.getElementById("half18921915").style.display = "block"
      document.getElementById("halfDollarGroup2").style.display = "block"
      document.getElementById("half19161947").style.display = "block"
      document.getElementById("halfDollarGroup3").style.display = "block"
      document.getElementById("half19481963").style.display = "block"
      document.getElementById("halfDollarGroup4").style.display = "block"
      document.getElementById("half19642001").style.display = "block"
      document.getElementById("halfDollarGroup5").style.display = "block"
    }
    else if (boughtUpgrade[30] == 0) {
      boughtUpgrade[30] = 1
      goldenBuffaloCount += 12
      goldenBuffalosFound += 12
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "12" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl30Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[30]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl31Upgrade() { //--> Search power = 15
  if (myLevel >= 31 && bankAccount >= lvlUpgradeCost[31] && boughtUpgrade[30] == 1) {
    boughtUpgrade[31] = 1
    searchPower *= 5/4
    document.getElementById("lvl31Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[31]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl32Upgrade() { //--> Seeker duration = 20min
  if (myLevel >= 32 && bankAccount >= lvlUpgradeCost[32] && boughtUpgrade[31] == 1) {
    boughtUpgrade[32] = 1
    seekerFuelTimeUpgrade = 5
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl32Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[32]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl33Upgrade() { //--> Seeker interval = 3s
  if (myLevel >= 33 && bankAccount >= lvlUpgradeCost[33] && boughtUpgrade[32] == 1) {
    boughtUpgrade[33] = 1
    seekerCooldownUpgrade = 5
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl33Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[33]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl34Upgrade() { //--> Unlock Seeker 5
  if (myLevel >= 34 && bankAccount >= lvlUpgradeCost[34] && boughtUpgrade[33] == 1) {
    if (ascensionLevel == 0) {
      seekerUnlocked[5] = 1
      document.getElementById("statSeeker5Row").style.display = ""
      boughtUpgrade[34] = 1
      document.getElementById("seekerboxBlank5").style.display = "block"
    }
    else if (boughtUpgrade[34] == 0) {
      boughtUpgrade[34] = 1
      goldenBuffaloCount += 13
      goldenBuffalosFound += 13
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "13" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[34]
    document.getElementById("lvl34Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl35Upgrade() { //--> Unlock Vending Machine 2
  if (myLevel >= 35 && bankAccount >= lvlUpgradeCost[35] && boughtUpgrade[34] == 1) {
    if (ascensionLevel == 0) {
      specialIsUnlocked[2] = true
      if (achHave[122] == 0) {
        achAward(122)
      }
      document.getElementById("specials2Locked").style.display = "none"
      document.getElementById("specials2Unlocked").style.display = "flex"
      document.getElementById("toggleReady2Badge").style.display = ""
      document.getElementById("vending2StatRow").style.display = ""
    }
    else if (boughtUpgrade[35] == 0 && whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 8) {
      goldenBuffaloCount += 14
      goldenBuffalosFound += 14
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "14" + " Golden Buffalo nickels!")
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      unlockBank()
    }
    boughtUpgrade[35] = 1
    document.getElementById("lvl35Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[35]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl36Upgrade() { //--> Search power = 18
  if (myLevel >= 36 && bankAccount >= lvlUpgradeCost[36] && boughtUpgrade[35] == 1) {
    boughtUpgrade[36] = 1
    searchPower *= 1.2
    document.getElementById("lvl36Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[36]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl37Upgrade() { //--> Increase golden buffalo yield (1-4 per click)
  if (myLevel >= 37 && bankAccount >= lvlUpgradeCost[37] && boughtUpgrade[36] == 1) {
    boughtUpgrade[37] = 1
    buffaloUB = 4 //Now for buffalo amount per click, a random number will be taken from (0,4) and rounded up
    document.getElementById("lvl37Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[37]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl38Upgrade() { //--> Vending Machine Cooldown = 25min
  if (myLevel >= 38 && bankAccount >= lvlUpgradeCost[38] && boughtUpgrade[37] == 1) {
    specialsCooldown[1] = 1500 * 0.75 ** Math.max(numberDescensionsComplete[1],0) //25 min
    specialsCooldown[2] = 1500 * 0.75 ** Math.max(numberDescensionsComplete[1],0) //25 min
    boughtUpgrade[38] = 1
    if (remainingTime[1] > specialsCooldown[1]) {
      startTime[1] = Date.now()
    }
    if (remainingTime[2] > specialsCooldown[2]) {
      startTime[2] = Date.now()
    }
    document.getElementById("lvl38Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[38]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl39Upgrade() { //--> Seeker duration = 25min
  if (myLevel >= 39 && bankAccount >= lvlUpgradeCost[39] && boughtUpgrade[38] == 1) {
    boughtUpgrade[39] = 1
    seekerFuelTimeUpgrade = 6
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl39Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[39]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl40Upgrade() { //--> Unlock dollars
  if (myLevel >= 40 && bankAccount >= lvlUpgradeCost[40] && boughtUpgrade[39] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[40] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      typesUnlocked[6] = 1
      coinCutoff = coinCutoffVector[6]

      document.getElementById("dollarHeader").style.display = ""
      document.getElementById("dollars18401873").style.display = "block"
      document.getElementById("dollarGroup1").style.display = "block"
      document.getElementById("dollars18731878").style.display = "block"
      document.getElementById("dollarGroup2").style.display = "block"
      document.getElementById("dollars18781921").style.display = "block"
      document.getElementById("dollarGroup3").style.display = "block"
      document.getElementById("dollars19211935").style.display = "block"
      document.getElementById("dollarGroup4").style.display = "block"
      document.getElementById("dollars19711978").style.display = "block"
      document.getElementById("dollarGroup5").style.display = "block"
      document.getElementById("dollars19791999").style.display = "block"
      document.getElementById("dollarGroup6").style.display = "block"
      document.getElementById("dollars20002001").style.display = "block"
      document.getElementById("dollarGroup7").style.display = "block"
      document.getElementById("dollars20072011").style.display = "block"
      document.getElementById("dollarGroup8").style.display = "block"
    }
    else if (boughtUpgrade[40] == 0) {
      boughtUpgrade[40] = 1
      goldenBuffaloCount += 15
      goldenBuffalosFound += 15
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "15" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl40Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[40]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl41Upgrade() { //--> Seeker interval = 2.5s
  if (myLevel >= 41 && bankAccount >= lvlUpgradeCost[41] && boughtUpgrade[40] == 1) {
    boughtUpgrade[41] = 1
    seekerCooldownUpgrade = 6
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl41Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[41]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl42Upgrade() { //--> Search Power = 25
  if (myLevel >= 42 && bankAccount >= lvlUpgradeCost[42] && boughtUpgrade[41] == 1) {
    boughtUpgrade[42] = 1
    searchPower *= 25/18 // = 39% increase
    document.getElementById("lvl42Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[42]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl43Upgrade() { //--> Reduce Golden Buffalo spawn time (5min)
  if (myLevel >= 43 && bankAccount >= lvlUpgradeCost[43] && boughtUpgrade[42] == 1) {
    boughtUpgrade[43] = 1
    goldenBuffaloSpawnTime = 300000 //in milliseconds
    document.getElementById("lvl43Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[43]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl44Upgrade() { //--> Unlock Seeker 6
  if (myLevel >= 44 && bankAccount >= lvlUpgradeCost[44] && boughtUpgrade[43] == 1) {
    if (ascensionLevel == 0) {
      seekerUnlocked[6] = 1
      document.getElementById("statSeeker6Row").style.display = ""
      boughtUpgrade[44] = 1
      document.getElementById("seekerboxBlank6").style.display = "block"
    }
    else if (boughtUpgrade[44] == 0) {
      boughtUpgrade[44] = 1
      goldenBuffaloCount += 16
      goldenBuffalosFound += 16
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "16" + " Golden Buffalo nickels!")
    }
    bankAccount -= lvlUpgradeCost[44]
    document.getElementById("lvl44Upgrade").style.display = "none"
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl45Upgrade() { //--> Unlock Super Seeker Pill
  if (myLevel >= 45 && bankAccount >= lvlUpgradeCost[45] && boughtUpgrade[44] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      specialIsUnlocked[3] = true
      document.getElementById("specials3Locked").style.display = "none"
      document.getElementById("specials3Unlocked").style.display = "flex"
      document.getElementById("toggleReady3Badge").style.display = ""
      document.getElementById("toggleHypnotic").style.display = ""
    }
    else if (boughtUpgrade[45] == 0 && whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 7) {
      goldenBuffaloCount += 17
      goldenBuffalosFound += 17
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "17" + " Golden Buffalo nickels!")
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      unlockBank()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToII()
    }
    boughtUpgrade[45] = 1
    document.getElementById("lvl45Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[45]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl46Upgrade() { //--> Search Power = 40
  if (myLevel >= 46 && bankAccount >= lvlUpgradeCost[46] && boughtUpgrade[45] == 1) {
    boughtUpgrade[46] = 1
    searchPower *= 8/5
    document.getElementById("lvl46Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[46]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl47Upgrade() { //--> Increase Vending Machine Power (500 -> 750)
  if (myLevel >= 47 && bankAccount >= lvlUpgradeCost[47] && boughtUpgrade[46] == 1) {
    boughtUpgrade[47] = 1
    vendingMachinePower *= 1.5
    document.getElementById("lvl47Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[47]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl48Upgrade() { //--> Increase golden buffalo yield (1-6 per click)
  if (myLevel >= 48 && bankAccount >= lvlUpgradeCost[48] && boughtUpgrade[47] == 1) {
    boughtUpgrade[48] = 1
    buffaloUB = 6 //Now for buffalo amount per click, a random number will be taken from (0,6) and rounded up
    document.getElementById("lvl48Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[48]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl49Upgrade() { //--> Seeker duration = 30min
  if (myLevel >= 49 && bankAccount >= lvlUpgradeCost[49] && boughtUpgrade[48] == 1) {
    boughtUpgrade[49] = 1
    seekerFuelTimeUpgrade = 7
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl49Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[49]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl50Upgrade() { //--> Unlock the Wishing Fountain
  if (myLevel >= 50 && bankAccount >= lvlUpgradeCost[50] && boughtUpgrade[49] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[50] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      fountainPower = 10000
      specialIsUnlocked[7] = true
      if (achHave[136] == 0) {
        achAward(136)
      }
      document.getElementById("specials7Locked").style.display = "none"
      document.getElementById("specials7Unlocked").style.display = "flex"
      document.getElementById("toggleReady7Badge").style.display = ""
      document.getElementById("fountainStatRow").style.display = ""
    }
    else if (boughtUpgrade[50] == 0) {
      boughtUpgrade[50] = 1
      goldenBuffaloCount += 18
      goldenBuffalosFound += 18
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "18" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl50Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[50]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl51Upgrade() { //--> Search Power = 60
  if (myLevel >= 51 && bankAccount >= lvlUpgradeCost[51] && boughtUpgrade[50] == 1
      && !(prestigeComplete == false && currentDescensionType == 9 && numberDescensionsComplete[9] == 9 && myLevel <= 99)) {
    boughtUpgrade[51] = 1
    searchPower *= 1.5
    document.getElementById("lvl51Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[51]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl52Upgrade() { //--> Increase Seeker Power by 20%
  if (myLevel >= 52 && bankAccount >= lvlUpgradeCost[52] && boughtUpgrade[51] == 1) {
    extraSeekerFactor *= 1.2
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[52] = 1
    document.getElementById("lvl52Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[52]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl53Upgrade() { //--> Seeker interval = 2.5s
  if (myLevel >= 53 && bankAccount >= lvlUpgradeCost[53] && boughtUpgrade[52] == 1) {
    boughtUpgrade[53] = 1
    seekerCooldownUpgrade = 7
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl53Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[53]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl54Upgrade() { //--> Decrease Super Seeker Pill cooldown (1hr -> 45min)
  if (myLevel >= 54 && bankAccount >= lvlUpgradeCost[54] && boughtUpgrade[53] == 1) {
    boughtUpgrade[54] = 1
    specialsCooldown[3] = 2700
    if (remainingTime[3] > specialsCooldown[3]) {
      startTime[3] = Date.now()
    }
    document.getElementById("lvl54Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[54]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl55Upgrade() { //--> Unlock Traveling Salesman
  if (myLevel >= 55 && bankAccount >= lvlUpgradeCost[55] && boughtUpgrade[54] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      document.getElementById("specials4Locked").style.display = "none"
      document.getElementById("specials4Unlocked").style.display = "flex"
      document.getElementById("toggleReady4Badge").style.display = ""
      specialIsUnlocked[4] = true
      if (achHave[142] == 0) {
        achAward(142)
      }
    }
    else if (boughtUpgrade[55] == 0 && whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 6) {
      goldenBuffaloCount += 19
      goldenBuffalosFound += 19
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "19" + " Golden Buffalo nickels!")
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 7) {
      unlockBank()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      upgradeBankToII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToIII()
    }
    boughtUpgrade[55] = 1
    document.getElementById("lvl55Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[55]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl56Upgrade() { //--> Search Power = 80
  if (myLevel >= 56 && bankAccount >= lvlUpgradeCost[56] && boughtUpgrade[55] == 1) {
    boughtUpgrade[56] = 1
    searchPower *= 4/3
    document.getElementById("lvl56Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[56]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl57Upgrade() { //--> Increase Vending Machine Power (750 -> 1500)
  if (myLevel >= 57 && bankAccount >= lvlUpgradeCost[57] && boughtUpgrade[56] == 1) {
    boughtUpgrade[57] = 1
    vendingMachinePower *= 2
    document.getElementById("lvl57Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[57]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl58Upgrade() { //--> Increase golden buffalo yield (1-8 per click)
  if (myLevel >= 58 && bankAccount >= lvlUpgradeCost[58] && boughtUpgrade[57] == 1) {
    boughtUpgrade[58] = 1
    buffaloUB = 8 //Now for buffalo amount per click, a random number will be taken from (0,8) and rounded up
    document.getElementById("lvl58Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[58]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl59Upgrade() { //--> Seeker duration = 45min
  if (myLevel >= 59 && bankAccount >= lvlUpgradeCost[59] && boughtUpgrade[58] == 1) {
    boughtUpgrade[59] = 1
    seekerFuelTimeUpgrade = 8
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl59Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[59]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl60Upgrade() { //--> Unlock the Metal Detector
  if (myLevel >= 60 && bankAccount >= lvlUpgradeCost[60] && boughtUpgrade[59] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[60] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      specialIsUnlocked[8] = true
      if (achHave[148] == 0) {
        achAward(148)
      }
      chestPower = 5000
      document.getElementById("specials8Locked").style.display = "none"
      document.getElementById("specials8Unlocked").style.display = "flex"
      document.getElementById("toggleReady8Badge").style.display = ""
      document.getElementById("chestStatRow").style.display = ""
    }
    else if (boughtUpgrade[60] == 0) {
      boughtUpgrade[60] = 1
      goldenBuffaloCount += 20
      goldenBuffalosFound += 20
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "20" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl60Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[60]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl61Upgrade() { //--> Search Power = 120
  if (myLevel >= 61 && bankAccount >= lvlUpgradeCost[61] && boughtUpgrade[60] == 1) {
    boughtUpgrade[61] = 1
    searchPower *= 1.5
    document.getElementById("lvl61Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[61]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl62Upgrade() { //--> Unlock Seeker 7
  if (myLevel >= 62 && bankAccount >= lvlUpgradeCost[62] && boughtUpgrade[61] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[62] = 1
      document.getElementById("statSeeker7Row").style.display = ""
      seekerUnlocked[7] = 1
      document.getElementById("seekerboxBlank7").style.display = "block"
    }
    else if (boughtUpgrade[62] == 0) {
      boughtUpgrade[62] = 1
      goldenBuffaloCount += 21
      goldenBuffalosFound += 21
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "21" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl62Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[62]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl63Upgrade() { //--> Reduce Golden Buffalo spawn time (4min)
  if (myLevel >= 63 && bankAccount >= lvlUpgradeCost[63] && boughtUpgrade[62] == 1) {
    boughtUpgrade[63] = 1
    goldenBuffaloSpawnTime = 240000 //in milliseconds
    document.getElementById("lvl63Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[63]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl64Upgrade() { //--> Increase Vending Machine Power (1500 -> 3000)
  if (myLevel >= 64 && bankAccount >= lvlUpgradeCost[64] && boughtUpgrade[63] == 1) {
    boughtUpgrade[64] = 1
    vendingMachinePower *= 2
    document.getElementById("lvl64Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[64]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl65Upgrade() { //--> Unlock Bank Exchange I
  if (myLevel >= 65 && bankAccount >= lvlUpgradeCost[65] && boughtUpgrade[64] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      unlockBank()
      document.getElementById("coinRollStatTableLocked").style.display = "none"
      document.getElementById("coinRollStatTable").style.display = ""
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 6) {
      unlockBank()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 7) {
      upgradeBankToII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      upgradeBankToIII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToIV()
    }
    boughtUpgrade[65] = 1
    document.getElementById("lvl65Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[65]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl66Upgrade() { //--> Search Power = 200
  if (myLevel >= 66 && bankAccount >= lvlUpgradeCost[66] && boughtUpgrade[65] == 1) {
    boughtUpgrade[66] = 1
    searchPower *= 5/3
    document.getElementById("lvl66Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[66]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl67Upgrade() { //--> Seeker interval = 1.5s
  if (myLevel >= 67 && bankAccount >= lvlUpgradeCost[67] && boughtUpgrade[66] == 1) {
    boughtUpgrade[67] = 1
    seekerCooldownUpgrade = 8
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl67Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[67]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl68Upgrade() { //--> Unlock Common Filter
  if (myLevel >= 68 && bankAccount >= lvlUpgradeCost[68] && boughtUpgrade[67] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      boughtUpgrade[68] = 1
      document.getElementById("toggleCommon").style.display = ""
    }
    else if (boughtUpgrade[68] == 0) {
      boughtUpgrade[68] = 1
      goldenBuffaloCount += 22
      goldenBuffalosFound += 22
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "22" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl68Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[68]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl69Upgrade() { //--> Seeker duration = 1hr
  if (myLevel >= 69 && bankAccount >= lvlUpgradeCost[69] && boughtUpgrade[68] == 1) {
    boughtUpgrade[69] = 1
    seekerFuelTimeUpgrade = 9
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl69Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[69]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl70Upgrade() { //--> Unlock Coin Vacuum
  if (myLevel >= 70 && bankAccount >= lvlUpgradeCost[70] && boughtUpgrade[69] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[70] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      specialIsUnlocked[6] = true
      if (achHave[189] == 0) {
        achAward(189)
      }
      vacuumPower = 8000
      document.getElementById("specials6Locked").style.display = "none"
      document.getElementById("specials6Unlocked").style.display = "flex"
      document.getElementById("toggleReady6Badge").style.display = ""
      document.getElementById("vacuumStatRow").style.display = ""
    }
    else if (boughtUpgrade[70] == 0) {
      boughtUpgrade[70] = 1
      goldenBuffaloCount += 23
      goldenBuffalosFound += 23
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "23" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl70Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[70]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl71Upgrade() { //--> Search Power = 300
  if (myLevel >= 71 && bankAccount >= lvlUpgradeCost[71] && boughtUpgrade[70] == 1) {
    boughtUpgrade[71] = 1
    searchPower *= 1.5
    document.getElementById("lvl71Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[71]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl72Upgrade() { //--> Increase Metal Detector & Fountain Power by 100%
  if (myLevel >= 72 && bankAccount >= lvlUpgradeCost[72] && boughtUpgrade[71] == 1) {
    boughtUpgrade[72] = 1
    chestPower *= 2
    fountainPower *= 2
    document.getElementById("lvl72Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[72]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl73Upgrade() { //--> Increase golden buffalo yield (1-12 per click)
  if (myLevel >= 73 && bankAccount >= lvlUpgradeCost[73] && boughtUpgrade[72] == 1) {
    boughtUpgrade[73] = 1
    buffaloUB = 12 //Now for buffalo amount per click, a random number will be taken from (0,12) and rounded up
    document.getElementById("lvl73Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[73]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl74Upgrade() { //--> Increase Seeker Power by 20%
  if (myLevel >= 74 && bankAccount >= lvlUpgradeCost[74] && boughtUpgrade[73] == 1) {
    extraSeekerFactor *= 1.2
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[74] = 1
    document.getElementById("lvl74Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[74]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl75Upgrade() { //--> Upgrade to Bank Exchange II
  if (myLevel >= 75 && bankAccount >= lvlUpgradeCost[75] && boughtUpgrade[74] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      upgradeBankToII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 6) {
      upgradeBankToII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 7) {
      upgradeBankToIII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      upgradeBankToIV()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToV()
    }

    boughtUpgrade[75] = 1
    document.getElementById("lvl75Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[75]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl76Upgrade() { //--> Search Power = 400
  if (myLevel >= 76 && bankAccount >= lvlUpgradeCost[76] && boughtUpgrade[75] == 1) {
    boughtUpgrade[76] = 1
    searchPower *= 4/3
    document.getElementById("lvl76Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[76]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl77Upgrade() { //--> Decrease Metal Detector cooldown (3hr -> 2.5hr)
  if (myLevel >= 77 && bankAccount >= lvlUpgradeCost[77] && boughtUpgrade[76] == 1) {
    boughtUpgrade[77] = 1
    specialsCooldown[8] = 9000
    if (numberDescensionsComplete[4] >= 1) {
      var metalCooldown = [0,7200,3600,2700,2700,1800,1800,900,900,600,600]
      specialsCooldown[8] = metalCooldown[numberDescensionsComplete[4]]
    }
    if (remainingTime[8] > specialsCooldown[8]) {
      startTime[8] = Date.now()
    }
    document.getElementById("lvl77Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[77]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl78Upgrade() { //--> Seeker interval = 1s
  if (myLevel >= 78 && bankAccount >= lvlUpgradeCost[78] && boughtUpgrade[77] == 1) {
    boughtUpgrade[78] = 1
    seekerCooldownUpgrade = 9
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"cd").innerHTML = seekerCooldownUnits[seekerCooldownUpgrade]
    }
    document.getElementById("lvl78Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[78]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl79Upgrade() { //--> Traveling Salesman no longer sells uncommons
  if (myLevel >= 79 && bankAccount >= lvlUpgradeCost[79] && boughtUpgrade[78] == 1) {
    boughtUpgrade[79] = 1
    salesmanLevel = 2
    document.getElementById("lvl79Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[79]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl80Upgrade() { //--> Unlock the Coin Pusher
  if (myLevel >= 80 && bankAccount >= lvlUpgradeCost[80] && boughtUpgrade[79] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[80] = 1
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      specialIsUnlocked[9] = true
      if (achHave[196] == 0) {
        achAward(196)
      }
      document.getElementById("specials9Locked").style.display = "none"
      document.getElementById("specials9Unlocked").style.display = "flex"
      document.getElementById("toggleReady9Badge").style.display = ""
      document.getElementById("coinPusherStatRow").style.display = ""
    }
    else if (boughtUpgrade[80] == 0) {
      boughtUpgrade[80] = 1
      goldenBuffaloCount += 24
      goldenBuffalosFound += 24
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "24" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl80Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[80]
    updateBankAccount()
    updateCoinmasterBadge()
    updatePowers()
    updateAllStats()
  }
}

function lvl81Upgrade() { //--> Search Power = 600
  if (myLevel >= 81 && bankAccount >= lvlUpgradeCost[81] && boughtUpgrade[80] == 1) {
    boughtUpgrade[81] = 1
    searchPower *= 1.5
    document.getElementById("lvl81Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[81]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl82Upgrade() { //--> Double Vending, Fountain, Vacuum, and Detector Powers
  if (myLevel >= 82 && bankAccount >= lvlUpgradeCost[82] && boughtUpgrade[81] == 1) {
    boughtUpgrade[82] = 1
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl82Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[82]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl83Upgrade() { //--> Seeker duration = 1.5hr
  if (myLevel >= 83 && bankAccount >= lvlUpgradeCost[83] && boughtUpgrade[82] == 1) {
    boughtUpgrade[83] = 1
    seekerFuelTimeUpgrade = 10
    for (let i = 1; i <= 7; i++) {
      document.getElementById("seeker"+i+"active").innerHTML = seekerFuelTimeUnits[seekerFuelTimeUpgrade]
    }
    document.getElementById("lvl83Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[83]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl84Upgrade() { //--> Search Power = 1000
  if (myLevel >= 84 && bankAccount >= lvlUpgradeCost[84] && boughtUpgrade[83] == 1) {
    boughtUpgrade[84] = 1
    searchPower *= 5/3
    document.getElementById("lvl84Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[84]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl85Upgrade() { //--> Upgrade to Bank Exchange III
  if (myLevel >= 85 && bankAccount >= lvlUpgradeCost[85] && boughtUpgrade[84] == 1) {
    if (whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 6) {
      upgradeBankToIII()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 7) {
      upgradeBankToIV()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      upgradeBankToV()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToVI()
    }
    boughtUpgrade[85] = 1
    document.getElementById("lvl85Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[85]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl86Upgrade() { //--> Double ALL Powers
  if (myLevel >= 86 && bankAccount >= lvlUpgradeCost[86] && boughtUpgrade[85] == 1) {
    extraSeekerFactor *= 2
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[86] = 1
    searchPower *= 2
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl86Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[86]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl87Upgrade() { //--> Unlock Uncommon Filter
  if (myLevel >= 87 && bankAccount >= lvlUpgradeCost[87] && boughtUpgrade[86] == 1) {
    if (ascensionLevel == 0) {
      boughtUpgrade[87] = 1
      document.getElementById("toggleUncommon").style.display = ""
    }
    else if (boughtUpgrade[87] == 0) {
      boughtUpgrade[87] = 1
      goldenBuffaloCount += 25
      goldenBuffalosFound += 25
      goldenAchCheck()
      document.getElementById("goldenBuffaloAmount").innerHTML = "x" + goldenBuffaloCount
      document.getElementById("goldenBuffalosFound").innerHTML = numberWithCommas(goldenBuffalosFound)
      shiftFeed()
      document.getElementById("feedDiv"+feedCount).innerHTML = ("><span style='color:goldenrod'> You bought "
        + "25" + " Golden Buffalo nickels!")
    }
    document.getElementById("lvl87Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[87]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl88Upgrade() { //--> Search Power = 3000
  if (myLevel >= 88 && bankAccount >= lvlUpgradeCost[88] && boughtUpgrade[87] == 1) {
    boughtUpgrade[88] = 1
    searchPower *= 1.5
    document.getElementById("lvl88Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[88]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl89Upgrade() { //--> Double Vending, Fountain, Vacuum, and Detector Powers
  if (myLevel >= 89 && bankAccount >= lvlUpgradeCost[89] && boughtUpgrade[88] == 1) {
    boughtUpgrade[89] = 1
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl89Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[89]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl90Upgrade() { //--> Upgrade to Bank Exchange IV
  if (myLevel >= 90 && bankAccount >= lvlUpgradeCost[90] && boughtUpgrade[89] == 1) {
    if (whichEnabled[5] == 1 && numberDescensionsComplete[5] <= 6) {
      upgradeBankToIV()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 7) {
      upgradeBankToV()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] == 8) {
      upgradeBankToVI()
    }
    else if (whichEnabled[5] == 1 && numberDescensionsComplete[5] >= 9) {
      upgradeBankToVII()
    }
    boughtUpgrade[90] = 1
    document.getElementById("lvl90Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[90]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl91Upgrade() { //--> Search Power = 5000
  if (myLevel >= 91 && bankAccount >= lvlUpgradeCost[91] && boughtUpgrade[90] == 1) {
    boughtUpgrade[91] = 1
    searchPower *= 5/3
    document.getElementById("lvl91Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[91]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl92Upgrade() { //--> Increase Seeker Power by 100%
  if (myLevel >= 92 && bankAccount >= lvlUpgradeCost[92] && boughtUpgrade[91] == 1) {
    extraSeekerFactor *= 2
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[92] = 1
    document.getElementById("lvl92Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[92]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl93Upgrade() { //--> Double Search, Vending, Fountain, Vacuum, and Detector Powers -> Search power = 10000
  if (myLevel >= 93 && bankAccount >= lvlUpgradeCost[93] && boughtUpgrade[92] == 1) {
    boughtUpgrade[93] = 1
    searchPower *= 2
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl93Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[93]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl94Upgrade() { //--> Double Search, Vending, Fountain, Vacuum, and Detector Powers -> Search power = 20000
  if (myLevel >= 94 && bankAccount >= lvlUpgradeCost[94] && boughtUpgrade[93] == 1) {
    boughtUpgrade[94] = 1
    searchPower *= 2
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl94Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[94]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl95Upgrade() { //--> Traveling Salesman no longer sells rares, Unlock Rare Filter
  if (myLevel >= 95 && bankAccount >= lvlUpgradeCost[95] && boughtUpgrade[94] == 1) {
    if (ascensionLevel == 0) {
      numberMessagesUnlocked++
      jumpToMessage(numberMessagesUnlocked)
      boughtUpgrade[95] = 1
      salesmanLevel = 3
      document.getElementById("toggleRare").style.display = ""
    }
    else if (boughtUpgrade[95] == 0) {
      boughtUpgrade[95] = 1
      salesmanLevel = 3
    }
    document.getElementById("lvl95Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[95]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl96Upgrade() { //--> Triple Search, Vending, Fountain, Vacuum, and Detector Powers -> Search power = 60000
  if (myLevel >= 96 && bankAccount >= lvlUpgradeCost[96] && boughtUpgrade[95] == 1) {
    boughtUpgrade[96] = 1
    searchPower *= 3
    vendingMachinePower *= 3
    fountainPower *= 3
    vacuumPower *= 3
    chestPower *= 3
    document.getElementById("lvl96Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[96]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl97Upgrade() { //--> Double Search, Vending, Fountain, Vacuum, and Detector Powers -> Search power = 120000
  if (myLevel >= 97 && bankAccount >= lvlUpgradeCost[97] && boughtUpgrade[96] == 1) {
    boughtUpgrade[97] = 1
    searchPower *= 2
    vendingMachinePower *= 2
    fountainPower *= 2
    vacuumPower *= 2
    chestPower *= 2
    document.getElementById("lvl97Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[97]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl98Upgrade() { //--> Triple ALL Powers -> Search power = 360000
  if (myLevel >= 98 && bankAccount >= lvlUpgradeCost[98] && boughtUpgrade[97] == 1) {
    extraSeekerFactor *= 3
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[98] = 1
    searchPower *= 3
    vendingMachinePower *= 3
    fountainPower *= 3
    vacuumPower *= 3
    chestPower *= 3
    document.getElementById("lvl98Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[98]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl99Upgrade() { //--> Decuple ALL Powers -> Search power = 3600000
  if (myLevel >= 99 && bankAccount >= lvlUpgradeCost[99] && boughtUpgrade[98] == 1) {
    extraSeekerFactor *= 10
    seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
    if (seekerPillActive == 1) {
      seekerPower *= 10
    }
    boughtUpgrade[99] = 1
    searchPower *= 10
    vendingMachinePower *= 10
    fountainPower *= 10
    vacuumPower *= 10
    chestPower *= 10
    document.getElementById("lvl99Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[99]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function lvl100Upgrade() { //--> Ascend.
  if (myLevel >= 100 && bankAccount >= lvlUpgradeCost[100] && boughtUpgrade[99] == 1) {
    document.getElementById("toggleUltraRare").style.display = ""
    if (boughtUpgrade[100] == 0) {
      extraSeekerFactor *= 1.1
      seekerPower = Math.round(10 * (highestSeekerLevel / 2) * extraSeekerFactor) / 10
      if (seekerPillActive == 1) {
        seekerPower *= 10
      }
      boughtUpgrade[99] = 1
      searchPower *= 1.1
      vendingMachinePower *= 1.1
      fountainPower *= 1.1
      vacuumPower *= 1.1
      chestPower *= 1.1
  
      boughtUpgrade[100] = 1
    }
    if (prestigeComplete == false) {
      ascensionLevel++
      document.getElementById("ascensionBubbleRoman").innerHTML = roman[ascensionLevel]
      document.getElementById("prestigeArea1Label").innerHTML = "<b>Ascension " + roman[ascensionLevel] + "</b>"
      var tempMult = 1.1 ** ascensionLevel
      document.getElementById("prestigeArea1Mult").innerHTML = "Power Multiplier: " + tempMult.toFixed(2)
      document.getElementById("whichSpecCurrent").innerHTML = ""
      prestigeComplete = true

      for (let i = 1; i <= 9; i++) {
        if (currentDescensionType == i) {
          typeUnlocked[i] = 1
          numberDescensionsComplete[i]++
          specReward(i,numberDescensionsComplete[i])
          document.getElementById("rules"+i).style.background = "url('darkBlueBg.jpg')"
          document.getElementById("rules"+i).style.backgroundSize = "cover"
          document.getElementById("specProgress"+i).innerHTML = numberDescensionsComplete[i] + "/10 Complete"
          var numDescPlus1 = numberDescensionsComplete[i] + 1
          document.getElementById("fourthRule"+i).style.display = ""
          document.getElementById("fourthRule"+i).innerHTML = fourthRule[i][numDescPlus1]
          document.getElementById("rules"+i+"Rank").innerHTML = specName[i] + "<br>Specialization - Rank " + numDescPlus1
          document.getElementById("secondReward"+i).innerHTML = secondReward[i][numDescPlus1]

          //Here we only update the descend button for the 10 ascensions as the descend button for the unlock won't be seen again
          document.getElementById("descendButton"+i).innerHTML = "&darr; &darr; DESCEND &darr; &darr;"
          document.getElementById("descendButton"+i).style.backgroundColor = ""
          document.getElementById("descendButton"+i).style.border = "1px solid rgba(0,0,0,0)"
          document.getElementById("descendButton"+i).style.cursor = "pointer"
          document.getElementById("descendButton"+i).onclick = function() {descend(i)}
          if (achHave[223+i] == 0 && numberDescensionsComplete[i] == 10) {
            achAward(223+i)
          }
        }
      }
      if (ascensionLevel == 1) {
        numberMessagesUnlocked++
        jumpToMessage(numberMessagesUnlocked)
        specialIsUnlocked[10] = 1
        document.getElementById("specials10Locked").style.display = "none"
        document.getElementById("specials10Unlocked").style.display = "flex"
        document.getElementById("ascensionBubbleRoman").style.display = "flex"
      }
      if (ascensionLevel == 2 || ascensionLevel == 10 || ascensionLevel == 50 || ascensionLevel == 92 || ascensionLevel == 100) {
        numberMessagesUnlocked++
        jumpToMessage(numberMessagesUnlocked)
      }
      if (ascensionLevel == 100) {
        if (prestigeIsOpen == true) {
          togglePrestige()
        }
        document.getElementById("gameBody").style.background = "url('outerSpaceBackground.jpg')"
        document.getElementById("gameBody").style.backgroundSize = "cover"
      }
      whichEnabled = [0,1,1,1,1,1,1,1,1,1]
      specialIsUnlocked = ["",true,true,true,true,true,true,true,true,true,true]
      updateSpecialsEnabled()
      document.getElementById("specials4Locked").style.display = "none"
      document.getElementById("specials4LockedMod").style.display = "none"
      document.getElementById("specials4Unlocked").style.display = "flex"
      document.getElementById("toggleReady4Badge").style.display = ""
      document.getElementById("specials5Locked").style.display = "none"
      document.getElementById("specials5LockedMod").style.display = "none"
      document.getElementById("specials5Unlocked").style.display = "flex"
      document.getElementById("toggleReady5Badge").style.display = ""

      for (let i = 1; i <= 7; i++) {
        if (seekerUnlocked[i] == 0) {
          seekerUnlocked[i] = 1
          document.getElementById("statSeeker"+i+"Row").style.display = ""
          resetSeeker(i)
        }
      }
      if (achHave[219] == 0 && ascensionLevel == 1) {
        achAward(219)
      }
      else if (achHave[220] == 0 && ascensionLevel == 10) {
        achAward(220)
      }
      else if (achHave[221] == 0 && ascensionLevel == 25) {
        achAward(221)
      }
      else if (achHave[222] == 0 && ascensionLevel == 50) {
        achAward(222)
      }
      else if (achHave[223] == 0 && ascensionLevel == 100) {
        achAward(223)
      }
    }
    document.getElementById("lvl100Upgrade").style.display = "none"
    bankAccount -= lvlUpgradeCost[100]
    updateBankAccount()
    updateCoinmasterBadge()
    updateAllStats()
  }
}

function specReward(i,number) {
  if (i == 1) { //Vending Machines
    if (number >= 1 && number <= 9) {
      specialsCooldown[1] *= 0.75
      specialsCooldown[2] *= 0.75
      if (remainingTime[1] > specialsCooldown[1]) {
        startTime[1] = Date.now()
      }
      if (remainingTime[2] > specialsCooldown[2]) {
        startTime[2] = Date.now()
      }
    }
    //Reward for A10 is already in place in increment()
  }
  else if (i == 2) { //Pills
    if (number == 1) {
      pillCost = 20
    }
    else if (number == 2) {
      seekerPillDuration = 60
    }
    //If number == 3, start with 15 pills, this is handled in resetVariablesForDescend()
    else if (number == 4) {
      seekerPillDuration = 120
    }
    //If number == 5, start with 20 pills, this is handled in resetVariablesForDescend()
    else if (number == 6) {
      seekerPillDuration = 300
    }
    else if (number == 7) {
      seekerPillDuration = 600
    }
    else if (number == 8) {
      seekerPillDuration = 900
    }
    else if (number == 9) {
      seekerPillDuration = 1800
    }
    else if (number == 10) {
      seekerPillStop()
      seekerPillStart()
      startTime[3] = 1
      document.getElementById("pillQuantity").style.top = "0%"
      document.getElementById("pillQuantity").style.right = "0%"
      document.getElementById("pillQuantity").style.left = "auto"
      document.getElementById("pillQuantity").innerHTML = "Active"
      document.getElementById("timer3").style.display = "none"
      //Also have it set in resetVariablesForDescend() to get seeker pill started upon descension.
      //seekerPillActive is also a saved variable, so initialize() should have it working correctly.
    }
  }
  else if (i == 3) { //Wishing Fountain
    if (number >= 1 && number <= 9) {
      var wishCooldown = [0,36000,28800,21600,14400,10800,7200,3600,1800,900]
      specialsCooldown[7] = wishCooldown[number]
      if (remainingTime[7] > specialsCooldown[7]) {
        startTime[7] = Date.now()
      }
    }
    //Reward for A10 is already in place in increment()
  }
  else if (i == 4) { //Metal Detector
    if (number == 1 || number == 2 || number == 3 || number == 5 || number == 7 || number >= 9) {
      var metalCooldown = [0,7200,3600,2700,0,1800,0,900,0,600,600]
      specialsCooldown[8] = metalCooldown[number]
      if (remainingTime[8] > specialsCooldown[8]) {
        startTime[8] = Date.now()
      }
    }
    //Reward for A10 is already in place in increment()
  }
  else if (i == 5) { //Bank
    if (number >= 4) {
      document.getElementById("uncRollRow").style.display = ""
    }
    if (number >= 5) {
      document.getElementById("rarRollRow").style.display = ""
    }
    if (number >= 6) {
      document.getElementById("ultRollRow").style.display = ""
    }
    if (number == 10) {
      document.getElementById("toggleRollBuy").style.display = ""
      toggleAutoBuyRolls = true
    }
    //All other rewards are integrated earlier in code
  }
  else if (i == 6) { //Coin Vacuum
    if (number >= 1 && number <= 9) {
      var vacuumCooldown = [0,7200,7200,3600,3600,2700,2700,1800,1800,900]
      specialsCooldown[6] = vacuumCooldown[number]
      if (remainingTime[6] > specialsCooldown[6]) {
        startTime[6] = Date.now()
      }
      var vacSpeed = [0,5,10,10,20,20,40,40,80,80]
      var vacRotSpeed = [0,50,100,100,200,200,400,400,800,800]
      vacuumSpeed = vacSpeed[number]
      vacuumRotateSpeed = vacRotSpeed[number]

      time1 = 105 / vacuumSpeed //going right
      time2 = time1 + 90 / vacuumRotateSpeed //rotating down
      time3 = time2 + 10 / vacuumSpeed //going down
      time4 = time3 + 90 / vacuumRotateSpeed //rotating left
      time5 = time4 + 90 / vacuumSpeed //going left
      time6 = time5 + 90 / vacuumRotateSpeed //rotating down
      time7 = time6 + 10 / vacuumSpeed //going down
      time8 = time7 + 90 / vacuumRotateSpeed //rotating right
      time9 = time8 + 90 / vacuumSpeed //going right
      time10 = time9 + 90 / vacuumRotateSpeed //rotating down
      time11 = time10 + 10 / vacuumSpeed //going down
      time12 = time11 + 90 / vacuumRotateSpeed //rotating left
      time13 = time12 + 90 / vacuumSpeed //going left
      time14 = time13 + 90 / vacuumRotateSpeed //rotating down
      time15 = time14 + 10 / vacuumSpeed //going down
      time16 = time15 + 90 / vacuumRotateSpeed //rotating right
      time17 = time16 + 90 / vacuumSpeed //going right
      time18 = time17 + 90 / vacuumRotateSpeed //rotating down
      time19 = time18 + 10 / vacuumSpeed //going down
      time20 = time19 + 90 / vacuumRotateSpeed //rotating left
      time21 = time20 + 90 / vacuumSpeed //going left
      time22 = time21 + 90 / vacuumRotateSpeed //rotating up
      time23 = time22 + 25 / vacuumSpeed //going up halfway
      time24 = time23 + 90 / vacuumRotateSpeed //rotating right
      time25 = time24 + 47 / vacuumSpeed //going right halfway
      retreatTime1 = 180 / (2 * vacuumRotateSpeed) //rotating 180 to the left at twice the rotation speed
      retreatTime2 = retreatTime1 + 62 / vacuumSpeed //going left and disappearing
    }
    //Reward for A10 is already in place in increment()
  }
  else if (i == 7) { //Coin Pusher
    if (number >= 1 && number <= 9) {
      var pusherMax = [0,7200,10800,14400,18000,21600,25200,28800,36000,43200]
      var pusherPer = [0,20,40,60,90,150,240,360,720,2160]
      pusherMaxTime = pusherMax[number]
      coinLoadSec = pusherPer[number]
      specialsCooldown[9] = coinLoadSec
      var numHours = pusherMax[number] / 3600
      document.getElementById("pusherMaxTime").innerHTML = "Max: " + numHours + " hrs"
    }
    //Reward for A10 is already in place in increment()
  }
  else if (i == 8) { //Seekers
    //Most are automatically done
    if (number == 9) {
      claimSeekerPrize()
      //This should set seekerPrizeClaimed to 1 which is saved across descensions. Initialize also accounts for it.
    }
    if (number == 10) {
      fTotal = [0,1,1,1,1,1,1,1,1]
    }
  }
  else if (i == 9) { //Clicking
    if (number == 1) {
      document.getElementById("toggleDupSell").style.display = ""
      toggleAutoSellDups = true
    }
    //Automatically done
  }
}


setInterval(goldBuffalo,goldenBuffaloSpawnTime) //Clickable Golden Buffalo nickel every 6 minutes - 360000 delay
setInterval(saveGame,60000) //Auto-save every 60 seconds
setInterval(autoSellDups,5000)
setInterval(autoBuyUpgrades,2000)
setInterval(updateCoinAmts,1000)
setInterval(allowCatchUp,10000);


//////////////////////////////////////////////////////////////////////////////////////////////////////////
// AUTO CLICK ////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

var autoClick = false

function toggleAutoClick() {
  if (autoClick == false) {
    autoClick = true
    document.getElementById("autoClickDiv").style.background = "green"
    document.getElementById("autoClickDiv").innerHTML = "Dev Tool<br>Auto On"
  }
  else {
    autoClick = false
    document.getElementById("autoClickDiv").style.background = ""
    document.getElementById("autoClickDiv").innerHTML = "Dev Tool<br>Auto Off"

  }
}

setInterval(() => {
  if (autoClick == true) {
    oneSearch()
  }
}, 100);

//setInterval(oneSearch,100)


